<HTML>
<BODY>
<BR><P><BR><P>
<H5><A name="p59"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-59:</A></H5>
<BR><P>
<H3>EXX<BR>
EXCHANGE REGISTERS WITH ALTERNATE BANK</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>EXX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     SR(8) := NOT SR(8)
</PRE>
<BR><P>
Bit 8 of the Select Register (SR), which controls the selection of primary or alternate bank
for the BC, DE, and HL registers, is complemented, thus effectively exchanging the BC, DE,
and HL registers between the two banks.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> EXX  <TD>11011001  <TD>3 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p60"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-60:</A></H5>
<BR><P>
<H3>EXXX<BR>
EXCHANGE IX REGISTER WITH ALTERNATE BANK</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>EXXX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     SR(16) := NOT SR(16)
</PRE>
<BR><P>
Bit 16 of the Select Register (SR), which controls the selection of primary or alternate bank
for the IX register, is complemented, thus effectively exchanging the IX register between the
two banks.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> EXXX  <TD>11011101 11011001  <TD>3 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p61"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-61:</A></H5>
<BR><P>
<H3>EXXY<BR>
EXCHANGE IY REGISTER WITH ALTERNATE BANK</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>EXXY</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     SR(24) := NOT SR(24)
</PRE>
<BR><P>
Bit 24 of the Select Register (SR), which controls the selection of primary or alternate bank
for the IY register, is complemented, thus effectively exchanging the IY register between the
two banks.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> EXXY  <TD>11111101 11011001  <TD>3 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p62"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-62:</A></H5>
<BR><P>
<H3>HALT<BR>
HALT THE CPU</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>HALT</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     CPU Halts
</PRE>
<BR><P>
The CPU operation is suspended until either an interrupt request or reset request is
received. This instruction is used to synchronize the CPU with external events, preserving
its state until an interrupt or reset request is accepted. After an interrupt is serviced, the
instruction following HALT is executed. While the CPU is halted, memory refresh cycles still
occur, and bus requests are honored. When this instruction is executed the signal /HALT
is asserted and remains asserted until an interrupt or reset request is accepted.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> HALT  <TD>01110110  <TD>2 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p63"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-63:</A></H5>
<BR><P>
<H3>IM<BR>
INTERRUPT MODE SELECT</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>IM p<TD>p = 0, 1, 2, 3</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     SR(4-3) := p
</PRE>
<BR><P>
The interrupt mode of operation is set to one of four modes. (See Chapter 6 for a description
of the various modes for responding to interrupts). The current interrupt mode can be read
from the Select Register (SR).
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> IM p  <TD>11101101 010pp110  <TD>4 </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>pp: <TD>00 for Mode 0, 01 for Mode 3, 10 for Mode 1, 11 for Mode 2</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p64"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-64:</A></H5>
<BR><P>
<H3>IN<BR>
INPUT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>IN dst,(C)<TD>dst = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := (C)
</PRE>
<BR><P>
The byte of data from the selected peripheral is loaded into the destination register. During
the I/O transaction, the contents of the 32-bit BC register are placed on the address bus.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the input data is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the input data is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set if the input data has even parity; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>IN R,(C)  <TD>11101101 01-r-000  <TD>2+i <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p65"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-65:</A></H5>
<BR><P>
<H3>INW<BR>
INPUT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INW dst,(C)<TD>dst = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst(15..0) := (C)
</PRE>
<BR><P>
The word of data from the selected peripheral is loaded into the destination register. During
the I/O transaction, the contents of the 32-bit BC register are placed on the address bus.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the input data is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the input data is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set if the input data has even parity; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>INW R,(C)  <TD>11011101 01rrr000  <TD>2+i <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rrr: <TD>000 for BC, 010 for DE, 111 for HL</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p66"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-66:</A></H5>
<BR><P>
<H3>IN<BR>
INPUT ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>IN A,(n)</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     A := (n)
</PRE>
<BR><P>
The byte of data from the selected peripheral is loaded into the accumulator. During the
I/O transaction, the 8-bit peripheral address from the instruction is placed on the low byte
of the address bus, the contents of the accumulator are placed on address lines A15-A8,
and the high-order address lines are all zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>IN <TD>A,(n)  <TD>11011011 ----n--  <TD>3+i <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p67"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-67:</A></H5>
<BR><P>
<H3>IN0<BR>
INPUT (FROM PAGE 0)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>IN0 dst,(n)<TD>dst = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := (n)
</PRE>
<BR><P>
The byte of data from the selected on-chip peripheral is loaded into the destination register.
No external I/O transaction will be generated as a result of this instruction, although the
I/O address will appear on the address bus while this internal read is occurring. The
peripheral address is placed on the low byte of the address bus and zeros are placed on
all other address lines. When the second opcode byte is 30h no data is stored in a
destination; only the flags are updated.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the input data is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the input data is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set if the input data has even parity; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>IN <TD>0 R,(n) 11101101 00 -r-000 ----n--  <TD>3+i <TD> </TR>
<TR><TD>none: <TD>IN <TD>0 (n) 11101101 00110000 ----n--  <TD>3+i <TD> </TR>
</TABLE>
<BR><P>


<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p68"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-68:</A></H5>
<BR><P>
<H3>INA<BR>
INPUT DIRECT FROM PORT ADDRESS (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INA A,(nn)</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     A := (nn)
</PRE>
<BR><P>
The byte of data from the selected peripheral is loaded into the accumulator. During the
I/O transaction, the peripheral address from the instruction is placed on the address bus.
Any bytes of address not specified in the instruction are driven on the address lines as all
zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>INA <TD>A,(nn)  <TD>11101101 11011011 --n-- --n--  <TD>3+i <TD>I <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p69"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-69:</A></H5>
<BR><P>
<H3>INAW<BR>
INPUT DIRECT FROM PORT ADDRESS (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INAW HL,(nn)</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     HL(15..0) := (nn)
</PRE>
<BR><P>
The word of data from the selected peripheral is loaded into the HL register. During the
I/O transaction, the peripheral address from the instruction is placed on the address bus.
Any bytes of address not specified in the instruction are driven on the address lines as all
zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> INAW HL,(nn)  <TD>11111101 11011011 --n-- --n--  <TD>3+i <TD>I </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p70"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-70:</A></H5>
<BR><P>
<H3>INC<BR>
INCREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INC dst<TD>dst = R, RX, IR, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := dst + 1
</PRE>
<BR><P>
The destination operand is incremented by one and the sum is stored in the destination.
Two's complement addition is performed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Set if there is a carry from bit 3 of the result; cleared otherwise</TR>
<TR><TD>V: <TD>Set if arithmetic overflow occurs, that is, if the destination was 7FH; cleared     otherwise
</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>INC R  <TD>00-r-100  <TD>Note <TD> </TR>
<TR><TD>RX: <TD>INC RX  <TD>11y11101 0010w100  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>INC (HL)  <TD>00110100  <TD>2+r+w <TD> </TR>
<TR><TD>X: <TD>INC (XY+d)  <TD>11y11101 00110100 ----d--  <TD>4+r+w <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>w: <TD>0 for high byte, 1 for low byte</TR>
</TABLE>
<BR><P>


Note: 2 for accumulator, 3 for any other register
<P><BR>
<BR><P><BR><P>
<H5><A name="p71"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-71:</A></H5>
<BR><P>
<H3>INC[W]<BR>
INCREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INC[W] dst<TD>dst = R, RX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (XM) then begin
          dst(31..0) := dst(31..0) + 1
          end
     else begin
          dst(15..0) := dst(15..0) + 1
          end
</PRE>
<BR><P>
The destination operand is incremented by one and the sum is stored in the destination.
Two's complement addition is performed. Note that the length of the operand is controlled
by the Extended/Native mode selection, which is consistent with the manipulation of an
address by the instruction.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>INC[W] R  <TD>00rr0011  <TD>2 <TD>X <TD> </TR>
<TR><TD>RX: <TD>INC[W] RX  <TD>11y11101 00100011  <TD>2 <TD>X <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 10 for HL, 11 for SP</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p72"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-72:</A></H5>
<BR><P>
<H3>IND<BR>
INPUT AND DECREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>IND</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (HL) := (C)
     B := B - 1
     HL := HL - 1
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. During the I/O transaction the 32-
bit BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A15-A8 are not useable as part of a fixed port address.
<P><BR>
First the byte of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the B register, used as a counter, is decremented by
one. The HL register is then decremented by one, thus moving the pointer to the next
destination for the input.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>IND <TD> <TD>11101101 10101010  <TD>2+i+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p73"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-73:</A></H5>
<BR><P>
<H3>INDW<BR>
INPUT AND DECREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INDW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (HL) := (DE)
     BC(15..0) := BC(15..0) - 1
     HL := HL - 2
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. During the I/O transaction the 32-
bit DE register is placed on the address bus.
<P><BR>
First the word of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the BC register, used as a counter, is decremented by
one. The HL register is then decremented by two, thus moving the pointer to the next
destination for the input.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>INDW <TD> <TD>11101101 11101010  <TD>2+i+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p74"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-74:</A></H5>
<BR><P>
<H3>INDR<BR>
INPUT, DECREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INDR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B= 0) begin
          (HL) := (C)
          B := B - 1
          HL := HL - 1
          end
</PRE>
<BR><P>
This instruction is used for block input of strings of data. The string of input data from the
selected peripheral is loaded into memory at consecutive addresses, starting with the
location addressed by the HL register and decreasing. During the I/O transaction the
32-bit BC register is placed on the address bus. Note that the B register contains the loop
count for this instruction so that A15-A8 are not useable as part of a fixedport address.
<P><BR>
First the byte of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the B register, used as a counter, is decremented by
one. The HL register is then decremented by one, thus moving the pointer to the next
destination for the input. If the result of decrementing the B register is 0, the instruction is
terminated, otherwise the sequence is repeated. If the B register contains 0 at the start of
the execution of this instruction, 256 bytes are input.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>INDR <TD> <TD>11101101 10111010  <TD>Nx(2+i+w) </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p75"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-75:</A></H5>
<BR><P>
<H3>INDRW<BR>
INPUT, DECREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INDRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC= 0) begin
          (HL) := (DE)
          BC(15..0) := BC(15..0) - 1
          HL := HL - 2
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. The string of input data from the
selected peripheral is loaded into memory at consecutive addresses, starting with the
location addressed by the HL register and decreasing. During the I/O transaction the
32-bit DE register is placed on the address bus.
<P><BR>
First the BC register, used as a counter, is decremented by one. First the word of data from
the selected peripheral is loaded into the memory location addressed by the HL register.
Then the BC register, used as a counter, is decremented by one. The HL register is then
decremented by two, thus moving the pointer to the next destination for the input. If the result
of decrementing the BC register is 0, the instruction is terminated, otherwise the sequence
is repeated. If the BC register contains 0 at the start of the execution of this instruction, 65536
bytes are input.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>INDRW <TD> <TD>11101101 11111010  <TD>Nx(2+i+w) </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p76"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-76:</A></H5>
<BR><P>
<H3>INI<BR>
INPUT AND INCREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INI</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (HL) := (C)
     B := B - 1
     HL := HL + 1
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. During the I/O transaction the 32-
bit BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A15-A8 are not useable as part of a fixed port address.
<P><BR>
First the byte of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the B register, used as a counter, is decremented by
one. The HL register is then incremented by one, thus moving the pointer to the next
destination for the input.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> INI  <TD>11101101 10100010  <TD>2+i+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p77"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-77:</A></H5>
<BR><P>
<H3>INIW<BR>
INPUT AND INCREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INIW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (HL) := (DE)
     BC(15..0) := BC(15..0) - 1 HL := HL + 2
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data.
During the I/O transaction the 32-bit DE register is placed on the address bus.
<P><BR>
First the word of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the BC register, used as a counter, is decremented by
one. The HL register is then incremented by two, thus moving the pointer to the next
destination for the input.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> INIW  <TD>11101101 11100010  <TD>2+i+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p78"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-78:</A></H5>
<BR><P>
<H3>INIR<BR>
INPUT, INCREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INIR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B= 0) begin
          (HL) := (C)
          B := B - 1
          HL := HL + 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. The string of input data from the
selected peripheral is loaded into memory at consecutive addresses, starting with the
location addressed by the HL register and increasing. During the I/O transaction the 32-bit
BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A(15..8) are not useable as part of a fixedport address.
<P><BR>
First the byte of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the B register, used as a counter, is decremented by
one. The HL register is then incremented by one, thus moving the pointer to the next
destination for the input. If the result of decrementing the B register is 0, the instruction is
terminated, otherwise the sequence is repeated. If the B register contains 0 at the start of
the execution of this instruction, 256 bytes are input.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> INIR  <TD>11101101 10110010  <TD>Nx(2+i+w) </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p79"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-79:</A></H5>
<BR><P>
<H3>INIRW<BR>
INPUT, INCREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>INIRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC= 0) begin
          (HL) := (DE)
          BC(15..0) := BC(15..0) - 1
          HL := HL + 2
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block input of strings of data. The string of input data from the
selected peripheral is loaded into memory at consecutive addresses, starting with the
location addressed by the HL register and increasing. During the I/O transaction the 32-bit
DE register is placed on the address bus.
<P><BR>
First the word of data from the selected peripheral is loaded into the memory location
addressed by the HL register. Then the BC register, used as a counter, is decremented by
one. The HL register is then incremented by two, thus moving the pointer to the next
destination for the input. If the result of decrementing the BC register is 0, the instruction is
terminated, otherwise the sequence is repeated. If the BC register contains 0 at the start of
the execution of this instruction, 65536 bytes are input.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> INIRW  <TD>11101101 11110010 n X ( <TD>2+i+w) </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p80"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-80:</A></H5>
<BR><P>
<H3>JP<BR>
JUMP</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>JP [cc,]dst<TD>dst = IR, DA</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (cc is TRUE) then begin
          if (XM) then begin
               PC(31..0) := dst(31..0)
               end
          else begin
               PC(15..0) := dst(15..0)
               end
          end
</PRE>
<BR><P>
<P><BR>
A conditional jump transfers program control to the destination address if the setting of a
selected flag satisfies the condition code "cc" specified in the instruction; an unconditional
jump always transfers control to the destination address. If the jump is taken, the Program
Counter (PC) is loaded with the destination address; otherwise the instruction following the
Jump instruction is executed.
<P><BR>
Each of the Zero, Carry, Sign, and Overflow flags can be individually tested and a jump
performed conditionally on the setting of the flag.
<P><BR>
When using DA mode with the JP instruction, the operand is not enclosed in parentheses.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>IR: <TD>JP (HL)  <TD>11101001  <TD>2 <TD>X <TD> </TR>
<TR><TD></TD><TD>     JP (XY)  <TD>11y11101 11101001  <TD>2 <TD>X </TR>
<TR><TD>DA: <TD>JP CC,addr  <TD>11-cc010 --a(low) --a(high)  <TD>2 <TD>I,X <TD> </TR>
<TR><TD></TD><TD>    JP addr  <TD>11000011 --a(low) --a(high)  <TD>2 <TD>I,X </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>cc: <TD>000 for NZ, 001 for Z, 010 for NC, 011 for C,     100 for PO/NV, 101 for PE/V, 110 for P/NS, 111 for M/S
</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p81"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-81:</A></H5>
<BR><P>
<H3>JR<BR>
JUMP RELATIVE</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>JR [cc,]dst<TD>dst = RA</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (cc is TRUE) then begin
          dst := SIGN EXTEND dst
          if (XM) then begin
               PC(31..0) := PC(31..0) + dst(31..0)
               end
          else begin
               PC(15..0) := PC(15..0) + dst(15..0)
               end
          end
</PRE>
<BR><P>
<P><BR>
A conditional Jump transfers program control to the destination address if the setting of a
selected flag satisfies the condition code "cc" specified in the instruction; an unconditional
Jump always transfers control to the destination address. Either the Zero or Carry flag can
be tested for the conditional Jump. If the jump is taken, the Program Counter (PC) is loaded
with the destination address; otherwise the instruction following the Jump Relative instruc-tion
is executed.
<P><BR>
The destination address is calculated using relative addressing. The displacement in the
instruction is added to the PC value for the instruction following the JR instruction, not the
value of the PC for the JR instruction.
<P><BR>
These instructions employ either an 8-bit, 16-bit, or 24-bit signed, two's complement
displacement from the PC to permit jumps within a range of -126 to + 129 bytes, -32,765 to
+32,770 bytes, or -8,388,604 to + 8,388,611 bytes from the location of this instruction.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>RA: <TD>JR CC,addr  <TD>001cc000 --disp--  <TD>2 <TD>X <TD> </TR>
<TR><TD></TD><TD>     JR addr  <TD>00011000 --disp--  <TD>2 <TD>X </TR>
<TR><TD></TD><TD>     JR CC,addr  <TD>11011101 001cc000 --d(low) --d(high)  <TD>2 <TD>X </TR>
<TR><TD></TD><TD>     JR addr  <TD>11011101 00011000 --d(low) --d(high)  <TD>2 <TD>X </TR>
<TR><TD></TD><TD>     JR CC,addr  <TD>11111101 001cc000 --d(low) --d(mid) --d(high)  <TD>2 <TD>X </TR>
<TR><TD></TD><TD>     JR addr  <TD>11111101 00011000 --d(low) --d(mid) --d(high)  <TD>2 <TD>X </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>cc: <TD>00 for NZ, 01 for Z, 10 for NC, 11 for C</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p82"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-82:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,src<TD>dst = A</TR>
<TR><TD></TD><TD>               src = R, RX, IM, IR, DA, X</TR>
<TR><TD></TD><TD>          or</TR>
<TR><TD></TD><TD>               dst = R, RX, IR, DA, X</TR>
<TR><TD></TD><TD>               src = A</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := src
</PRE>
<BR><P>
The contents of the source are loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load into Accunulator
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD A,R  <TD>01111-r-  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>LD A,RX  <TD>11y11101 0111110w  <TD>2 <TD> </TR>
<TR><TD>IM: <TD>LD A,n  <TD>00111110 ----n--  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>LD A,(HL)  <TD>01111110  <TD>2+r <TD> </TR>
<TR><TD></TD><TD>    LD A,(IR)  <TD>000a1010  <TD>2+r </TR>
<TR><TD>DA: <TD>LD A,(nn)  <TD>00111010 --n-- --n--  <TD>3+r <TD>I <TD> </TR>
<TR><TD>X: <TD>LD A,(XY+d)  <TD>11y11101 01111110 ----d--  <TD>4+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


Load from Accunulator
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD Rd,A  <TD>01-r-111  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>LD RX,A  <TD>11y11101 0110w111  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>LD (HL),A  <TD>01110111  <TD>3+w <TD> </TR>
<TR><TD></TD><TD>    LD (IR),A  <TD>000a0010  <TD>3+w </TR>
<TR><TD>DA: <TD>LD (nn),A  <TD>00110010 --n-- --n--  <TD>4+w <TD>I <TD> </TR>
<TR><TD>X: <TD>LD (XY+d),A  <TD>11y11101 01110111 ----d--  <TD>5+w <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>w: <TD>0 for high byte, 1 for low byte</TR>
<TR><TD>a: <TD>0 for BC, 1 for DE</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p83"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-83:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD IMMEDIATE (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,<TD>n      dst = R, RX, IR, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := n
</PRE>
<BR><P>
The byte of immediate data is loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD R,n  <TD>00-r-110 ----n--  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>LD RX,n  <TD>11y11101 0010w110 ----n--  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>LD (HL),n  <TD>00110110 ----n--  <TD>3+w <TD> </TR>
<TR><TD>X: <TD>LD (XY+d),n  <TD>11y11101 00110110 ----d-- ----n--  <TD>5+w <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>w: <TD>0 for high byte, 1 for low byte</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p84"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-84:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD IMMEDIATE (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,nn<TD>dst = R, RX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := nn
          end
     else begin
          dst(15..0) := nn
          end
</PRE>
<BR><P>
The word of immediate data is loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD R,nn  <TD>00rr0001 --n-- --n--  <TD>2 <TD>I,L <TD> </TR>
<TR><TD>RX: <TD>LD RX,nn  <TD>11y11101 00100001 --n-- --n--  <TD>2 <TD>I,L <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 10 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p85"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-85:</A></H5>
<BR><P>
<H3>LDW<BR>
LOAD IMMEDIATE (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDW dst,nn<TD>dst = IR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := nn
          end
     else begin
          dst(15..0) := nn
          end
</PRE>
<BR><P>
<P><BR>
The word of immediate data is loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>IR: <TD>LDW (IR),nn  <TD>11101101 00pp0110 --n-- --n--  <TD>3+w <TD>I,L <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>pp: <TD>00 for BC, 01 for DE, 11 for HL</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p86"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-86:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD REGISTER (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,src<TD>dst = R</TR>
<TR><TD></TD><TD>               src = R, RX, IM, IR, X</TR>
<TR><TD></TD><TD>          or</TR>
<TR><TD></TD><TD>               dst = R, RX, IR, X</TR>
<TR><TD></TD><TD>               src = R</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := src
</PRE>
<BR><P>
The contents of the source are loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load into Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD Rd,Rs  <TD>01-rd-rs  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>LD Rd,RX  <TD>11y11101 01-ra10w  <TD>2 <TD> </TR>
<TR><TD></TD><TD>    LD RXa, RXb  <TD>11y11101 0110a10b  <TD>2 </TR>
<TR><TD>IM: <TD>LD R,n  <TD>00-r-110 ----n--  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>LD R,(HL)  <TD>01-r-110  <TD>5+w <TD> </TR>
<TR><TD>X: <TD>LD R,(XY+d)  <TD>11y11101 01-r-110 ----d--  <TD>7+w <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
Load from Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>RX: <TD>LD RX,Rs  <TD>11y11101 0110w-ra  <TD>2 <TD> </TR>
<TR><TD></TD><TD>    LD RXa,RXb  <TD>11y11101 0110a10b  <TD>2 </TR>
<TR><TD>IR: <TD>LD (HL),R  <TD>01110-r- <TD>3+w <TD> </TR>
<TR><TD>X: <TD>LD (XY+d),R  <TD>11y11101 01110-r-----d--  <TD>5+w <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>rd: <TD>per convention</TR>
<TR><TD>rs: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>w: <TD>0 for high byte, 1 for low byte</TR>
<TR><TD>ra: <TD>per convention, for A, B, C, D, E only</TR>
<TR><TD>a: <TD>destination, 0 for high byte, 1 for low byte</TR>
<TR><TD>b: <TD>source, 0 for high byte, 1 for low byte</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p87"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-87:</A></H5>
<BR><P>
<H3>LD[W]<BR>
LOAD REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD[W] dst,src<TD>dst = R</TR>
<TR><TD></TD><TD>                src = R, RX, IR, DA, X, SR</TR>
<TR><TD></TD><TD>            or</TR>
<TR><TD></TD><TD>                dst = R, RX, IR, DA, X, SR</TR>
<TR><TD></TD><TD>                src = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := src(31..0)
          end
     else begin
          dst(15..0) := src(15..0)
          end
</PRE>
<BR><P>
<P><BR>
The contents of the source are loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load into Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD Rd,Rs  <TD>11rs1101 00rd0010  <TD>2 <TD>L <TD> </TR>
<TR><TD>RX: <TD>LD R,RX  <TD>11y11101 00rr1011  <TD>2 <TD>L <TD> </TR>
<TR><TD>IR: <TD>LD R,(IR)  <TD>11011101 00rr11ri  <TD>2+r <TD> </TR>
<TR><TD></TD><TD>    L LD RX,(IR)  <TD>11y11101 00ri0011  <TD>2+r <TD>L </TR>
<TR><TD>DA: <TD>LD HL,(nn)  <TD>00101010 --n-- --n--  <TD>3+r <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD R,(nn)  <TD>11101101 01ra1011 --n-- --n--  <TD>3+r <TD>I,L </TR>
<TR><TD></TD><TD>    LD RX,(nn)  <TD>11y11101 00101010 --n-- --n--  <TD>3+r <TD>I,L </TR>
<TR><TD>X: <TD>LD R,(XY+d)  <TD>11y11101 11001011 ----d-- 00rr0011  <TD>4+r <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD IX,(IY+d)  <TD>11111101 11001011 ----d-- 00100011  <TD>4+r <TD>I,L </TR>
<TR><TD></TD><TD>    LD IY,(IX+d)  <TD>11011101 11001011 ----d-- 00100011  <TD>4+r <TD>I,L </TR>
<TR><TD>SR: <TD>LD R,(SP+d)  <TD>11011101 11001011 ----d-- 00rr0001  <TD>4+r <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD RX,(SP+d)  <TD>11y11101 11001011 ----d-- 00100001  <TD>4+r <TD>I,L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p88"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-88:</A></H5>
<BR><P>
<H3>LD[W]<BR>
LOAD REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD[W] (as<TD>follows)</TR>
</TABLE>
<P><BR>
Load from Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>RX: <TD>LD RX, R  <TD>11y11101 00rr0111  <TD>2 <TD>L <TD> </TR>
<TR><TD></TD><TD>    LD IX, IY  <TD>11011101 00100111  <TD>2 <TD>L </TR>
<TR><TD></TD><TD>    LD IY,IX  <TD>11111101 00100111  <TD>2 <TD>L </TR>
<TR><TD>IR: <TD>LD (IR),RR  <TD>11111101 00rr11ri  <TD>3+w <TD>L <TD> </TR>
<TR><TD></TD><TD>    LD (IR),RX  <TD>11y11101 00ri0001  <TD>3+w <TD>L </TR>
<TR><TD>DA: <TD>LD (nn),HL  <TD>00100010 --n-- --n--  <TD>4+w <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD (nn),R  <TD>11101101 01ra0011 --n-- --n--  <TD>4+w <TD>I,L </TR>
<TR><TD></TD><TD>    LD (nn),RX  <TD>11y11101 00100010 --n-- --n--  <TD>4+w <TD>I,L </TR>
<TR><TD>X: <TD>LD (XY+d),R  <TD>11y11101 11001011 ----d-- 00rr1011  <TD>5+w <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD (IY+d),IX  <TD>11111101 11001011 ----d-- 00101011  <TD>5+w <TD>I,L </TR>
<TR><TD></TD><TD>    LD (IX+d),IY  <TD>11011101 11001011 ----d-- 00101011  <TD>5+w <TD>I,L </TR>
<TR><TD>SR: <TD>LD (SP+d),R  <TD>11011101 11001011 ----d-- 00rr1001  <TD>5+w <TD>I,L <TD> </TR>
<TR><TD></TD><TD>    LD (SP+d),XY  <TD>11y11101 11001011 ----d-- 00101001  <TD>5+w <TD>I,L </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rs: <TD>01 for DE, 10 for BC, 11 for HL</TR>
<TR><TD>rd: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>y: <TD> 0 for IX, 1 for IY</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>ri: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>ra: <TD>00 for BC, 01 for DE, 10 for HL</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p89"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-89:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD STACK POINTER</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,src<TD>dst = SP</TR>
<TR><TD></TD><TD>               src = R, RX, IM, DA</TR>
<TR><TD></TD><TD>          or</TR>
<TR><TD></TD><TD>               dst = DA</TR>
<TR><TD></TD><TD>               src = SP</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := src(31..0)
          end
     else begin
          dst(15..0) := src(15..0)
          end
</PRE>
<BR><P>
The contents of the source are loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load into Stack Pointer
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD SP,HL  <TD>11111001  <TD>2 <TD>L <TD> </TR>
<TR><TD>RX: <TD>LD SP,RX  <TD>11y11101 11111001  <TD>2 <TD>L <TD> </TR>
<TR><TD>IM: <TD>LD SP,nn  <TD>00110001 --n-- --n--  <TD>2 <TD>I,L <TD> </TR>
<TR><TD>DA: <TD>LD SP,(nn)  <TD>11101101 01111011 --n-- --n--  <TD>3+r <TD>I,L <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


Load from Stack Pointer
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>DA: <TD>LD (nn),SP  <TD>11101101 01110011 --n-- --n--  <TD>4+w <TD>I,L <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p90"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-90:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD FROM I OR R REGISTER (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,src<TD>dst = A src = I,R</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := src
</PRE>
<BR><P>
The contents of the source are loaded into the accumulator. The contents of the source are
not affected. The Sign and Zero flags are set according to the value of the data transferred;
the Overflow flag is set according to the state of the interrupt enable. Note that if an interrupt
occurs during execution of either of these instructions the Overflow flag reflects the prior
state of the interrupt enable. Also note that the R register does not contain the refresh
address and is not modified by refresh transactions.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the data loaded into the accumulator is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the data loaded into the accumulator is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Set when loading the accumulator if interrupts are enabled; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>LD <TD>A,I  <TD>11101101 01010111  <TD>2 <TD> </TR>
<TR><TD>LD <TD>A,R  <TD>11101101 01011111  <TD>2 <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p91"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-91:</A></H5>
<BR><P>
<H3>LD<BR>
LOAD INTO I OR R REGISTER (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD dst,src<TD>dst = I, R src = A</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst := src
</PRE>
<BR><P>
The contents of the accumulator are loaded into the destination. Note that the R register does
not contain the refresh address and is not modified by refresh transactions.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD I,A  <TD>11101101 01000111  <TD>2 <TD> </TR>
<TR><TD>LD <TD>R,A  <TD>11101101 01001111  <TD>2 <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p92"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-92:</A></H5>
<BR><P>
<H3>LD[W]<BR>
LOAD I REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LD[W] dst,src<TD>dst = HL</TR>
<TR><TD></TD><TD>               src = I</TR>
<TR><TD></TD><TD>               OR</TR>
<TR><TD></TD><TD>               dst = I</TR>
<TR><TD></TD><TD>               src = HL</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := src(31..0)
          end
     else begin
          dst(15..0) := src(15..0)
          end
</PRE>
<BR><P>
The contents of the source are loaded into the destination
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<P><BR>
Load from I Register
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD[W] HL,I  <TD>11011101 01010111  <TD>2 <TD>L <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
Load into I Register
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LD[W] I,HL  <TD>11011101 01000111  <TD>2 <TD>L <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p93"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-93:</A></H5>
<BR><P>
<H3>LDCTL<BR>
LOAD CONTROL REGISTER (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDCTL dst,<TD>src dst = DSR, XSR, YSR</TR>
<TR><TD></TD><TD>               src = A, IM</TR>
<TR><TD></TD><TD>               or</TR>
<TR><TD></TD><TD>               dst = A</TR>
<TR><TD></TD><TD>               src = DSR, XSR, YSR</TR>
<TR><TD></TD><TD>               or</TR>
<TR><TD></TD><TD>               dst = SR</TR>
<TR><TD></TD><TD>               src = A, IM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (dst = SR) then begin
          SR(31..24) := src
          SR(23..16) := src
          SR(15..8) := src
          end
     else begin
          dst := src
          end
</PRE>
<BR><P>
The contents of the source are loaded into the destination.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load into Control Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LDCTL SR,A  <TD>11011101 11001000  <TD>4 <TD> </TR>
<TR><TD></TD><TD>     LDCTL Rd,A  <TD>11qq1101 11011000  <TD>4 </TR>
<TR><TD>IM: <TD>LDCTL SR,n  <TD>11011101 11001010 ----n--  <TD>4 <TD> </TR>
<TR><TD></TD><TD>     LDCTL Rd,n  <TD>11qq1101 11011010 ----n--  <TD>4 </TR>
</TABLE>
<BR><P>


<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>qq: <TD>01 for XSR, 10 for DSR, 11 for YSR</TR>
</TABLE>
<BR><P>


<P><BR>
Load from Control Register
<P><BR>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LDCTL A,Rs  <TD>11qq1101 11010000  <TD>2 <TD> </TR>
</TABLE>
<BR><P>


<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>qq: <TD>01 for XSR, 10 for DSR, 11 for YSR</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p94"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-94:</A></H5>
<BR><P>
<H3>LDCTL<BR>
LOAD FROM CONTROL REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDCTL dst,src<TD>dst = HL src = SR</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..0) := src(31..0) end
     else begin
          dst(15..0) := src(15..0)
     end
</PRE>
<BR><P>
The contents of the Select Register (SR) are loaded into the HL register.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load from Control Register
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LDCTL HL,SR  <TD>11101101 11000000  <TD>2 <TD>L <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p95"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-95:</A></H5>
<BR><P>
<H3>LDCTL<BR>
LOAD INTO CONTROL REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDCTL dst,src<TD>dst = SR src = HL</TR>
</TABLE>
<P><BR>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(31..16) := HL(31..16)
     end
     else begin
          dst(31..24) := HL(15..8)
          dst(23..16) := HL(15..8)
          end
     dst(15..8) := HL(15..8)
     dst(0) := HL(0)
</PRE>
<BR><P>
The contents of the HL register are loaded into the Select Register (SR). If Long Word mode
is not in effect the upper byte of the HL register is copied into the three most significant bytes
of the select register. This instruction does not modify the mode bits in the SR. There are
dedicated instructions to modify the mode bits.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
Load from Control Register
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>LDCTL SR,HL  <TD>11101101 11001000  <TD>4 <TD>L <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p96"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-96:</A></H5>
<BR><P>
<H3>LDD<BR>
LOAD AND DECREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDD</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (DE) := (HL)
     DE := DE - 1
     HL := HL - 1
     BC(15..0) := BC(15..0) - 1
</PRE>
<BR><P>
This instruction is used for block transfers of strings of data. The byte of data at the location
addressed by the HL register is loaded into the location addressed by the DE register. Both
the DE and HL registers are then decremented by one, thus moving the pointers to the
preceeding elements in the string. The BC register, used as a counter, is then decremented
by one.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Set if the result of decrementing BC is not equal to zero; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDD  <TD>11101101 10101000  <TD>3+r+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p97"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-97:</A></H5>
<BR><P>
<H3>LDDW<BR>
LOAD AND DECREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDDW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          (DE) := (HL)
          (DE+1) := (HL+1)
          (DE+2) := (HL+2)
          (DE+3) := (HL+3)
          DE := DE - 4
          HL := HL - 4
          BC(15..0) := BC(15..0) - 4
          end
     else begin
          (DE) := (HL)
          (DE+1) := (HL+1)
          DE := DE - 2
          HL := HL - 2
          BC(15..0) := BC(15..0) - 2
     end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of words of data. The word of data at the location
addressed by the HL register is loaded into the location addressed by the DE register. Both
the DE and HL registers are then decremented by two or four, thus moving the pointers to
the preceeding words in the array. The BC register, used as a byte counter, is then
decremented by two or four.
<P><BR>
Both DE and HL should be even, to allow word transfers on the bus. BC must be even,
transferring an even number of bytes, or the operation is undefined.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Set if the result of decrementing BC is not equal to zero; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDDW  <TD>11101101 11101000  <TD>3+r+w <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p98"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-98:</A></H5>
<BR><P>
<H3>LDDR<BR>
LOAD, DECREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDDR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC = 0) begin
          (DE) := (HL)
          DE := DE - 1
          HL := HL - 1
          BC(15..0) := BC(15..0) - 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of strings of data. The bytes of data at the location
addressed by the HL register are loaded into memory starting at the location addressed by
the DE register. The number of bytes moved is determined by the contents of the BC register.
If the BC register contains zero when this instruction is executed, 65,536 bytes are
transferred. The effect of decrementing the pointers during the transfer is important if the
source and destination strings overlap with the source string starting at a lower memory
address. Placing the pointers at the highest address of the strings and decrementing the
pointers ensures that the source string is copied without destroying the overlapping area.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value of the start of this instruction is saved before the interrupt request is
accepted, so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDDR  <TD>11101101 10111000  <TD>Nx(3+r+w) </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p99"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-99:</A></H5>
<BR><P>
<H3>LDDRW<BR>
LOAD, DECREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDDRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC = 0) begin
          if (LW) then begin
               (DE) := (HL)
               (DE+1) := (HL+1)
               (DE+2) := (HL+2)
               (DE+3) := (HL+3)
               DE := DE - 4
               HL := HL - 4
               BC(15..0) := BC(15..0) - 4
          end
          else begin
               (DE) := (HL)
               (DE+1) := (HL+1)
               DE := DE - 2
               HL := HL - 2
               BC(15..0) := BC(15..0) - 2
               end
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of strings of data. The words of data at the location
addressed by the HL register are loaded into memory starting at the location addressed by
the DE register. The number of words moved is determined by the contents of the BC
register. If the BC register contains zero when this instruction is executed, 65,536 words are
transferred. The effect of decrementing the pointers during the transfer is important if the
source and destination strings overlap with the source string starting at a lower memory
address. Placing the pointers at the highest address of the strings and decrementing the
pointers ensures that the source string is copied without destroying the overlapping area.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value of the start of this instruction is saved before the interrupt request is
accepted, so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDDRW  <TD>11101101 11111000  <TD>Nx(3+r+w) <TD>L </TR>
</TABLE>
<BR><P>
</BODY></HTML>


<!-- <SERVICE NAME="pop"> -->
<SCRIPT LANGUAGE="javascript">
<!-- 
var cuid= "10197"; var keywords= "none"; 
// -->
</SCRIPT>
<SCRIPT LANGUAGE="javascript" SRC="http://adforce.imgis.com/?addyn|2.0|25|12998|1|16|key=none;misc=516394390;">
<!--
var urlOfNewPop= "http://www.geocities.com/ad_container/pop.html?cuid="+cuid+"&keywords="+keywords; oldPop= window.open(urlOfNewPop, '_popIt', 'width=515,height=125'); if (oldPop.location.href != urlOfNewPop) {  if ((navigator.appName == "Netscape") && (parseInt(navigator.appVersion) == 3)) { setTimeout("oldPop.close()", 750); setTimeout("window.open(urlOfNewPop, '_popIt', 'width=515,height=125')", 1700); } else { oldPop.close(); setTimeout("window.open(urlOfNewPop, '_popIt', 'width=515,height=125')", 1000); } } 
// -->
</SCRIPT>
<!-- </SERVICE> -->

<!-- <SERVICE NAME="watermark"> -->
<DIV CLASS="GeoBrandingV2" ID="GeoBrandingV2" STYLE="position:absolute;top:1;display:none;" ALIGN="right"><A HREF="http://www.geocities.com/?source=watermark&browser=MSIE" TARGET="_top"><IMG SRC="http://pic.geocities.com/images/watermark/v1/geocities.gif" ALT="Click Here!" WIDTH="107" HEIGHT="41" BORDER="0"></A></DIV><DIV CLASS="nh1" ID="nh1" STYLE="position:absolute;display:none;height:105;font-family:arial,helvetica,sans-serif;background-color:cccccc;color:cccccc;text-align:left;border-style:solid;border-color:ffffff;border-width:2;"><STYLE TYPE="text/css"><!--a.menu {color:000000;}a.menu:hover {color:cc0000;}--></STYLE><DIV ID="nada" STYLE="position:absolute;display:none;height:19;top:1;color:ffffff;font-weight:bold;font-family:arial,helvetica,sans-serif;font-size:14px;text-align:center;"><A HREF="http://www.geocities.com/join/?source=watermark&browser=MSIE" style="color:ffffff;" onMouseOver="window.status='';return true;" onMouseOut="window.status='';return true;" target="_top">Build Your Free Home Page</a></DIV><DIV ID="hr" STYLE="position:absolute;display:none;height:19;top:1;color:000000;font-weight:bold;font-size:14px;text-align:center;">Visit&nbsp;other&nbsp;great&nbsp;pages&nbsp;on:</DIV><DIV STYLE="position:absolute;display:none;height:19;top:1;font-family:arial,helvetica,sans-serif;color:000000;font-size:12px;font-weight:normal;font-style:normal;"><A CLASS="menu" HREF="http://www.geocities.com/Avenues/Computers_and_Technology/?source=watermark&browser=MSIE" onMouseOver="window.status='';return true;" onMouseOut="window.status='';return true;" target="_top">Computers & Technology</a></div>Computers & Technology</DIV>
<SCRIPT LANGUAGE="javascript1.2" SRC="http://www.geocities.com/include/watermark/v2/ms.js">
</SCRIPT>
<!-- </SERVICE> -->
