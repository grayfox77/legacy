<HTML>
<BODY>
<BR><P><BR><P>
<H5><A name="p100"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-100:</A></H5>
<BR><P>
<H3>LDI<BR>
LOAD AND INCREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDI</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (DE) := (HL)
     DE := DE + 1
     HL := HL + 1
     BC(15..0) := BC(15..0) - 1
</PRE>
<BR><P>
This instruction is used for block transfers of strings of data. The byte of data at the location
addressed by the HL register is loaded into the location addressed by the DE register. Both
the DE and HL registers are then incremented by one, thus moving the pointers to the next
elements in the string. The BC register, used as a counter, is then decremented by one.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Set if the result of decrementing BC is not equal to zero; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDI  <TD>11101101 10100000  <TD>3+r+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p101"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-101:</A></H5>
<BR><P>
<H3>LDIW<BR>
LOAD AND INCREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDIW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          (DE) := (HL)
          (DE+1) := (HL+1)
          (DE+2) := (HL+2)
          (DE+3) := (HL+3)
          DE := DE + 4
          HL := HL + 4
          BC(15..0) := BC(15..0) - 4
     end
     else begin
          (DE) := (HL)
          (DE+1) := (HL+1)
          DE := DE + 2
          HL := HL + 2
          BC(15..0) := BC(15..0) - 2
     end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of words of data. The word of data at the location
addressed by the HL register is loaded into the location addressed by the DE register. Both
the DE and HL registers are then incremented by two or four, thus moving the pointers to
the succeeding words in the array. The BC register, used as a byte counter, is then
decremented by two or four.
<P><BR>
Both DE and HL should be even, to allow word transfers on the bus. BC must be even,
transferring an even number of bytes, or the operation is undefined.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Set if the result of decrementing BC is not equal to zero; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>LDIW <TD> <TD>11101101 11100000  <TD>3+r+w <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p102"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-102:</A></H5>
<BR><P>
<H3>LDIR<BR>
LOAD, INCREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDIR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC = 0) begin
          (DE) := (HL)
          DE := DE + 1
          HL := HL + 1
          BC(15..0) := BC(15..0) - 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of strings of data. The bytes of data at the location
addressed by the HL register are loaded into memory starting at the location addressed by
the DE register. The number of bytes moved is determined by the contents of the BC register.
If the BC register contains zero when this instruction is executed, 65,536 bytes are
transferred. The effect of incrementing the pointers during the transfer is important if the
source and destination strings overlap with the source string starting at a higher memory
address. Placing the pointers at the lowest address of the strings and incrementing the
pointers ensures that the source string is copied without destroying the overlapping area.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value of the start of this instruction is saved before the interrupt request is
accepted, so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>LDIR <TD> <TD>11101101 10110000  <TD>3+r+w </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p103"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-103:</A></H5>
<BR><P>
<H3>LDIRW<BR>
LOAD, INCREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>LDIRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC= 0) begin
          if (LW) then begin
               (DE) := (HL)
               (DE+1) := (HL+1)
               (DE+2) := (HL+2)
               (DE+3) := (HL+3)
               DE := DE + 4
               HL := HL + 4
               BC(15..0) := BC(15..0) - 4
               end
          else begin
               (DE) := (HL)
               (DE+1) := (HL+1)
               DE := DE + 2
               HL := HL + 2
               BC(15..0) := BC(15..0) - 2
               end
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block transfers of strings of data. The words of data at the location
addressed by the HL register are loaded into memory starting at the location addressed by
the DE register. The number of words moved is determined by the contents of the BC
register. If the BC register contains zero when this instruction is executed, 65,536 words are
transferred. The effect of incrementing the pointers during the transfer is important if the
source and destination strings overlap with the source string starting at a higher memory
address. Placing the pointers at the lowest address of the strings and incrementing the
pointers ensures that the source string is copied without destroying the overlapping area.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value of the start of this instruction is save before the interrupt request is
accepted, so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> LDIRW  <TD>11101101 11110000  <TD>Nx(3+r+w) <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p104"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-104:</A></H5>
<BR><P>
<H3>MLT<BR>
MULTIPLY UNSIGNED (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>MLT R<TD>src = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     R(15..0) := R(7..0) x R(15..8)
</PRE>
<BR><P>
The contents of the upper byte of the source register are multiplied by the contents of the
lower byte of the source register and the product is stored in the source register. Both
operands. Both operands are treated as unsigned, binary integers.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>MLT R  <TD>11101101 01rr1100  <TD>7 <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 10 for HL, 11 for SP</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p105"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-105:</A></H5>
<BR><P>
<H3>MTEST<BR>
MODE TEST</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>MTEST</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     S := SR(7)
     Z := SR(6)
     C := SR(1)
</PRE>
<BR><P>
<P><BR>
The three mode control bits in the Select Register (SR) are transferred to the flags. This
allows the program to determine the state of the machine.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if Extended mode is in effect; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if Long word mode is in effect; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Set if Lock mode is in effect; cleared otherwise</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> MTEST  <TD>11011101 11001111  <TD>2 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p106"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-106:</A></H5>
<BR><P>
<H3>MULTW<BR>
MULTIPLY (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>MULTW [HL,]src<TD>src = R, RX, IM, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     HL(31..0) := HL(15..0) x src(15..0)
</PRE>
<BR><P>
The contents of the HL register are multiplied by the source operand and the product is
stored in the HL register. The contents of the source are unaffected. Both operands are
treated as signed, two's complement integers.
<P><BR>
The initial contents of the HL register are overwritten by the result. The Carry flag is set to
indicate that the upper word of the HL register is required to represent the result; if the Carry
flag is cleared, the product can be correctly represented in 16 bits and the upper word of
the HL register merely holds sign-extension data.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Set if the product is less than -32768 or greater than or equal to 32768; cleared     otherwise
</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>MULTW [HL,]R  <TD>11101101 11001011 100100rr  <TD>10 <TD> </TR>
<TR><TD>RX: <TD>MULTW [HL,]RX  <TD>11101101 11001011 1001010y  <TD>10 <TD> </TR>
<TR><TD>IM: <TD>MULTW [HL,]nn  <TD>11101101 11001011 10010111 --n-- --n--  <TD>10 <TD> </TR>
<TR><TD>X: <TD>MULTW [HL,](XY+d)  <TD>11y11101 11001011 ----d-- 10010010  <TD>12+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p107"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-107:</A></H5>
<BR><P>
<H3>MULTUW<BR>
MULTIPLY UNSIGNED (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>MULTUW [HL,]src<TD>src = R, RX, IM, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     HL(31..0) := HL(15..0) x src(15..0)
</PRE>
<BR><P>
The contents of the HL register are multiplied by the source operand and the product is
stored in the HL register. The contents of the source are unaffected. Both operands are
treated as unsigned, binary integers.
<P><BR>
The initial contents of the HL register are overwritten by the result. The Carry flag is set to
indicate that the upper word of the HL register is required to represent the result; if the Carry
flag is cleared, the product can be correctly represented in 16 bits and the upper word of
the HL register merely holds zero.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Cleared</TR>
<TR><TD>Z: <TD>Set if the result is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Cleared</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Set if the product is greater than or equal to 65536; cleared otherwise</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>MULTUW [HL,]R  <TD>11101101 11001011 100110rr  <TD>11 <TD> </TR>
<TR><TD>RX: <TD>MULTUW [HL,]RX  <TD>11101101 11001011 1001110y  <TD>11 <TD> </TR>
<TR><TD>IM: <TD>MULTUW [HL,]nn  <TD>11101101 11001011 10011111 --n-- --n--  <TD>11 <TD> </TR>
<TR><TD>X: <TD>MULTUW [HL,](XY+d)  <TD>11y11101 11001011 ----d-- 10011010  <TD>13+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p108"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-108:</A></H5>
<BR><P>
<H3>NEG<BR>
NEGATE ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>NEG [A]</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     A := - A
</PRE>
<BR><P>
The contents of the accumulator are negated, that is replaced by its two's complement
value. Note that 80h is replaced by itself, because in two's complement representation the
negative number with the greatest magnitude has no positive counterpart; for this case, the
Overflow flag is set to 1.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Set if there is a borrow from bit 4 of the result; cleared otherwise</TR>
<TR><TD>V: <TD>Set if the content of the accumulator was 80h before the operation; cleared otherwise</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Set if the content of the accumulator was not 00h before the operation; cleared if the     content of the accumulator was 00h
</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> NEG [A]  <TD>11101101 01000100  <TD>2 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p109"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-109:</A></H5>
<BR><P>
<H3>NEGW<BR>
NEGATE HL REGISTER (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>NEGW [HL]</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     HL(15..0) := -HL(15..0)
</PRE>
<BR><P>
The contents of the HL register are negated, that is replaced by its two's complement value.
Note that 8000h is, replaced by itself, because in two's complement representation the
negative number with the greatest magnitude has no positive counterpart; for this case, the
Overflow flag is set to 1.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Set if there is a borrow from bit 4 of the result; cleared otherwise</TR>
<TR><TD>V: <TD>Set if the content of the HL register was 8000h before the operation; cleared otherwise</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Set if the content of the HL register was not 0000h before the operation; cleared if     the content of the HL register was 0000h
</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> NEGW [HL]  <TD>11101101 01010100  <TD>2 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p110"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-110:</A></H5>
<BR><P>
<H3>NOP<BR>
NO OPERATION</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>NOP</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     None
</PRE>
<BR><P>
No operation.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> NOP  <TD>00000000  <TD>2 </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p111"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-111:</A></H5>
<BR><P>
<H3>OR<BR>
OR (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OR [A,]src<TD>src = R, RX, IM, IR, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     A := A OR src
</PRE>
<BR><P>
A logical OR operation is performed between the corresponding bits of the source operand
and the accumulator and the result is stored in the accumulator. A 1 bit is stored wherever
either of the corresponding bits in the two operands is 1; otherwise a 0 bit is stored. The
contents of the source are unaffected.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the most significant bit of the result is set; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if all bits of the result are zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set if the parity is even; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Cleared</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>OR [A,]R  <TD>10110-r-  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>OR [A,]RX  <TD>11y11101 1011010w  <TD>2 <TD> </TR>
<TR><TD>IM: <TD>OR [A,]n  <TD>11110110 ----n--  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>OR [A,](HL)  <TD>10110110  <TD>2+r <TD> </TR>
<TR><TD>X: <TD>OR [A,](XY+d)  <TD>11y11101 10110110 ----d--  <TD>4+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
<TR><TD>w: <TD>0 for high byte, 1 for low byte</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p112"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-112:</A></H5>
<BR><P>
<H3>ORW<BR>
OR (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>ORW [HL,]src<TD>src = R, RX, IM, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     HL(15..0) := HL(15..0) OR src(15..0)
</PRE>
<BR><P>
A logical OR operation is performed between the corresponding bits of the source operand
and the HL register and the result is stored in the HL register. A 1 bit is stored wherever either
of the corresponding bits in the two operands is 1; otherwise a 0 bit is stored. The contents
of the source are unaffected.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the most significant bit of the result is set; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if all bits of the result are zero; cleared otherwise</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set if the parity is even; cleared otherwise</TR>
<TR><TD>N: <TD>Cleared</TR>
<TR><TD>C: <TD>Cleared</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>ORW [HL,]R  <TD>11101101 101101rr  <TD>2 <TD> </TR>
<TR><TD>RX: <TD>ORW [HL,]RX  <TD>11y11101 10110111  <TD>2 <TD> </TR>
<TR><TD>IM: <TD>ORW [HL,]nn  <TD>11101101 10110110 --n-- --n--  <TD>2+r <TD> </TR>
<TR><TD>X: <TD>ORW [HL,](XY+d)  <TD>11y11101 11110110 ----d--  <TD>4+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 11 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p113"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-113:</A></H5>
<BR><P>
<H3>OTDM<BR>
OUTPUT DECREMENT MEMORY</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTDM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (C) := (HL)
     C := C - 1
     B := B - 1
     HL := HL - 1
</PRE>
<BR><P>
This instruction is used for block output of strings of data to on-chip peripherals. No external
I/O transaction will be generated as a result of this instruction, although the I/O address will
appear on the address bus and the write data will appear on the data bus while this internal
write is occurring. The peripheral address is placed on the low byte of the address bus and
zeros are placed on all other address lines. The byte of data from the memory location
addressed by the HL register is loaded to the on-chip I/O port addressed by the C register.
The C register, holding the port address, is decremented by one to select the next output
port. The B register, used as a counter, is then decremented by one. The HL register is then
decremented by one, thus moving the pointer to the next source for the output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result of decrementing B is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Set if there is a borrow from bit 4 during the decrement of the B register; cleared     otherwise
</TR>
<TR><TD>P: <TD>Set if the result of the decrement of the B register is even; cleared otherwise</TR>
<TR><TD>N: <TD>Set if the most significant bit of the byte transferred was a 1; cleared otherwsie</TR>
<TR><TD>C: <TD>Set if there is a borrow from the most significant bit during the decrement of the     B register; cleared otherwise
</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTDM  <TD>11101101 10001011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p114"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-114:</A></H5>
<BR><P>
<H3>OTDMR<BR>
OUTPUT, DECREMENT MEMORY REPEAT</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTDMR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B = 0) begin
          (C) := (HL)
          C := C - 1
          B := B - 1
          HL := HL - 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data to on-chip peripherals. No external
I/O transaction will be generated as a result of this instruction, although the I/O address will
appear on the address bus and the write data will appear on the data bus while this internal
write is occurring. The peripheral address is placed on the low byte of the address bus and
zeros are placed on all other address lines. The byte of data from the memory location
addressed by the HL register is loaded to the on-chip I/O port addressed by the C register.
The C register, holding the port address, is decremented by one to select the next output
port. The B register, used as a counter, is then decremented by one. The HL register is then
decremented by one, thus moving the pointer to the next source for the output. If the result
of decrementing the B register is 0, the instruction is terminated, otherwise the output
sequence is repeated. Note that if the B register contains 0 at the start of the execution of
this instruction, 256 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Cleared</TR>
<TR><TD>Z: <TD>Set</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set</TR>
<TR><TD>N: <TD>Set if the most significant bit of the byte transferred was a 1; cleared otherwise</TR>
<TR><TD>C: <TD>Cleared</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTDMR  <TD>11101101 10011011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p115"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-115:</A></H5>
<BR><P>
<H3>OTDR<BR>
OUTPUT, DECREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTDR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B= 0) begin
          B := B - 1
          (C) := (HL)
          HL := HL - 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. The string of output data is loaded
into the selected peripheral from memory at consecutive addresses, starting with the
location addressed by the HL register and decreasing. During the I/O transaction the 32-
bit BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A(15..8) are not useable as part of a fixed port address. The
decremented B register is used in the address.
<P><BR>
First the B register, used as a counter, is decremented by one. The byte of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then decremented by one, thus moving the pointer to the next source for the
output. If the result of decrementing the B register is 0, the instruction is terminated,
otherwise the sequence is repeated. If the B register contains 0 at the start of the execution
of this instruction, 256 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTDR  <TD>11101101 10111011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p116"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-116:</A></H5>
<BR><P>
<H3>OTDRW<BR>
OUTPUT, DECREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTDRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC= 0) begin
     BC(15..0) := BC(15..0) - 1
     (DE) := (HL)
     HL := HL - 2
     end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. The string of output data is loaded
into the selected peripheral from memory at consecutive addresses, starting with the
location addressed by the HL register and decreasing. During the I/O transaction the 32-
bit DE register is placed on the address bus.
<P><BR>
First the BC register, used as a counter, is decremented by one. The word of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then decremented by two, thus moving the pointer to the next source for the
output. If the result of decrementing the BC register is 0, the instruction is terminated,
otherwise the sequence is repeated. If the BC register contains 0 at the start of the execution
of this instruction, 65536 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTDRW  <TD>11101101 11111011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p117"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-117:</A></H5>
<BR><P>
<H3>OTIM<BR>
OUTPUT INCREMENT MEMORY</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTIM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (C) := (HL)
     C := C + 1
     B := B - 1
     HL := HL + 1
</PRE>
<BR><P>
This instruction is used for block output of strings of data to on-chip peripherals. No external
I/O transaction will be generated as a result of this instruction, although the I/O address will
appear on the address bus and the write data will appear on the data bus while this internal
write is occurring. The peripheral address is placed on the low byte of the address bus and
zeros are placed on all other address lines. The byte of data from the memory location
addressed by the HL register is loaded to the on-chip I/O port addressed by the C register.
The C register, holding the port address, is incremented by one to select the next output port.
The B register, used as a counter, is then decremented by one. The HL register is then
incremented by one, thus moving the pointer to the next source for the output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Set if the result of decrementing B is negative; cleared otherwise</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Set if there is a borrow from bit 4 during the decrement of the B register; cleared     otherwise
</TR>
<TR><TD>P: <TD>Set if the result of the decrement of the B register is even; cleared otherwise</TR>
<TR><TD>N: <TD>Set if the most significant bit of the byte transferred was a 1; cleared otherwise</TR>
<TR><TD>C: <TD>Set if there is a borrow from the most significant bit during the decrement of the     B register; cleared otherwise
</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTIM  <TD>11101101 10000011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p118"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-118:</A></H5>
<BR><P>
<H3>OTIMR<BR>
OUTPUT, INCREMENT MEMORY REPEAT</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTIMR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B= 0) begin
          (C) := (HL)
          C := C + 1
          B := B - 1
          HL := HL + 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data to on-chip peripherals. No external
I/O transaction will be generated as a result of this instruction, although the I/O address will
appear on the address bus and the write data will appear on the data bus while this internal
write is occurring. The peripheral address is placed on the low byte of the address bus and
zeros are placed on all other address lines. The byte of data from the memory location
addressed by the HL register is loaded to the on-chip I/O port addressed by the C register.
The C register, holding the port address, is incremented by one to select the next output port.
The B register, used as a counter, is then decremented by one. The HL register is then
incremented by one, thus moving the pointer to the next source for the output. If the result
of decrementing the B register is 0, the instruction is terminated, otherwise the output
sequence is repeated. Note that if the B register contains 0 at the start of the execution of
this instruction, 256 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Cleared</TR>
<TR><TD>Z: <TD>Set</TR>
<TR><TD>H: <TD>Cleared</TR>
<TR><TD>P: <TD>Set</TR>
<TR><TD>N: <TD>Set if the most significant bit of the byte transferred was a 1; cleared otherwsie</TR>
<TR><TD>C: <TD>Cleared</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTIMR  <TD>11101101 10010011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p119"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-119:</A></H5>
<BR><P>
<H3>OTIR<BR>
OUTPUT, INCREMENT AND REPEAT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTIR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (B = 0) begin
          B := B - 1
          (C) := (HL)
          HL := HL + 1
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. The string of output data is loaded
into the selected peripheral from memory at consecutive addresses, starting with the
location addressed by the HL register and increasing. During the I/O transaction the 32-bit
BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A(15..8) are not useable as part of a fixed port address. The
decremented B register is used in the address.
<P><BR>
First the B register, used as a counter, is decremented by one. The byte of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then incremented by one, thus moving the pointer to the next source for the
output. If the result of decrementing the B register is 0, the instruction is terminated,
otherwise the sequence is repeated. If the B register contains 0 at the start of the execution
of this instruction, 256 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTIR  <TD>11101101 10110011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p120"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-120:</A></H5>
<BR><P>
<H3>OTIRW<BR>
OUTPUT, INCREMENT AND REPEAT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OTIRW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     repeat until (BC= 0) begin
          BC(15..0) := BC(15..0) - 1
          (DE) := (HL)
          HL := HL + 2
          end
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. The string of output data is loaded
into the selected peripheral from memory at consecutive addresses, starting with the
location addressed by the HL register and increasing. During the I/O transaction the 32-bit
DE register is placed on the address bus.
<P><BR>
First the BC register, used as a counter, is decremented by one. The word of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then incremented by two, thus moving the pointer to the next source for the
output. If the result of decrementing the BC register is 0, the instruction is terminated,
otherwise the sequence is repeated. If the BC register contains 0 at the start of the execution
of this instruction, 65536 bytes are output.
<P><BR>
This instruction can be interrupted after each execution of the basic operation. The Program
Counter value at the start of this instruction is saved before the interrupt request is accepted,
so that the instruction can be properly resumed.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OTIRW  <TD>11101101 11110011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p121"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-121:</A></H5>
<BR><P>
<H3>OUT<BR>
OUTPUT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUT (C),src<TD>src = R, IM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (C) := src
</PRE>
<BR><P>
The byte of data from the source is loaded into the selected peripheral. During the I/O
transaction, the contents of the 32-bit BC register are placed on the address bus.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>OUT (C),R  <TD>11101101 01rrr001  <TD>3+o <TD> </TR>
<TR><TD>IM: <TD>OUT (C),n  <TD>11101101 01110001 n  <TD>3+o <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rrr: <TD>per convention</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p122"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-122:</A></H5>
<BR><P>
<H3>OUTW<BR>
OUTPUT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUTW (C),src<TD>src = R, IM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (C) := src(15..0)
</PRE>
<BR><P>
The word of data from the source is loaded into the selected peripheral. During the I/O
transaction, the contents of the 32-bit BC register are placed on the address bus.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>OUTW (C),R  <TD>11011101 01rrr 001  <TD>2+o <TD> </TR>
<TR><TD>IM: <TD>OUTW (C),nn  <TD>11111101 01111001 --n-- --n--  <TD>2+o <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rrr: <TD>000 for BC, 010 for DE, 111 for HL</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p123"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-123:</A></H5>
<BR><P>
<H3>OUT<BR>
OUTPUT ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUT (n),A</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (n) := A
</PRE>
<BR><P>
The byte of data from the accumulator is loaded into the selected peripheral. During the
I/O transaction, the 8-bit peripheral address from the instruction is placed on the low byte
of the address bus, the contents of the accumulator are placed on address lines A(15..8),
and the high-order address lines are all zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUT (n),A  <TD>11010011 ----n--  <TD>3+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p124"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-124:</A></H5>
<BR><P>
<H3>OUT0<BR>
OUTPUT (TO PAGE 0)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUT0 (n),src<TD>src = R</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (n) := src
</PRE>
<BR><P>
The byte of data from the source register is loaded into the selected on-chip peripheral. No
external I/O transaction will be generated as a result of this instruction, although the I/O
address will appear on the address bus and the write data will appear on the data bus while
this internal write is occurring. The peripheral address is placed on the low byte of the
address bus and zeros are placed on all other address lines.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>OUT <TD>0 (n),R 11101101 00-r-001 ----n--  <TD>3+o <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p125"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-125:</A></H5>
<BR><P>
<H3>OUTA<BR>
OUTPUT DIRECT TO PORT ADDRESS (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUT (nn),A</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (nn) := A
</PRE>
<BR><P>
The byte of data from the accumulator is loaded into the selected peripheral. During the
I/O transaction, the peripheral address from the instruction is placed on the address bus.
Any bytes of address not specified in the instruction are driven on the address lines are all
zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTA (nn),A  <TD>11101101 11010011 --n-- --n--  <TD>2+o <TD>I </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p126"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-126:</A></H5>
<BR><P>
<H3>OUTAW<BR>
OUTPUT DIRECT TO PORT ADDRESS (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUT (nn),HL</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     (nn) := HL(15..0)
</PRE>
<BR><P>
The word of data from the HL register is loaded into the selected peripheral. During the
I/O transaction, the peripheral address from the instruction is placed on the address bus.
Any bytes of address not specified in the instruction are driven on the address lines are all
zeros.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTAW (nn), HL  <TD>11111101 11010011 --n-- --n--  <TD>2+o <TD>I </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p127"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-127:</A></H5>
<BR><P>
<H3>OUTD<BR>
OUTPUT AND DECREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUTD</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     B := B - 1
     (C) := (HL)
     HL := HL -1
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. During the I/O transaction the
32-bit BC register is placed on the address bus. Note that the B register contains the loop
count for this instruction so that A15-A8 are not useable as part of a fixed port address. The
decremented B register is used in the address.
<P><BR>
First the B register, used as a counter, is decremented by one. The byte of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then decremented by one, thus moving the pointer to the next source for the
output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTD  <TD>11101101 10101011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p128"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-128:</A></H5>
<BR><P>
<H3>OUTDW<BR>
OUTPUT AND DECREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUTDW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     BC(15..0) := BC(15..0) - 1
     (DE) := (HL)
     HL := HL - 2
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. During the I/O transaction the 32-
bit DE register is placed on the address bus.
<P><BR>
First the BC register, used as a counter, is decremented by one. The word of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then decremented by two, thus moving the pointer to the next source for the
output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTDW  <TD>11101101 11101011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p129"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-129:</A></H5>
<BR><P>
<H3>OUTI<BR>
OUTPUT AND INCREMENT (BYTE)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUTI</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     B := B - 1
     (C) := (HL)
     HL := HL + 1
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. During the I/O transaction the 32-
bit BC register is placed on the address bus. Note that the B register contains the loop count
for this instruction so that A15-A8 are not useable as part of a fixed port address. The
decremented B register is used in the address.
<P><BR>
First the B register, used as a counter, is decremented by one. The byte of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then incremented by one, thus moving the pointer to the next source for the
output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing B is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTI  <TD>11101101 10100011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p130"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-130:</A></H5>
<BR><P>
<H3>OUTIW<BR>
OUTPUT AND INCREMENT (WORD)</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>OUTIW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     BC(15..0) := BC(15..0) - 1
     (DE) := (HL)
     HL := HL + 2
</PRE>
<BR><P>
<P><BR>
This instruction is used for block output of strings of data. During the I/O transaction the 32-
bit DE register is placed on the address bus.
<P><BR>
First the BC register, used as a counter, is decremented by one. The word of data from the
memory location addressed by the HL register is loaded into the selected peripheral. The
HL register is then incremented by two, thus moving the pointer to the next source for the
output.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Set if the result of decrementing BC is zero; cleared otherwise</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Set</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> OUTIW  <TD>11101101 11100011  <TD>2+r+o </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p131"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-131:</A></H5>
<BR><P>
<H3>POP<BR>
POP ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>POP dst<TD>dst = AF</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     F := (SP)
     A := (SP+1)
     SP := SP + 2
     if (LW) then begin
          SP := SP + 2
          end
</PRE>
<BR><P>
<P><BR>
The contents of the memory location addressed by the Stack Pointer (SP) are loaded into
the destination in ascending byte order from ascending address memory locations. For this
instruction, the Flag register is the least significant byte, followed by the Accumulator. The
SP is then incremented by two (by four in the Long Word mode). Note that in the Long Word
mode only one word is read from memory, although the SP is in fact incremented by four.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Loaded from (SP)</TR>
<TR><TD>Z: <TD>Loaded from (SP)</TR>
<TR><TD>H: <TD>Loaded from (SP)</TR>
<TR><TD>V: <TD>Loaded from (SP)</TR>
<TR><TD>N: <TD>Loaded from (SP)</TR>
<TR><TD>C: <TD>Loaded from (SP)</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> POP AF  <TD>11110001  <TD>2+r <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p132"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-132:</A></H5>
<BR><P>
<H3>POP<BR>
POP CONTROL REGISTER</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>POP dst<TD>dst = SR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(6..0) := (SP)
          dst(15..8) := (SP+1)
          dst(23..16) := (SP+2)
          dst(31..24) := (SP+3)
          SP := SP + 4
          end
     else begin
          dst(6..0) := (SP)
          dst(15..8) := (SP+1)
          dst(23..16) := (SP+1)
          dst(31..24) := (SP+1)
          SP := SP + 2
          end
</PRE>
<BR><P>
<P><BR>
The contents of the memory location addressed by the Stack Pointer (SP) are loaded into
the destination in ascending byte order from ascending address memory locations. The SP
is then incremented by two (by four in the Long Word mode). Note that when not in the Long
Word mode the most significant byte read from memory is also written to the two most
significant bytes of the SR. Also note that the XM bit is unaffected by this instruction.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> POP SR  <TD>11101101 11000001  <TD>3+r <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p133"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-133:</A></H5>
<BR><P>
<H3>POP<BR>
POP REGISTER</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>POP dst<TD>dst = R, RX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          dst(7..0) := (SP)
          dst(15..8) := (SP+1)
          dst(23..16) := (SP+2)
          dst(31..24) := (SP+3)
          SP := SP + 4
          end
     else begin
          dst(7..0) := (SP)
          dst(15..8) := (SP+1)
          SP := SP + 2
          end
</PRE>
<BR><P>
The contents of the memory location addressed by the Stack Pointer (SP) are loaded into
the destination in ascending byte order from ascending address memory locations. The SP
is then incremented by two (by four in the Long Word mode).
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>POP R  <TD>11rr 0001 1+r L <TD> </TR>
<TR><TD>RX: <TD>POP RX  <TD>11y11101 11100001 1+r L <TD> </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 10 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p134"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-134:</A></H5>
<BR><P>
<H3>PUSH<BR>
PUSH ACCUMULATOR</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>PUSH src<TD>src = AF</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          SP := SP - 4
          (SP) := F
          (SP+1) := A
          (SP+2) := 00h
          (SP+3) := 00h
          end
     else begin
          SP := SP - 2
          (SP) := F
          (SP+1) := A
          end
</PRE>
<BR><P>
<P><BR>
The Stack Pointer (SP) is decremented by two (by four in Long Word mode) and the source
is loaded into the memory locations addressed by the SP in ascending byte order in
ascending address memory locations. For this instruction, the Flag register is the least
significant byte, followed by the Accumulator. The other two bytes written in the Long Word
mode are all zeros. The Flag register and Accumulator are unaffected.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> PUSH AF  <TD>11110101  <TD>3+w <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p135"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-135:</A></H5>
<BR><P>
<H3>PUSH<BR>
PUSH CONTROL REGISTER</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>PUSH src<TD>src = SR</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          SP := SP - 4
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          (SP+2) := src(23..16)
          (SP+3) := src(31..24)
          end
     else begin
          SP := SP - 2
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          end
</PRE>
<BR><P>
<P><BR>
The Stack Pointer (SP) is decremented by two (by four in Long Word mode) and the source
is loaded into the memory locations addressed by the SP in ascending byte order in
ascending address memory locations. The contents of the source are unaffected.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> PUSH SR  <TD>11101101 11000101  <TD>3+w <TD>L </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p136"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-136:</A></H5>
<BR><P>
<H3>PUSH<BR>
PUSH IMMEDIATE</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>PUSH src<TD>src = IM</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          SP := SP - 4
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          (SP+2) := src(23..16)
          (SP+3) := src(31..24)
          end
     else begin
          SP := SP - 2
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          end
</PRE>
<BR><P>
<P><BR>
The Stack Pointer (SP) is decremented by two (by four in Long Word mode) and the source
is loaded into the memory locations addressed by the SP in ascending byte order in
ascending address memory locations.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>IM: <TD>PUSH nn  <TD>11111101 11110101 --n-- --n--  <TD>3+w <TD>I,L <TD> </TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p137"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-137:</A></H5>
<BR><P>
<H3>PUSH<BR>
PUSH REGISTER</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>PUSH src<TD>src = R, RX</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (LW) then begin
          SP := SP - 4
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          (SP+2) := src(23..16)
          (SP+3) := src(31..24)
          end
     else begin
          SP := SP - 2
          (SP) := src(7..0)
          (SP+1) := src(15..8)
          end
</PRE>
<BR><P>
<P><BR>
The Stack Pointer (SP) is decremented by two (by four in Long Word mode) and the source
is loaded into the memory locations addressed by the SP in ascending byte order in
ascending address memory locations. The contents of the source are unaffected.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>PUSH R  <TD>11rr0101  <TD>3+w <TD>L <TD> </TR>
<TR><TD>RX: <TD>PUSH RX  <TD>11y11101 11100101  <TD>3+w <TD>L <TD> </TR>
</TABLE>
<BR><P>


<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>rr: <TD>00 for BC, 01 for DE, 10 for HL</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p138"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-138:</A></H5>
<BR><P>
<H3>RES<BR>
RESET BIT</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>RES b,dst<TD>dst = R, IR, X</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     dst(b) := 0
</PRE>
<BR><P>
The specified bit b within the destination operand is cleared to 0. The other bits in the
destination are unaffected. The bit to be reset is specified by a 3-bit field in the instruction;
this field contains the binary encoding for the bit number to be cleared. The bit number b
must be between 0 and 7.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD>R: <TD>RES b,R  <TD>11001011 10bbb -r-  <TD>2 <TD> </TR>
<TR><TD>IR: <TD>RES b,(HL)  <TD>11001011 10bbb110  <TD>2+r <TD> </TR>
<TR><TD>X: <TD>RES b,(XY+d)  <TD>11y11101 11001011 ----d-- 10bbb110  <TD>4+r <TD>I <TD> </TR>
</TABLE>
<BR><P>


<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>r: <TD>per convention</TR>
<TR><TD>y: <TD>0 for IX, 1 for IY</TR>
</TABLE>
<BR><P>


<BR><P><BR><P>
<H5><A name="p139"
Z380 tm USER'S MANUAL
DC-8297-03 ZILOG>page 5-139:</A></H5>
<BR><P>
<H3>RESC<BR>
RESET CONTROL BIT</H3>
<P><BR>
<TABLE BORDER>
<TR><TD>RESC mode<TD>mode = LCK, LW</TR>
</TABLE>
<P><BR>
<STRONG>Operation:</STRONG><BR>
<PRE>
     if (mode = LCK) then begin
          SR(1) := 0
          end
     else begin
          SR(6) := 0
          end
</PRE>
<BR><P>
<P><BR>
When reseting Lock mode (LCK), the LCK bit (bit 1) in the Select Register (SR) is set to 0,
enabling external bus requests. Note that these requests cannot be granted until after the
instruction has been executed, and that one or more of the succeeding instructions may also
have been fetched for decoding before this instruction has been executed.
<P><BR>
When reseting Long Word mode (LW), the LW bit (bit 6) in the SR is set to 0, selecting 16-
bit words. When using 16-bit words, all word load operations transfer 16 bits.
<P><BR>
<TABLE BORDER>
<TR><TH>Flags:</TR>
<TR><TD>S: <TD>Unaffected</TR>
<TR><TD>Z: <TD>Unaffected</TR>
<TR><TD>H: <TD>Unaffected</TR>
<TR><TD>V: <TD>Unaffected</TR>
<TR><TD>N: <TD>Unaffected</TR>
<TR><TD>C: <TD>Unaffected</TR>
</TABLE>
<BR><P>
<TABLE BORDER>
<TR><TH>Addressing<BR> Mode <TH>Syntax <TH>Instruction Format
        <TH>Execute Time <TH>Note </TR>
<TR><TD></TD><TD> RESC mode  <TD>11mm1101 11111111  <TD>4 </TR>
</TABLE>
<BR><P>


<P><BR>
<TABLE BORDER>
<TR><TH>Field<BR> Encodings:</TR>
<TR><TD>mm: <TD>01 for LW, 10 for LCK</TR>
</TABLE>
<BR><P>
</BODY></HTML>


<!-- <SERVICE NAME="pop"> -->
<SCRIPT LANGUAGE="javascript">
<!-- 
var cuid= "10197"; var keywords= "none"; 
// -->
</SCRIPT>
<SCRIPT LANGUAGE="javascript" SRC="http://adforce.imgis.com/?addyn|2.0|25|12998|1|16|key=none;misc=225510028;">
<!--
var urlOfNewPop= "http://www.geocities.com/ad_container/pop.html?cuid="+cuid+"&keywords="+keywords; oldPop= window.open(urlOfNewPop, '_popIt', 'width=515,height=125'); if (oldPop.location.href != urlOfNewPop) {  if ((navigator.appName == "Netscape") && (parseInt(navigator.appVersion) == 3)) { setTimeout("oldPop.close()", 750); setTimeout("window.open(urlOfNewPop, '_popIt', 'width=515,height=125')", 1700); } else { oldPop.close(); setTimeout("window.open(urlOfNewPop, '_popIt', 'width=515,height=125')", 1000); } } 
// -->
</SCRIPT>
<!-- </SERVICE> -->

<!-- <SERVICE NAME="watermark"> -->
<DIV CLASS="GeoBrandingV2" ID="GeoBrandingV2" STYLE="position:absolute;top:1;display:none;" ALIGN="right"><A HREF="http://www.geocities.com/?source=watermark&browser=MSIE" TARGET="_top"><IMG SRC="http://pic.geocities.com/images/watermark/v1/geocities.gif" ALT="Click Here!" WIDTH="107" HEIGHT="41" BORDER="0"></A></DIV><DIV CLASS="nh1" ID="nh1" STYLE="position:absolute;display:none;height:105;font-family:arial,helvetica,sans-serif;background-color:cccccc;color:cccccc;text-align:left;border-style:solid;border-color:ffffff;border-width:2;"><STYLE TYPE="text/css"><!--a.menu {color:000000;}a.menu:hover {color:cc0000;}--></STYLE><DIV ID="nada" STYLE="position:absolute;display:none;height:19;top:1;color:ffffff;font-weight:bold;font-family:arial,helvetica,sans-serif;font-size:14px;text-align:center;"><A HREF="http://www.geocities.com/join/?source=watermark&browser=MSIE" style="color:ffffff;" onMouseOver="window.status='';return true;" onMouseOut="window.status='';return true;" target="_top">Build Your Free Home Page</a></DIV><DIV ID="hr" STYLE="position:absolute;display:none;height:19;top:1;color:000000;font-weight:bold;font-size:14px;text-align:center;">Visit&nbsp;other&nbsp;great&nbsp;pages&nbsp;on:</DIV><DIV STYLE="position:absolute;display:none;height:19;top:1;font-family:arial,helvetica,sans-serif;color:000000;font-size:12px;font-weight:normal;font-style:normal;"><A CLASS="menu" HREF="http://www.geocities.com/Avenues/Computers_and_Technology/?source=watermark&browser=MSIE" onMouseOver="window.status='';return true;" onMouseOut="window.status='';return true;" target="_top">Computers & Technology</a></div>Computers & Technology</DIV>
<SCRIPT LANGUAGE="javascript1.2" SRC="http://www.geocities.com/include/watermark/v2/ms.js">
</SCRIPT>
<!-- </SERVICE> -->
