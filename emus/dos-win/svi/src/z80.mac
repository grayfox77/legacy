%macro mRDMEM 2
  movzx edi,%1
  mov   ebp,edi
  shr   edi,14
  mov   edi,[_BankSelect+edi*4]
  and   bp,0x3FFF
  movzx %2,byte [edi+ebp]
%endmacro 

%macro mRDMEMB 2
  movzx edi,%1
  mov   ebp,edi
  shr   edi,14
  mov   edi,[_BankSelect+edi*4]
  and   bp,0x3FFF
	mov		%2,[edi+ebp]
%endmacro

%macro mRDMEM_SIGN 2
  movzx edi,%1
  mov   ebp,edi
  shr   edi,14
  mov   edi,[_BankSelect+edi*4]
  and   bp,0x3FFF
  movsx %2,byte [edi+ebp]
%endmacro 

%macro mRDMEMW 2
	%ifnidn %2,ax
	push	ax
	%endif
	movzx edi,%1
  mov   ebp,edi
  shr   edi,14
  mov   edi,[_BankSelect+edi*4]
  and   bp,0x3FFF
  mov		al,byte [edi+ebp]
  movzx edi,%1
  inc		edi
  mov		ebp,edi
  shr   edi,14
  mov   edi,[_BankSelect+edi*4]  
  and		bp,0x3FFF
  mov		ah,byte [edi+ebp]    
  %ifnidn %2,ax
  mov		%2,ax
	pop		ax
	%endif	
%endmacro

%macro mWRMEM 2
  movzx edi,%1
  mov   ebp,edi
  shr   edi,14
  cmp		byte [_BankROM+edi],0
  jnz		%%ROM
  mov   edi,[_BankSelect+edi*4]
  and   ebp,0x3FFF
  mov		byte [edi+ebp],%2
%%ROM:  
%endmacro 

%macro BackupZ80regs 0-2
	%ifnidn %1,A
	mov	 	[_rA],rA
	%endif
	%ifnidn %1,F
	%ifnidn %2,F
	mov		[_rF],rF
	%endif
	%endif
	mov		[_rBC],rBC
	mov		[_rDE],rDE
	mov		[_rHL],rHL
	mov		[_rPC],rPC
%endmacro

%macro RestoreZ80regs 0-2
	%ifnidn %1,A
	mov		rA,[_rA]
	%endif
	%ifnidn %1,F
	%ifnidn %2,F	
	mov		rF,[_rF]
	%endif
	%endif
	mov		rBC,[_rBC]
	mov		rDE,[_rDE]
	mov		rHL,[_rHL]
	mov		rPC,[_rPC]
%endmacro

%macro mCopyCF 0
	jc		%%cset
	and		ah,0xEC
	mEOI
%%cset:
	and		ah,0xEC
	or		ah,0x01
	mEOI
%endmacro

%macro mCopyZF 0
	jnc		%%zset
	and		ah,0x3F
	mEOI
%%zset:
	and		ah,0x3F
	or		ah,0x40
	mEOI
%endmacro

%macro mATC 1
	mov		bp,ax
	or		%1,%1
	lahf
	and		bp,0x0100
	or		ax,bp
%endmacro

%macro mEOI 0
  jmp   Z80cont
%endmacro

%macro sf_add 0
	lahf
	jo		%%vocc
	and		rF,0xF9
	mEOI
%%vocc:
	or		rF,0x04
	and		rF,0xFD
	mEOI
%endmacro

%macro sf_sub 0
	lahf
	jo		%%vocc
	and		rF,0xF9
	or		rF,0x02
	mEOI
%%vocc:
	or		rF,0x06
	mEOI
%endmacro

%macro sf_and 0
	and		rF,0xED
	or		rF,0x10
	mEOI
%endmacro

%macro sf_or 0
	and		rF,0xED
	mEOI
%endmacro

%macro do 2		
	%1		rA,%2
	lahf
	%ifidn %1,add
	sf_add
	%elifidn %1,sub
	sf_sub
	%elifidn %1,and
	sf_and
	%elifidn %1,or
	sf_or
	%elifidn %1,xor
	sf_or
	%elifidn %1,cmp
	sf_sub
	%endif
%endmacro

%macro doS 2
	sahf
	%1		rA,%2
	%ifidn %1,adc
	sf_add
	%elifidn %1,sbb
	sf_sub
	%endif
%endmacro

%macro mJR_CC 2
  test  rF,fg%1
  j%2   %%nobranch
  inc   word [_cycles]
  mJR      
%%nobranch:
	inc   rPC
  mEOI  	
%endmacro

%macro mJR 0
	mRDMEM_SIGN rPC,edi
	inc		rPC
	add		rPC,di
	mEOI
%endmacro

%macro mJP_CC 2
  test  rF,fg%1
  j%2   %%nobranch  
  mJP      
%%nobranch:
	add  	rPC,2
  mEOI  	
%endmacro

%macro mJP 0
	mRDMEMW rPC,di
	mov		rPC,di
	mEOI
%endmacro

%macro mRET_CC 2
	test	rF,fg%1
	j%2		%%noret
	add		word [_cycles],2
	mRET
%%noret:
	mEOI
%endmacro

%macro mRET 0
	mPOP	rPC
	mEOI
%endmacro

%macro mCALL_CC 2
	test	rF,fg%1
	j%-2	%%docall
	add		rPC,2
	mEOI	
%%docall:
	inc		word [_cycles]
	mCALL
%endmacro

%macro mCALL 0	
	mRDMEMW rPC,di
	push	di
	push	ax	
	mov		ax,rPC
	add		ax,2
	mPUSH ah,al
	pop		ax
	pop		rPC
	mEOI
%endmacro

%macro mPUSH 2
	dec		word [_rSP]
	mWRMEM word [_rSP],%1
	dec		word [_rSP]
	mWRMEM word [_rSP],%2
%endmacro

%macro mIPUSH 2
	mPUSH %1,%2
	mEOI
%endmacro
		
%macro mPOP 1
	mRDMEMW word [_rSP],%1
	add		word [_rSP],2
%endmacro

%macro mIPOP 1
	mPOP %1
	mEOI
%endmacro

%macro mLDWORD 1
	mRDMEMW rPC,%1
	add		rPC,2
	mEOI
%endmacro

%macro mADDW 2
	add		%1,%2
	mCopyCF
%endmacro

%macro mINCW 1
	inc		%1
	mEOI
%endmacro

%macro mDECW 1
	dec		%1
	mEOI
%endmacro

%macro mINC 1
	sahf
	inc		%1
	sf_add
%endmacro

%macro mDEC 1
	sahf
	dec		%1
	sf_sub
%endmacro

%macro mINCO 1
	sahf
	inc		%1
	lahf
	jo		%%vocc
	and		ah,0xF9
	jmp		%%ok
%%vocc:
	or		ah,0x04
	and		ah,0xFD
%%ok:
%endmacro

%macro mDECO 1
	sahf
	dec		%1
	lahf
	jo		%%vocc
	and		ah,0xF9
	or		ah,0x02
	jmp		%%ok
%%vocc:
	or		ah,0x06
%%ok:
%endmacro

%macro mRST 1
	push	ax
	mov		ax,rPC
	mPUSH ah,al
	pop		ax
	mov		rPC,%1
	mEOI
%endmacro

%macro mLD_r_r 2
	mov		%1,%2
	mEOI
%endmacro

%macro mLD_r_mHL 1
	mRDMEMB rHL,%1
	mEOI
%endmacro

%macro mLD_mHL_r 1
	mWRMEM rHL,%1
	mEOI
%endmacro

%macro mLD_r_n 1
	mRDMEMB rPC,%1
	inc		rPC
	mEOI
%endmacro

%macro mDAA 1
	sahf
	da%1
	mov		bp,ax
	lahf
	and		bp,0x0200
	and		ah,0xFD
	or		ax,bp	
	mEOI
%endmacro

%macro mRLC 1-3
	rol		%1,1
	lahf	
	mATC %1
	%ifidn %2,mem
	mWRMEM %3,rB
	pop 	rBC
	%endif
	mEOI
%endmacro

%macro mRRC 1-3
	ror		%1,1
	lahf
	mATC %1
	%ifidn %2,mem
	mWRMEM %3,rB
	pop 	rBC
	%endif
	mEOI
%endmacro

%macro mRLreg 1
	sahf
	rcl		%1,1
	lahf
	mATC	%1
	mEOI
%endmacro

%macro mRLmem 1
	push	rBC
	%ifidn %1,di
	push	di
	%endif
	mRDMEMB %1,rB
	%ifidn %1,di
	pop		di
	%endif	
	sahf
	rcl		rB,1
	lahf
	mATC rB	
	mWRMEM %1,rB
	pop 	rBC
	mEOI
%endmacro

%macro mRRreg 1
	sahf
	rcr		%1,1
	lahf
	mATC	%1
	mEOI
%endmacro

%macro mRRmem 1
	push	rBC
	%ifidn %1,di
	push	di
	%endif
	mRDMEMB %1,rB
	%ifidn %1,di
	pop		di
	%endif	
	sahf
	rcr		rB,1
	lahf
	mATC rB	
	mWRMEM %1,rB
	pop 	rBC
	mEOI
%endmacro

%macro mSLA 1-3
	sal		%1,1
	lahf
	%ifidn %2,mem
	mWRMEM %3,rB
	pop		rBC
	%endif
	mEOI
%endmacro

%macro mSRA 1-3
	sar		%1,1
	lahf
	%ifidn %2,mem
	mWRMEM %3,rB
	pop		rBC
	%endif
	mEOI
%endmacro

%macro mSLL 1-3
	sal		%1,1
	lahf
	or		%1,0x01
	%ifidn %2,mem
	mWRMEM %3,rB
	pop		rBC
	%endif
	mEOI
%endmacro

%macro mSRL 1-3
	shr		%1,1
	lahf
	%ifidn %2,mem
	mWRMEM %3,rB
	pop		rBC
	%endif
	mEOI
%endmacro

%macro mBIT 2
	bt		%2,%1
	mCopyZF
%endmacro

%macro mRES 2-4
	and		%2,0xFF-(1<<%1)
	%ifidn %3,mem
	mWRMEM %4,rB
	pop rBC
	%endif
	mEOI
%endmacro

%macro mSET 2-4
	or		%2,1<<%1
	%ifidn %3,mem
	mWRMEM %4,rB
	pop rBC
	%endif
	mEOI
%endmacro

%macro calcind 1
	mRDMEM_SIGN rPC,di
	inc		rPC
	add		di,[_rI%1]
%endmacro

%macro mLD_r_mI 2
	calcind %1	
	mRDMEMB di,%2
	mEOI
%endmacro

%macro mLD_mI_r 2
	calcind %1
	mWRMEM di,%2
	mEOI
%endmacro

%macro mOUT_mC_r 1
	movzx edi,rC
	BackupZ80regs	
	%ifidn %1,0
	xor		eax,eax
	%else
	movzx eax,%1
	%endif
	push	eax	
	push	edi
	call	_doOut		; doOut(port,value);
	add		esp,8
	RestoreZ80regs
	mEOI
%endmacro

%macro mIN_r_mC 1
	movzx edi,rC
	BackupZ80regs	
	push	edi
	call	_doIn			; r = doIn(port);
	add		esp,4
	%ifnidn %1,0
	mov		[%1],al
	%endif
	movzx	di,al
	RestoreZ80regs
	or		di,di
	mov		di,ax
	lahf
	and		ah,0xFE
	and		di,0x0100
	or		ax,di
	mEOI
%endmacro

%macro mADCW 2
	sahf
	adc		%1,%2
	sf_add
%endmacro
	
%macro mSBCW 2
	sahf
	sbb		%1,%2
	sf_sub
%endmacro

%macro mIM 1
	mov		dword [_imode],%1
	mEOI
%endmacro

%macro mLD 1
	and			rF,0xE9
	push		ax
	mRDMEMB rHL,al
	mWRMEM rDE,al
	%1			rHL
	%1			rDE
	dec			rBC
	pop			ax
	jz %%done
	or			rF,0x04
%%done:
%endmacro

;%macro mLDR 1
;	push		ax
;%%docopy:
;	mRDMEMB rHL,al
;	mWRMEM rDE,al
;	add			word [_cycles],5
;	%1			rHL
;	%1			rDE
;	dec			rBC
;	jnz			%%docopy
;	pop			ax
;	and			rF,0xE9
;	mEOI
;%endmacro

%macro mREP 0
	jz 			%%done
	inc			word [_cycles]
	sub			rPC,2
%%done:
	mEOI
%endmacro

%macro mCP 1
	mov			di,ax
	and			di,0x0100
	push		di
	push		rBC
	mRDMEMB rHL,rB
	cmp			rA,rB
	lahf
	pop			rBC
	and			rF,0xF8
	pop			di
	or			ax,di
	%1			rHL
	dec			rBC
	jz			%%done
	or			rF,6
	mEOI
%%done:
	or			rF,2
	mEOI
%endmacro

%macro mCPR 1
	mov			di,ax
	and			di,0x0100
	push		di
%%docp:	
	add			word [_cycles],5
	push		rBC
	mRDMEMB rHL,rB
	cmp			rA,rB
	lahf
	pop			rBC
	and			rF,0xF8	
	%1			rHL
	dec			rBC
	jz			%%done
	test		rF,0x40
	jz			%%docp
	pop			di
	or			ax,di
	or			rF,0x06
	mEOI
%%done:
	pop			di
	or			ax,di
	or			rF,0x02
	mEOI
%endmacro

%macro mIN 1
	and		rF,0x01
	push	ax	
	BackupZ80regs A,F
	movzx edi,rC
	push	edi
	call	_doIn			; value = doIn(port);
	add		esp,4
	RestoreZ80regs A,F
	mWRMEM rHL,al		
	pop		ax
	%1		rHL
	dec		rB
	jnz		%%done
	or		rF,0x40
%%done:
	mEOI
%endmacro

%macro mINR 1
	and		rF,0x01
	push	ax
	BackupZ80regs A,F
	movzx edi,rC
	push	edi
%%loop:
	add		word [_cycles],5
	call	_doIn			; value = doIn(port);
	mov		rHL,[_rHL]
	mWRMEM rHL,al		
	%1		word [_rHL]
	dec		byte [_rBC+1]	
	jnz		%%loop	
	add		esp,4
	RestoreZ80regs A,F
	pop		ax	
	or		rF,0x40
	mEOI
%endmacro

%macro mOUT 1
	and		rF,0x01
	push	ax
	BackupZ80regs A,F
	mRDMEM rHL,eax	
	movzx edi,rC
	push	eax
	push	edi
	call	_doOut			; doOut(port,value);
	add		esp,8
	RestoreZ80regs A,F	
	pop		ax
	%1		rHL
	dec		rB
	jnz		%%done
	or		rF,0x40
%%done:
	mEOI
%endmacro

%macro mOTR 1
	and		rF,0x01
	push	ax
	BackupZ80regs A,F
	movzx edi,rC
	push	eax
	push	edi
%%loop:
	add		word [_cycles],5	
	mRDMEM rHL,eax
	mov		[esp+4],eax	
	call	_doOut			; doOut(port,value);	
	%1		word [_rHL]	
	mov		rHL,[_rHL]		
	dec		byte [_rBC+1]	
	jnz		%%loop	
	add		esp,8
	RestoreZ80regs A,F
	pop		ax	
	or		rF,0x40
	mEOI
%endmacro
