Dial-up Connection Using UZIX
=============================
Written by Adriano C. R. da Cunha
Last update: 25/06/2001


Introduction
------------

	In this text is described, for those who aren't familiar with
UNIX, how you can connect your MSX to the Internet using a dial-up
connection and an account in any ISP.


What is needed
--------------

	So, that's what you need:
	. a MSX2 or better (to run UZIX);
	. an UZIX bootable disk (UZIX version 0.1.7 or above, with support
to network and dial-up) with applications ('telnet', 'ping', etc);
	. a standard MSX RS232 interface with ROMBIOS;
	. a RS232 non-reverse serial cable;
	. an external modem;
	. a telephone line;
	. an account in an ISP;

	Optional:
	. your MSX being a Turbo-R;
	. your MSX having harddisk with UZIX installed;


System configuration
--------------------

	0. Setting up the hardware
	--------------------------

	That's simple. Just connect the RS232 interface on your MSX, put
the RS232 cable linking your MSX and your modem.

	1. Configuring your MSX
	-----------------------

	Boot UZIX on your MSX, logon as root and go to the shell prompt.
	First you must create a '/etc/hosts' file. In this file, besides
defining the loopback IP, you also define names, alias and IPs of other
hosts.
	The format of each line in '/etc/hosts' file is:

	x.y.z.w      alias      name

	It should have at least one line: with IP 127.0.0.1 and alias
'localhost' (no host name). More lines can be added with other
IPs/hostnames. These entries will be checked when you specify a hostname
(or alias) in a network application. If the hostname or alias exists in
'/etc/hosts', MSX will not need to contact a DNS server to get the host
IP. The advantage is that checking this file is faster than querying a DNS
server.
	For example, here is my '/etc/hosts' file:

        127.0.0.1       localhost
        194.134.73.94   msxnet           www.msxnet.org
        143.106.23.193  pinheiros        pinheiros.dcc.unicamp.br
        10.0.0.1        linux            linux.alsoft.com

	Do a 'cat /etc/hosts' to check the hosts that are configured.
	To create a new '/etc/hosts' file, just do a 'rm /etc/hosts' and a
'tee /etc/hosts'. Type the lines (they will be repeated after you press
RETURN, don't mind) and hit CONTROL+D to save the file. 
	It's interesting to create a '/etc/resolv.conf' file. This file
must contain one or more valid DNS servers, so your MSX will be capable of
looking up hostnames even if your ISP doesn't provide any DNS server
address. For example, my '/etc/resolv.conf' (fully valid) file is:

        nameserver      143.106.16.133
        nameserver      143.106.7.8

	Create the '/etc/resolv.conf' file in the same way you created the
'/etc/hosts' file.
        Now you should create a secrets file. This file stores the
passwords used to authenticate the user when connecting to the ISP. Some
ISPs requires this authentication, some others not, doing it by the
dial-up script (see below).
        There are two files were the secrets are stored:
'/etc/ppp/pap-secrets' and '/etc/ppp/chap-secrets'. By now, UZIX does not
recognize the difference between them. So, create one file and make the
other just a link to the first.
        The format of each line in the secrets file is:

        user    server  secret  IP

        The fields 'server' and 'IP' are ignored by UZIX, so you just need
to fill the 'user' and 'secret' fields, leaving the others as '*'.
        For example, here is my '/etc/ppp/pap-secrets' file:

        # Secrets for authentication using PAP/CHAP
        # client        server  secret                  IP addresses
        adrcunha        *       msxrulez                *

        To create a new '/etc/ppp/pap-secrets' file, just do 'mkdir
/etc/ppp' and 'tee /etc/ppp/pap-secrets'. Type the lines (they will
be repeated after you press RETURN, don't mind) and hit CONTROL+D to save
the file. Finally, do a 'ln -s /etc/ppp/pap-secrets
/etc/ppp/chap-secrets'.
        For security reasons, also do a 'chmod 0700 /etc/ppp/pap-secrets'
and a 'chmod 0700 /etc/ppp' to prevent that other user than root have
access to the secrets files.
	Finally, you must create the script file for dial-up. This script
is equal the one from 'chat', a common dial-up program in any Linux
distibutions. In this file you define the modem and ISP error messages and
dial-up and login negotiation.
	The 'chat' script has lines in the form 'expect-send', i.e., if
the program receives a message 'expect' from modem, it will send the
message 'send'. For example, if 'chat' receives the login message, it will
send the username. The reserved words are only 'ABORT', to define an error
message, and 'TIMEOUT', to define the timeout for connection.

	1.1 A commented example of 'chat' script

	Here is an example of a 'chat' script:

        ABORT NO CARRIER
        ABORT NO DIALTONE
        ABORT BUSY
        ABORT ERROR
        ABORT NO ANSWER
        ABORT Username/Password Incorrect
        ABORT Authentication Failure
        ABORT Bad password
        TIMEOUT 120
        "" AT
        OK AT&E1
        OK ATZ
        OK ATDP 0111406
        CONNECT "" 
        ogin: adrcunha 
	words: msxrulez

	The first five defined error messages are default for modems, so
it's interesting that you use them in your script. The following three
messages are sent by the ISP in case of authentication error and they vary
from ISP to ISP. In case of doubt with your ISP, use them or don't use
anyone.
	The 'TIMEOUT' command defines the timeout for a connection as 2
minutes. That's the default time used on most systems.
	The following lines are 'expect-send' strings. A double quote
("") means that, in the field 'expect', nothing must be expected and the
field 'send' can be sent; in the field 'send' it means that nothing must
be sent and the program can continue with the next string.
	So, the above script means that the first thing to do is sending
to the modem the 'AT' command (that initializes the modem). After that the
modem will reply with the 'OK' string, and 'chat' will send the 'ATZ'
command (to reset the modem). Again, the modem will reply with the 'OK'
string and 'chat' will dial to the ISP using the number 0111406 in pulse
mode (the 'P' in the command 'ATDP' - for tone mode it's used 'ATDT'). If
the connection is successful the modem will reply with the 'CONNECT'
string.
	At this point the login procedure starts. The program 'chat' will
wait for the string 'ogin:'. The reason to use 'ogin:' instead of 'login:'
is that 'login:' or 'Login:' or 'Enter your login:' are recognized (but,
for example, 'User:' isn't). Received this string, the program sends the
username and waits for the password prompt (waiting for the string
'word:', from 'Password:', 'password:' or 'keyword:', in the same way of
'ogin:'), sending it when requested.
	Some ISPs may require this login procedure, some others not. If
you are unsure if your ISP requires or not this procedure, use the '-e'
option with 'chat' (see below) to investigate the logon procedure of your
ISP. If it doesn't ask on screen for username/password you must not add
these lines in the dial-up script.

	1.2 Creating your 'chat' script

	To create the script, type, at shell prompt, 'tee filename'
(tip: use the format 'chat.isp-name' as the filename; it makes easy to
identify the file).  Type the lines (they will be repeated after you press
RETURN, don't mind) and hit CONTROL+D to save the file. 
	Each script file is targeted to a specific ISP (telephone number,
logon messages, username and password, etc). So, you can create a script
file for each account in an ISP you have.
	As a starting point, if you aren't sure about how to write your
'chat' script, use the example from section 1.1, substituting only the
phone number, the username and the password. When connecting, set the
modem echo (see below) to check if the connection goes fine.

	2. Connecting to the Internet by an ISP
	   ------------------------------------

	Since your system is configured, just type, at the shell prompt:

	pppd <speed> connect chat <script>

	'<speed>' is the speed (in bits per second - bps) of the RS232 to
communicate with the modem (attention: it's not the modem speed!). Valid
values for most interfaces are 2400, 4800, 9600 and 19200. High speeds
aren't good, because they cause a high reception error rate on MSX,
specially with Z80 3.5MHz. 9600 is a reasonable value.
	'<script>' is the name of the script file (complete, including
path) you created (see section 1).
	If your ISP doesn't use the text mode authentication (defined in
the dial-up script, as seen previously) and your username in the ISP is
not the same on UZIX, use the option 'user <username>' in the 'pppd'
command line, after the '<speed>' parameter, changing '<username>' by your
username.
        If you wanna see the negotiation between the modem and the ISP,
add the option '-e' between '/bin/chat' and the script name, turning on
the modem echo.

	3. Finishing the connection with the ISP
	   -------------------------------------

	To finish the connection with the ISP, send a SIGHUP signal to the
'pppd' process. Check the process number with the command 'ps'.
	For example:

	kill -SIGHUP 5

	This will cause the TCP/IP module to deregister itself, close
the connection and hand down the phone.
	Don't send a KILL signal, or the connection will remain open, the
module will not be deregistered, the telephone line will remain in use and
you will cannot start another connection unless you reboot your MSX and
the modem.

	4. Configuring other programs
	   --------------------------

	4.1 mailf

	'mailf' is an e-mail POP client. But it needs that the user be
connected to access the mailbox, not allowing the user to send or check
e-mails offline.
	The configuration is made by a '.mailfrc' file in the user
homedir. This file has four lines, each one with a field name followed by
a '=' and the field value:

	popserver		defines the name of the e-mail POP server
				(message receiving server);
	smtpserver		defines the name of the e-mail SMTP server
				(message sengind server);
	user			defines the name of mailbox user in the
				defined POP server;
	pass			defines the password of the mailbox in the
				defined POP server;
	email			defines the user e-mail address;
	name			defines the user's full name;

	An example of the 'mailf' configuration file is:

        popserver=pop.linux.alsoft.org
        smtpserver=smtp.linux.alsoft.org
        user=adrcunha
        pass=alsoft
        email=adrcunha@alsoft.org
	name=Adriano Camargo Rodrigues da Cunha

	To create the '.mailfrc' file, in your homedir, just do a
'tee .mailfrc'. Type the lines (they will be repeated after you press
RETURN, don't mind) and hit CONTROL+D to save the file. 


Troubleshooting
---------------

	- The 'pppd' fails during initialization.
	Be sure your MSX RS232 is standard and that it has a ROMBIOS. 
Standard interfaces with ROMBIOS add many new calls in BASIC: CALL COMINI,
CALL COMSTAT, CALL COMTERM, etc. 

	- Can't stablish connection with the ISP.
	Try using the modem echo option in 'chat' to check if the
communication between the modem and the ISP goes fine.
	Be sure your modem is working correctly, that it dials to the
ISP. Be sure that your ISP isn't disconnecting from you because your modem
is too slow (some ISP don't accept modems with speed below 14400bps).
	Be sure the authentication procedure is correct (text mode or
PAP/CHAP, that needs the secrets files in '/etc/ppp').

	- UZIX can't lookup domain or host names.
	Use the 'netstat -s' command and check if any DNS server was
provided by your ISP. If not, you must configure the '/etc/resolv.conf'
file (check section 1). Otherwise, probably your DNS server is down at the
moment.


Critics, bugs, doubts, comments, corrections, questions
-------------------------------------------------------

	Any comments, help or bug reports will be welcome. Also, if I
wrote something wrong, corrections are also welcome. Please, write to
adrcunha@dcc.unicamp.br.

	Official UZIX Home Page:
	http://uzix.msx.org
