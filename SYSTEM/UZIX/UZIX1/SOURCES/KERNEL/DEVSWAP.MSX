/*
 * UZIX - UNIX Implementation for MSX
 * (c) 1997-2001 Arcady Schekochikhin
 *		 Adriano C. R. da Cunha
 *
 * UZIX is based on UZI (UNIX Zilog Implementation)
 * UZI is a UNIX kernel clone written for Z-80 systems.
 * All code is public domain, not being based on any AT&T code.
 *
 * The author, Douglas Braun, can be reached at:
 *	7696 West Zayante Rd.
 *	Felton, CA 95018
 *	oliveb!intelca!mipos3!cadev4!dbraun
 *
 * This program is under GNU GPL, read COPYING for details
 *
 */

/**********************************************************
 MSX memory swapper
**********************************************************/

/* allocate memory in pages (2 pages per swap context) */
static page_t mmlist[MAXSWAP/16]; /* # of page is this page available */
static uint _ssp;		/* saved sp for swap_dup/swap_mmread */

#ifdef MEGARAM_DDX
#define MEGARAM
#endif

#ifdef MEGARAM_ACVS
#define MEGARAM
#endif

#ifndef MEGARAM
static uchar port mapper0 @ 0xFC;
static uchar port mapper1 @ 0xFD;
#define selectpages(p1, p2)	(void)(mapper0 = (p1), mapper1 = (p2))
#endif

#ifdef MEGARAM_DDX

/* DDX MegaRAMs don't have mirror effect */

#define megaraminrommode()	asm("out (8eh),a")
#define megaraminrammode()	asm("in a,(8eh)")

static uchar np;

LCL void selectpage1() {
	/* pages vary from 2 to n
	   for MegaRAM, the real pages are given by (p1-2)*2, (p1-2)*2+1
	   and (p2-2)*2, (p2-2)*2+1, because MegaRAM has 8k pages.
	   RAM pages 0 and 1 are occupied by kernel, but MegaRAM pages
	   are all free */
	megaraminrommode();
#asm
	ld	a,(_np)
	dec	a
	dec	a
	add	a,a
	ld	l,a
	inc	a
	ld	h,a
	ld	(05FFFh),hl
#endasm
	megaraminrammode();
}

LCL void selectpages(page_t p1, page_t p2) {
	_di();
	np = p1;
	selectpage1();
#asm
	push	de		; DE = page numbers
	ld	hl,4000h
	ld	de,0
	ld	bc,4000h
	ldir
	pop	de
#endasm
	np = p2;
	selectpage1();
}

LCL void savepages() {
	_di();
	np = UDATA(u_ptab)->p_swap[0]; /* actual page in page 0 */
	selectpage1();
#asm
	ld hl,0
	ld de,4000h
	ld bc,4000h
	ldir
#endasm
	np = UDATA(u_ptab)->p_swap[1]; /* actual page in page 1 */
	selectpage1();
}

#endif	/* MEGARAM_DDX */

#ifdef MEGARAM_ACVS

/* DDX MegaRAMs have mirror effect */

#define megaraminrommode()	asm("out (8eh),a")
#define megaraminrammode()	asm("in a,(8eh)")

LCL void selectpage(page_t p, uint offs) {
	uint d_page;
	page_t realpage;
	
	/* pages vary from 2 to n
	   for MegaRAM, the real pages are given by (p1-2)*2, (p1-2)*2+1
	   and (p2-2)*2, (p2-2)*2+1, because MegaRAM has 8k pages.
	   RAM pages 0 and 1 are occupied by kernel, but MegaRAM pages
	   are all free */
	megaraminrommode();
	realpage = (p-2)*2;
	d_page = realpage + 256*(realpage+1);
	*(uint *)offs = d_page;
	megaraminrammode();
}

LCL void selectpages(page_t p1, page_t p2) {
	_di();
	selectpage(p1, 0x1FFF);
	selectpage(p2, 0x5FFF);
}

#endif	/* MEGARAM_ACVS */

LCL char checkpages __P((page_t p1, page_t p2, char gopanic));

LCL char checkpages(p1, p2, gopanic)
	page_t p1, p2;
	char gopanic;
{
	/* total=number of pages; total+2=last page number */
	if ((p1 | p2) == 0 || p1 > (total+1) || p2 > (total+1)) {
		if (gopanic) panic("swap pages");
		return 0;
	}
	return 1;
}

/* open swapper
 * 1. Get free pages from bootstrap and fill in array 'mmlist[]'
 *    with page numbers.
 *    All non used entryes in mmlist must be zeroed (mapper pages
 *    number 0 and 1 statically used by UZIX).
 *    Bootstrap define the range of free pages in mapper and
 *    MegaRAM.
 * 2. Set the last allocatable page to 'total'. The total number of
 *    allocatable pages must be not more than 1024/16=64 (limited
 *    by size of 'mmlist[]' array).
 *
 * WARNING: by order, the first two pages allocated for swapping the first
 *	    process are pages 2/3. SWAP_ALLOC DOESN'T select mapper pages.
 *	    So, secondary bootstrap must already select mapper pages 2/3
 *	    to RAM pages 0/1.
 */
GBL int swap_open(void) {
	page_t i;

	/* -1 because pages goes from 0 to X-1, where X is the number of pages */
	if ((total = (*(uchar *)RAMADDR)-(uchar)1) > (uchar)(MAXSWAP/16))
		total = MAXSWAP/16;
#ifdef MEGARAM
	if ((*(uchar *)CNFGBYTE & 2) == 0) panic("needs MegaRAM");
#else
	if ((*(uchar *)CNFGBYTE & 2) != 0) panic("needs Mapper");
#endif
#if DEBUG > 9
	kprintf("total swap RAM: %dkb (%d processes)\n",total*16,total/2);
#endif
	i = 0;
	while (i < total) {
		mmlist[i] = i+2;	/* first free page is 2 */
		++i;
	}
	return 0;
}

/* close swapper */
GBL int swap_close(void) {
	return 0;
}

/* swapper read
 * map memory to page 0/1
 *  a. Pages for mapping passed throught page_t *mm.
 */
GBL int swap_read(mm)
	page_t *mm;
{
	page_t p1 = mm[0];
	page_t p2 = mm[1];
#if DEBUG > 9
	kprintf("read pages %d,%d\n",p1,p2);
#endif
	checkpages(p1, p2, 1);
#ifdef MEGARAM_DDX
	savepages();
#endif
	selectpages(p1,p2);
	/*don't do EI here.
	  the EI must be controlled by the routine who calls swap_read,
	  not by swap_read itself. swap_read doesn't knows what is happening
	  to enable or not interrupts*/
	return 0;
}

/* swapper dup context
 * we taken two page context: mm and mmnew and must to
 * copy old pages to new pages and then remap to new pages:
 *  1. Page 0 = old[0], page 1 = new[0], copy page 0 to 1
 *  2. Page 0 = old[1], page 1 = new[1], copy page 0 to 1
 *  3. Page 0 = new[0]
 *  a. Pages for dup passed throught (struct swap_mmdup *)ptr.
 */
GBL int swap_dup(mm, mmnew)
	page_t *mm;
	page_t *mmnew;
{
	static page_t p1, p2, n1, n2;

	p1 = mm[0];	/* can't initialize static page_t vars in declaration */
	p2 = mm[1];
	n1 = mmnew[0];
	n2 = mmnew[1];

#if DEBUG > 9
	kprintf("dup pages %d,%d to %d,%d\n",p1,p2,n1,n2);
#endif
	checkpages(p1, p2, 1);
	checkpages(n1, n2, 1);
	_di();
	asm("	ld (__ssp),sp");
	if (_ssp < UZIXBASE)
		tempstack();
#ifdef MEGARAM_DDX
	savepages();
#endif
	selectpages(p1,n1);
	bcopy((uchar *)0, (uchar *)0x4000, 0x4000);
	selectpages(p2,n2);
	bcopy((uchar *)0, (uchar *)0x4000, 0x4000);
	selectpages(n1,n2);
	asm("	ld sp,(__ssp)");
	_ei();
	return 0;
}

/* allocate swapper pages
 * locate two nonzeroed entryes in mmlist[] and take the page numbers
 * from them.
 *  a. Both pages must be of the same kind
 *  b. Allocated entryes in mmlist[] must be zeroed.
 *  c. Allocated numbers returned throught page_t *mm.
 */
GBL int swap_alloc(mm)
	page_t *mm;
{
	page_t *mmbkp=mm;	/* HTC crazyness... */
	/* if this mmbkp is not created, HTC uses DE for i and p1, but DE is
	   the *mm parameter, passed to this function. creating mmbkp it
	   is saved in IY and function doesn't crash */
	page_t *p = mmlist;
	page_t p1 = 0;
	page_t i = 1;

	while (i <= total) {
		if (*p != 0) {			/* free page */
			if (p1 == 0)
				p1 =i;		/* first page found */
			else {			/* two pages found */
				/* store allocated pages */
				mmbkp[0] = mmlist[p1-1];
				mmbkp[1] = *p;
				*p = 0;
				mmlist[p1-1] = 0;
#if DEBUG > 9
				kprintf("alloc pages %d,%d\n",mm[0],mm[1]);
#endif
				return 0;
			}
		}
		++i;
		++p;
	}
	return -1;	/* no room */
}

/* deallocate swapper pages
 * locate two zeroed entryes in mmlist[] and fill in this ones with
 * numbers of freed pages.
 *  a. Finds free entry from mmlist[0],
 *  b. Freed numbers at page_t *mm must be zeroed.
 *  c. If both page numbers is 0 - then do nothing
 */
GBL int swap_dealloc(mm)
	page_t *mm;
{
	page_t i, *p = mmlist;
	page_t p1 = mm[0];
	page_t p2 = mm[1];

#if DEBUG > 9
	kprintf("dealloc pages %d,%d\n",p1,p2);
#endif
	checkpages(p1, p2, 1);
	*(int *)mm = 0; 	/* zeroing context */
	i = 1;
	while (i <= total) {
		if (*p == 0) {			/* free slot */
			if (p1) {
				*p = p1;	/* free first page */
				p1 = 0;
			}
			else {
				*p = p2;	/* free second page */
				return 0;
			}
		}
		++p;
		++i;
	}
	return -1;
}

/*
 * we taken the pointer to struct swap_mmread
 * containing the page context mm[], offset and size in this context
 * and addres of user buffer and must copy data from page context to
 * buffer.
 *  a. Pages for read passed throught (struct swap_mmread *)ptr.
 */
GBL int swap_mmread(rp)
	struct swap_mmread *rp;
{
	static page_t p1, p2, m1, m2;
	static uint bsize, l;
	static uchar *addrd, *addrs;

	p1 = rp->mm[0];
	p2 = rp->mm[1];
	m1 = UDATA(u_ptab)->p_swap[0]; /* actual mapper page in page 0 */
	m2 = UDATA(u_ptab)->p_swap[1]; /* actual mapper page in page 1 */
	checkpages(p1, p2, 0);
	if (!checkpages(m1, m2, 0)) goto Err;
	addrd = rp->buf; /* data destination address */
	addrs = (uchar *)rp->offset;	/* data source address */
	bsize = rp->size;	/* data size to copy */
	if ((uint)addrs > UZIXBASE ||
	    bsize > UZIXBASE ||
	    (uint)(addrs + bsize) > UZIXBASE)
Err:		return -1;
	_di();
#if DEBUG > 9
	kprintf("mmread pages %d,%d <=> %d,%d\n",p1,p2,m1,m2);
#endif
	/* now we swap actual mapped mapper pages m1/m2 at ram pages
	   0/1 with mapper pages p1/p2 and, using disk buffer, copy
	   the desired data from p1/p2 to m1/m2 at right position in
	   BUFSIZE bytes steps
	 */
	asm("	ld (__ssp),sp");
	if (_ssp < UZIXBASE)
		tempstack();
#ifdef MEGARAM_DDX
	savepages();
#endif
	do {
		selectpages(p1,p2);
		l = bsize & (BUFSIZE - 1);
		bcopy(addrs, (uchar *)TEMPDBUF, l);
		selectpages(m1,m2);
		bcopy((uchar *)TEMPDBUF, addrd, l);
#ifdef MEGARAM_DDX
		savepages();
#endif
		addrs += l;
		addrd += l;
		bsize -= l;
	} while (bsize != 0);
	asm("	ld sp,(__ssp)");
	_ei();
	return 0;
}

