base (4)
int (2,0)
char (2,1)

endf 0          { }

comment 1      {; %s}

defs 1         {db %s} 

extern 1       {; external function: %s}

enter   0      {push bp
                mov bp,sp}

exit    0      {pop bp
                ret}

label   1      {
%s:}

pushpi  0      {push ax}
popsi  0       {pop bx}
savepi  0      {push ax}

pushpc  0      {push ax}
popsc  0       {pop bx}
savepc  0      {push ax}

pushpp  0      {push ax}
popsp  0       {pop bx}
savepp  0      {push ax}

call    1      {call %s}

callpp  0      {mov si,ax
                call si} 

restore    1     {add sp,%s}

ldsipp 0       {mov dx,bx 
                mov bx,ax
                mov [bx],dx}

ldsppp 0       {mov dx,bx 
                mov bx,ax
                mov [bx],dx}

ldscpp 0       {mov dx,bx 
                mov bx,ax
                mov [bx],dl}

ldipi    1     {mov ax,%s} 

ldipc    1     {mov al,%s} 

ldnipp   1     {mov si,ax
                mov word ptr [si],%s} 

leaipp    1      {mov ax,offset %s}

ldpisp   0      {mov [bx],ax} 

ldpcsp   0      {mov [bx],al} 

ldppsp  0      {mov [bx],ax} 

ldsppi   0      {mov ax,[bx]} 

ldvipi   1      {mov ax,[%s]}

ldvcpc   1      {mov al,[%s]}

vari    2      {%s dw %s} 

varp    2      {%s dw %s} 

varc    2      {%s db %s} 

ldpptp  0       {mov cx,ax}

ldtppp  0      {mov si,cx
                mov ax,[si]}

ldpppi  0       {mov si,ax
                 mov ax,[si]}

ldpppc  0       {mov si,ax
                 mov al,[si]}

ldpppp  0       {mov si,ax
                 mov ax,[si]}

ldpitp  0      {push bx
                mov bx,cx
                mov [bx],ax
                pop bx}

ldpctp  0      {push bx
                mov bx,cx
                mov [bx],al
                pop bx}

ldtppi  0      {push bx
                mov bx,cx
                mov ax,[bx]
                pop bx}

ldtppc  0      {push bx
                mov bx,cx
                mov al,[bx]
                pop bx}

ldfppi   1      {mov ax,[bp+%s]} 

ldfppc   1      {mov al,[bp+%s]} 

addsipi    0      {add ax,bx} 

addipi  1      {add ax,%s} 

addsipp    0      {add ax,bx} 

addscpc    0      {add al,bl} 

subsipi    0      {sub ax,bx} 

modsipi    0      {xor dx,dx
                div bx
                mov ax,dx}

modscpc    0      {xor dx,dx 
                xor ah,ah
                xor bh,bh
                div bx
                mov ax,dx}

divsipi    0      {xor dx,dx
                div bx}

mulsipi    0      {mul bx}

jp      1      {jmp %s}

jpnzi    1      {and ax,ax
                jnz  %s}

jpnzc    1      {and al,al
                jnz  %s}

jpzi     1      {and ax,ax
                jz  %s}

jpzc     1      {and al,al
                jz  %s}

leafppp   1      {lea ax,[bp+%s]} 

jpli    1      {cmp ax,bx
                jl  %s}

jplc    1      {cmp al,bl
                jl  %s}

jpgc    1      {cmp al,bl
                jg  %s}

jpgi    1      {cmp ax,bx
                jg  %s}

jpnei   1      {cmp ax,bx 
                jne  %s}

jpnec   1      {cmp al,bl
                jne  %s}

inctpi   0      {push bx
                mov bx,cx
                inc word ptr [bx]
                pop bx} 

inctpp   0     {mov si,cx
                inc word ptr [si]}

inctpc   0      {push bx
                mov bx,cx
                inc byte ptr [bx]
                pop bx} 

dectpi   0      {push bx
                mov bx,cx
                dec word ptr [bx]
                pop bx} 

dectpc   0      {push bx
                mov bx,cx
                dec byte ptr [bx]
                pop bx} 

shlsipi    0   {mov cx,bx
                shl ax,cl} 

castci  0      {mov ah,0} 

castic  0      {} 

endcode 0 {
                END     __start

}

startup 0 {
DOSSEG
.MODEL SMALL
.STACK 200h
.CODE
__space dw 200 dup (0)
__stack dw 0
__saves dw 0
__saveo dw 0
include STDLIB.ASM

__start:
                cli
                mov     ax,ss
                mov     __saves,ax
                mov     ax,sp
                mov     __saveo,ax
                mov     ax,offset __stack
                mov     sp,ax
                mov     ax,cs
                mov     ds,ax
                mov     ss,ax
                mov     es,ax
                sti
                call    _main
                cli
                mov     ax,__saveo
                mov     sp,ax
                mov     ax,__saves
                mov     ss,ax
                sti
                mov     ax,4C00h
                int     21h
}



