*R+,Q-,G 0
; ^^^^^^ This first line is to instruct GEN80 to compile this as a .REL
; file, with no .ERR file and no .SYM file

;   THIS LIBRARY NEEDS TO BE COMPILED BEFORE USE ! IT CANNOT BE 'INCLUDED'
;   When assembled as a REL module, it can only be used with C--RUN.REL
;   and a compiled and assembled to a .REL file Small C program.

;   These routines may be modified for your own use, and are public
;   domain.

;   If you find any bugs, or have suggestions, contact me please :

;   Onno ten Brinke
;   Tesselschadelaan 22
;   1399 VP Muiderberg
;   The Netherlands


;   NUMIO.RLB  Library for NUMIO. Just is a compiled version of NUMIO.C

;              REL version 1.0 19 July 1993
;              Is a module in STDLIB

    PUBLIC getdec, putdec, gethex, putbyte, puthex, atoi, hextoi, ccnbuff
    PUBLIC cchex, ccnum, ccpdec, ccphex, fputdec, fputhex, ccptnib, ccpbyte
    PUBLIC ccspflg, ccpchr

    EXTRN  ccgchar, ccsxt, ccgint, ccpchar, ccpint, ccor, ccxor
    EXTRN  ccand, cceq, ccne, ccgt, ccle, ccge, cclt, cccmp, ccuge
    EXTRN  ccult, ccugt, ccule, ccucmp, ccasr, ccasl, ccsub, ccneg
    EXTRN  cccom, ccmult, ccdiv, ccdeneg, ccbcneg, cccbcde, ccmdbuf, ccswtch
    EXTRN  VDPRP, VDPWP, TRUE, FALSE, ON, OFF, putc
    EXTRN  putchar, getchar, cpm, gets, puts, crlf, lston, lstoff, getkbd
;/* Numerical I/O Routines for Small C */
;#asm
ccnbuff: DEFS 10 ;I/P buffer
;/*
;getdec()           Inputs a decimal number. Uses ccnbuff as I/P buffer
;putdec(n)          Outputs a decimal number
;gethex()           Inputs a hex number. Uses ccnbuff as I/P buffer
;putbyte(ch)        Outputs an 8 bit number as 2 hex digits
;puthex(n)          Outputs a 16 bit number as 4 hex digits
;atoi(ptr)          Returns an integer from ASCII pointed to by ptr
;hextoi(ptr)        ....................from hex ASCII no ........
;fputdec(number,chan)    send dec no. to file
;fputhex(number,chan)    send 4 digit hex no to file

;*/
;/*
;I/P a signed decimal number
;*/
;getdec()
getdec:
;{
;char *ptr;
    PUSH BC
;ptr=ccnbuff;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,ccnbuff
    POP DE
    CALL ccpint
;putchar('?'); /* Prompt */
    LD HL,63
    PUSH HL
    CALL putchar
    POP BC
;gets(ptr);
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    CALL gets
    POP BC
;return atoi(ptr);
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    CALL atoi
    POP BC
    POP BC
    RET
;}
;Get a signed integer from a string in memory
;*/
;atoi(ptr)
atoi:
;char *ptr;
;{int digval,sign,n;
    PUSH BC
    PUSH BC
    PUSH BC
;n=0;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,0
    POP DE
    CALL ccpint
;sign=1;
    LD HL,2
    ADD HL,SP
    PUSH HL
    LD HL,1
    POP DE
    CALL ccpint
;while(*ptr==' ')ptr++;
cc15:
    LD HL,8
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    PUSH HL
    LD HL,32
    POP DE
    CALL cceq
    LD A,H
    OR L
    JP Z,cc16
    LD HL,8
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    DEC HL
    JP cc15
cc16:
;if(*ptr=='-'){sign=-1;ptr++;}
    LD HL,8
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    PUSH HL
    LD HL,45
    POP DE
    CALL cceq
    LD A,H
    OR L
    JP Z,cc17
    LD HL,2
    ADD HL,SP
    PUSH HL
    LD HL,1
    CALL ccneg
    POP DE
    CALL ccpint
    LD HL,8
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    DEC HL
;while(*ptr)
cc17:
cc18:
    LD HL,8
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    LD A,H
    OR L
    JP Z,cc19
;{digval=ccnum(ptr++);
    LD HL,4
    ADD HL,SP
    PUSH HL
    LD HL,10
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    DEC HL
    PUSH HL
    CALL ccnum
    POP BC
    POP DE
    CALL ccpint
; if(digval==-1)break;
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,1
    CALL ccneg
    POP DE
    CALL cceq
    LD A,H
    OR L
    JP Z,cc20
    JP cc19
; n=digval+n*10;}
cc20:
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,6
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,10
    POP DE
    CALL ccmult
    POP DE
    ADD HL,DE
    POP DE
    CALL ccpint
    JP cc18
cc19:
;return n*sign;}
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    POP DE
    CALL ccmult
    POP BC
    POP BC
    POP BC
    RET
;/*
;Get hex value from string in memory
;*/
;hextoi(ptr)
hextoi:
;char *ptr;
;{int digval,n;
    PUSH BC
    PUSH BC
; n=0;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,0
    POP DE
    CALL ccpint
; while(*ptr==' ')ptr++;
cc21:
    LD HL,6
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    PUSH HL
    LD HL,32
    POP DE
    CALL cceq
    LD A,H
    OR L
    JP Z,cc22
    LD HL,6
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    DEC HL
    JP cc21
cc22:
; while(*ptr)
cc23:
    LD HL,6
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    LD A,H
    OR L
    JP Z,cc24
; {digval=cchex(ptr++);
    LD HL,2
    ADD HL,SP
    PUSH HL
    LD HL,8
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    DEC HL
    PUSH HL
    CALL cchex
    POP BC
    POP DE
    CALL ccpint
;  if(digval==-1)break;
    LD HL,2
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,1
    CALL ccneg
    POP DE
    CALL cceq
    LD A,H
    OR L
    JP Z,cc25
    JP cc24
;  n=digval+n*16;}
cc25:
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,16
    POP DE
    CALL ccmult
    POP DE
    ADD HL,DE
    POP DE
    CALL ccpint
    JP cc23
cc24:
; return n;
    LD HL,0
    ADD HL,SP
    CALL ccgint
    POP BC
    POP BC
    RET
;}
;/*
;Get char. from buffer, check if numeric and return value or -1 
;*/
;ccnum(ptr)
ccnum:
;char *ptr;
;{char c;
    DEC SP
;c=*ptr&127; /* Mask off top bit */
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    PUSH HL
    LD HL,127
    POP DE
    CALL ccand
    POP DE
    CALL ccpchar
;if((c<'0')|(c>'9')) return -1;
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,48
    POP DE
    CALL cclt
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,57
    POP DE
    CALL ccgt
    POP DE
    CALL ccor
    LD A,H
    OR L
    JP Z,cc32
    LD HL,1
    CALL ccneg
    INC SP
    RET
;return c-'0';}
cc32:
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,48
    POP DE
    CALL ccsub
    INC SP
    RET
;/*
;Output a signed decimal number
;*/
;#asm
putdec: XOR A
ccpd1: LD (ccspflg),A
 JP ccpdec
fputdec: POP BC
 POP HL
 POP DE
 PUSH HL
 PUSH DE
 PUSH BC ;Reshuffle args
 LD A,1
 JR ccpd1
;
; Similar stuff for hex
puthex: XOR A
ccphx1: LD (ccspflg),A
 JP ccphex
fputhex: POP BC
 POP HL
 POP DE
 PUSH HL
 PUSH DE
 PUSH BC
 LD A,1
 JR ccphx1
;ccpdec(och,n)
ccpdec:
;int och,n;
;{if(n<0){n=-n; ccpchr(och,'-');}
    LD HL,2
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,0
    POP DE
    CALL cclt
    LD A,H
    OR L
    JP Z,cc3
    LD HL,2
    ADD HL,SP
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    CALL ccneg
    POP DE
    CALL ccpint
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,45
    PUSH HL
    CALL ccpchr
    POP BC
    POP BC
; if((n/10)!=0)
cc3:
    LD HL,2
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,10
    POP DE
    CALL ccdiv
    PUSH HL
    LD HL,0
    POP DE
    CALL ccne
    LD A,H
    OR L
    JP Z,cc4
; ccpdec(och,n/10);
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,10
    POP DE
    CALL ccdiv
    PUSH HL
    CALL ccpdec
    POP BC
    POP BC
; ccpchr(och,n%10+'0');
cc4:
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,10
    POP DE
    CALL ccdiv
    EX DE,HL
    PUSH HL
    LD HL,48
    POP DE
    ADD HL,DE
    PUSH HL
    CALL ccpchr
    POP BC
    POP BC
;}
    RET
;/*
;Input a hex number. Similar to getdec()
;*/
;gethex()
gethex:
;{int digval,n;
    PUSH BC
    PUSH BC
;char *ptr;
    PUSH BC
;n=0;
    LD HL,2
    ADD HL,SP
    PUSH HL
    LD HL,0
    POP DE
    CALL ccpint
;ptr=ccnbuff;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,ccnbuff
    POP DE
    CALL ccpint
;putchar('$'); /* Prompt */
    LD HL,36
    PUSH HL
    CALL putchar
    POP BC
;gets(ptr);
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    CALL gets
    POP BC
;return hextoi(ptr);}
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    CALL hextoi
    POP BC
    POP BC
    POP BC
    POP BC
    RET
;/*
;Get char. from buffer. Check if hex. Return value or -1 
;*/
;cchex(ptr)
cchex:
;char *ptr;
;{char c;
    DEC SP
;c=*ptr&127;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgint
    CALL ccgchar
    PUSH HL
    LD HL,127
    POP DE
    CALL ccand
    POP DE
    CALL ccpchar
;if((c>='0')&(c<='9')) return c-'0';
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,48
    POP DE
    CALL ccge
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,57
    POP DE
    CALL ccle
    POP DE
    CALL ccand
    LD A,H
    OR L
    JP Z,cc5
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,48
    POP DE
    CALL ccsub
    INC SP
    RET
;if((c>='A')&(c<='F')) return c-55;
cc5:
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,65
    POP DE
    CALL ccge
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,70
    POP DE
    CALL ccle
    POP DE
    CALL ccand
    LD A,H
    OR L
    JP Z,cc6
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,55
    POP DE
    CALL ccsub
    INC SP
    RET
;if((c>='a')&(c<='f')) return c-87;
cc6:
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,97
    POP DE
    CALL ccge
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,102
    POP DE
    CALL ccle
    POP DE
    CALL ccand
    LD A,H
    OR L
    JP Z,cc7
    LD HL,0
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,87
    POP DE
    CALL ccsub
    INC SP
    RET
;return -1;}
cc7:
    LD HL,1
    CALL ccneg
    INC SP
    RET
;/*
;Output a byte in hex
;*/
;#asm
putbyte: XOR A
 LD (ccspflg),A
 JP ccpbyte
;ccpbyte(och,byte)
ccpbyte:
;int och;
;char byte;
;{ char temp;
    DEC SP
;  temp=(byte>>4)&15;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,4
    POP DE
    CALL ccasr
    PUSH HL
    LD HL,15
    POP DE
    CALL ccand
    POP DE
    CALL ccpchar
;  ccptnib(och,temp);
    LD HL,5
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    CALL ccptnib
    POP BC
    POP BC
;  temp=byte&15;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,15
    POP DE
    CALL ccand
    POP DE
    CALL ccpchar
;  ccptnib(och,temp);}
    LD HL,5
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    CALL ccptnib
    POP BC
    POP BC
    INC SP
    RET
;/*
;Output nibble
;*/
;ccptnib(och,ch)
ccptnib:
;int och;
;char ch;
;{ if(ch<10)ccpchr(och,ch+48);
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,10
    POP DE
    CALL cclt
    LD A,H
    OR L
    JP Z,cc8
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,48
    POP DE
    ADD HL,DE
    PUSH HL
    CALL ccpchr
    POP BC
    POP BC
;  else ccpchr(och,ch+55);}
    JP cc9
cc8:
    LD HL,4
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,4
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,55
    POP DE
    ADD HL,DE
    PUSH HL
    CALL ccpchr
    POP BC
    POP BC
cc9:
    RET
;/*
;Output a 16 bit hex number
;*/
;ccphex(och,ptr)
ccphex:
;int och;
;char *ptr;
;{ char temp;
    DEC SP
;  temp=ptr>>8;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,8
    POP DE
    CALL ccasr
    POP DE
    CALL ccpchar
;  ccpbyte(och,temp);
    LD HL,5
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    CALL ccpbyte
    POP BC
    POP BC
;  temp=ptr;
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,5
    ADD HL,SP
    CALL ccgint
    POP DE
    CALL ccpchar
;  ccpbyte(och,temp);}
    LD HL,5
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,2
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    CALL ccpbyte
    POP BC
    POP BC
    INC SP
    RET
;/*
;/*
;O/P char to I/O depending on value of ccspflg
;och is 16 bit file channel or a pointer to a char pointer
;*/
;ccpchr(och,ch)
ccpchr:
;int *och;
;char ch;
;{char *ptr;
    PUSH BC
;switch (ccspflg)
    LD A,(ccspflg)
    CALL ccsxt
    PUSH HL
;{case 0: putchar(ch);return;
    JP cc86
cc87:
    LD HL,4
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    CALL putchar
    POP BC
  POP BC
    RET
; case 1: return putc(ch,och);
cc88:
    LD HL,4
    ADD HL,SP
    CALL ccgchar
    PUSH HL
    LD HL,8
    ADD HL,SP
    CALL ccgint
    PUSH HL
    CALL putc
    POP BC
    POP BC
    POP BC
    RET
; case 2: ptr=*och;*ptr= ch;*och= ++ptr;
cc89:
    LD HL,0
    ADD HL,SP
    PUSH HL
    LD HL,8
    ADD HL,SP
    CALL ccgint
    CALL ccgint
    POP DE
    CALL ccpint
    LD HL,0
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,6
    ADD HL,SP
    CALL ccgchar
    POP DE
    CALL ccpchar
    LD HL,6
    ADD HL,SP
    CALL ccgint
    PUSH HL
    LD HL,2
    ADD HL,SP
    PUSH HL
    CALL ccgint
    INC HL
    POP DE
    CALL ccpint
    POP DE
    CALL ccpint
;}
    JP cc85
cc86:
    LD DE,cc90
    LD HL,cc85
    LD B,3
    JP ccswtch
cc90:
    DEFW 0,cc87
    DEFW 1,cc88
    DEFW 2,cc89
cc85:
;}
    POP BC
    RET


ccspflg DEFB 0
;0 errors in compilation.
    END
                                                                                                                