                   FULL-SCREEN DEBUGGER

                         DBG

                        Version 5.1

                         MSX/MSX2

                       Users' Guide


                       Leonid BARAZ


                      We use following denotations  in  this
                      document:  angle  brackets  <  and   >
                      enclose  special  keys;   consequently
                      pressed keys are  separated  by  blank
                      while simultaneously pressed ones - by
                      plus.


     DBG is a debugger  with full screen edit capability  for
Z80  codes.  It runs  on MSX2 or MSX personal computers  with
VDP 9938 under the MSXDOS.

     Getting started:
       A>Dbg [filename.ext]

     Screen:

NA
             "Listing" mode
EB>
                        title window
        XWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWY

X02000RWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWRWWWWWWWWWWWWWWWWY
VList V DEBUGGER Version 5.0        Help:<Esc>?  Visual:Trace V EI PC=D827 I=00V
TWWWWWUWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWRWWWWS8B/02/8B/8B R=58V
V     V       7FF8:60           LD    H,B                V    VFB/FA/F9/F8 +MAPV
V     V       7FF9:4B           LD    C,E                V    VT=882B:D0C1/323CV
V00~00V       7FFA:03           INC   BC                 V    TWWWWWWWWWWWWWWWWS
V     V       7FFB:1A           LD    A,(DE)             V    V A=00 . sZxHxpNCV
V     V       7FFC:FE 38        CP    38                 V    V BC=0240: 00  . V
V     V       7FFE:FF           RST   38                 V    V DE=0000: C3 "Ã"V
V     V       7FFF:FF           RST   38                 V    V HL=7FFD: 38 "8"V
V     VMEM80@:8000:00           NOP                      V0078V IX=1377: 2A "*"V
VC0-C0V       8001:00           NOP                      V    V IY=0A00: 53 "S"V
V     V       8002:00           NOP                      V    TWWWWWWWWWWWWWWWWS
V20+1AV       8003:20 FB        JR    NZ,MEM80@:8000     V    VA'=00 . szxhxpncV
V     V       8005:DD 2A 08 80  LD    IX,(PRED:8008)     V    VBC'=0120: E1 "á"V
V00+00V       8009:C1           POP   BC                 V    VDE'=0A00: 53 "S"V
V     V       800A:CD CD D9     CALL  D9CD               V    VHL'=1100: 0E  . V
TWRWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWUWWWWWWWWWWWWWWWWS
V V       3FC0:E7 38 EB 2A E9 38 7D 93 6F 7C 9A 67 22 EB 38 2AVç8ë*é8}.o|.g"ë8*V
V-V       3FD0:E7 38 EB 21 18 39 C3 0A 1F CD 36 11 22 E9 38 EBVç8ë!.9Ã..Í6."é8ëV
V V       3FE0:2A E7 38 7B 95 6F 7A 9C 67 22 EB 38 2A E9 38 EBV*ç8{.oz.g"ë8*é8ëV
V+V       3FF0:21 1E 39 C3 0A 1F 0E 07 25 3D 20 03 E9 3C 32 03V!.9Ã....%= .é<2.V
V VDRIVER:4000:41 42 6F 57 76 65 00 00 00 00 00 00 00 00 00 00VABoWve..........V
V V       4010:C3 F5 74 C3 86 78 C3 09 79 C3 23 79 C3 50 79 C3VÃõtÃ.xÃ.yÃ#yÃPyÃV
V~V       4020:82 78 C3 35 5B 37 C3 AC 60 C3 14 62 00 C3 AE 5FV.xÃ5[7Ã¬`Ã.b.Ã®_V
V V       4030:2A 4B F3 C9 DD E5 DD 21 B7 00 CD AB 40 DD E1 30V*KóÉÝåÝ!·.Í«@Ýá0V
ZWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWW[

NA
             "Program loading" mode
EB>
                           request window
                      (optional "file" window)
        XWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWY

X1F000RWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWRWWWWWWWWWWWWWWWWY
VInputV File:B:prog    .COM  Area:07F0-8A1B  Reloc:0100->07F0 V EI PC=0100 I=00V
TWWWWWUWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWRWWWWS8B/8B/8B/8B R=7BV
V     V       012F:CB 16        RL    (HL)               V    V--/--/--/-- -MAPV
V     V       0131:30 0F        JR    NC,0142            V    VT=8A1A:CFC5/75C3V
V     V       0133:E5           PUSH  HL                 V    TWWWWWWWWWWWWWWWWS
V     V       0134:DD 66 00     LD    H,(IX+00)          V    V A=00 . szxhxpncV
V     V       0137:DD 6E FF     LD    L,(IX-01)          V    V BC=0000: C3 "Ã"V
V     V       013A:19           ADD   HL,DE              V    V DE=0000: C3 "Ã"V
V     V       013B:DD 74 00     LD    (IX+00),H          V    V HL=0000: C3 "Ã"V
V     V       013E:DD 75 FF     LD    (IX-01),L          V    V IX=0000: C3 "Ã"V
V     V       0141:E1           POP   HL                 V    V IY=0000: C3 "Ã"V
V     V       0142:DD 23        INC   IX                 V    TWWWWWWWWWWWWWWWWS
V     V       0144:0B           DEC   BC                 V    VA'=00 . szxhxpncV
V     V       0145:78           LD    A,B                V    VBC'=0000: C3 "Ã"V
V     V       0146:B1           OR    C                  V    VDE'=0000: C3 "Ã"V
V     V       0147:20 DF        JR    NZ,0128            V    VHL'=0000: C3 "Ã"V
TWRWWWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWUWWWWWWWWWWWWWWWWS
VVV      1F020:17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 17V................V
VVV      1F030:17 17 17 17 17 17 17 17 17 17 17 17 17 17 12 17V................V
VVV      1F040:17 17 17 17 17 17 17 17 17 17 17 17 17 17 17 19V................V
VVV      1F050:16 49 6E 70 75 74 16 20 46 69 6C 65 3A 20 70 72V.Input. File:B:PV
VVV      1F060:6F 67 20 20 20 20 20 20 20 20 41 72 65 61 3A 20VROG    .COM  AreV
VVV      1F070:30 37 46 30 2D 38 41 31 42 20 20 52 65 6C 6F 63Va:07F0-8A1B  RelV
VVV      1F080:3A 20 30 31 30 30 2D 3E 30 37 46 30 20 20 16 20Voc:0100->07F0 . V
VVV      1F090:45 49 20 50 43 3D 30 31 30 30 20 52 3D 37 42 16VEI PC=0100     .V
ZWQWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWQWWWWWWWWWWWWWWWW[
NA
     Features and functions:

- load programs and their symbol tables  (filename.SYM)  into
  memory and save them onto disk;
- display and edit memory  in characters and/or hexadecimals,
  as well as in assembly language instructions;
- display and edit  Video RAM contents  in characters  and/or
  hexadecimals;
- display and edit the contents of Z80 registers;
- use symbolic names of the program, define and/or kill them;
  symbolic names may be relocated instantly;
- hardcopy current window;
- define break points (using counters);
- define "check bytes";
- run program,  trace,  trace over CALL  (visualisation  mode
  is also available);
- return control to debugger:  when program breaks  or  exits
  successfully or changes "check byte",  or when user presses
  <STOP> key;
- move memory; fill in memory;  search character or hexadeci-
  mal target in memory;
- use hexadecimal calculator;
- get brief instant help.

     When started,  debugger loads  desired program,  if  its
name  is placed in start command.  Symbol table of program is
also loaded.

     During  the session  debugger  places  data  into  "data
fields" of the screen.  Cursor always locates  in one of such
fields, and they are the only thing to change. When you alter
some field  and  exit cursor from it,  debugger checks up its
new value and then stores it to corresponding "room".  Debug-
ger may also change the other fields to correspond to altered
field value  (if needed).  Therefore,  if  you want to change
some byte or word, you just type its new value instead of the
previous one.  If you want to move "list" or "dump" window to
desired memory area,  you just type the symbol or the address
in the symbol or address field. In order to create new symbol
you just type it  in the symbol field against the desired ad-
dress, and in order to kill symbol you just replace it by new
name or blank its field.

     The debugger provides 3 permanent windows ("dump","list"
and "registers") and 1 optional  ("title",  "file",  "memory"
etc.).  To move cursor inside the window  you may use  cursor
keys, carriage return, <tab>, <ctrl>+A.  To move  one page up
(down) you must press <ctrl>+Q(<ctrl>+Z). To edit data fields
you may type alphanumeric keys and <ins>, <del>, <bs>. If you
want to pass cursor into the other window  (and also,  maybe,
create or delete optional window), you must key in one of the
next commands:

1. <esc> L    List mode.
     Debugger enters list mode.  Every line of  "list" window
     contains symbolic name  (if any),  address,  instruction
     bytes and instruction mnemonics (disassembly).  The sym-
     bols are always terminated with colon, for instance:
         LD    A,(name:3000)
         LD    A,(name:)
         LD    A,(3000)
     RST 30  instruction  (inter-slot call  is supplied  with
     slot number and program address as additional arguments.
     Left column of "list" window contains  break points with
     maximum counter value, current counter value  and  acti-
     vity sign  (+ - active,  ~ - active  in parallel  memory
     bank, - - inactive). Right column of "list" window  con-
     tains profile counters for  instructions  with  symbolic
     names.

2. <esc> D    Dump mode.
     Debugger enters dump mode.  Every line of  "dump" window
     contains symbolic name (if any), address, 16 hexadecimal
     and 16 character fields.  Left column  of  "dump" window
     contains "check byte" signs (+/-/~).

3. <esc> V    VRAM mode.
    Debugger enters Video RAM mode. It displayes the contents
    of Video RAM in the same way as <esc> D, but it marks the
    left column by 'V' (VRAM) or 'E' (ERAM). For VRAM, the ad-
    dress field  is expanded by extra digit  in order to cope
    with all the range of 128Kbytes.

4. <esc> R    Registers mode.
     Debugger enters registers mode.  It displayes the values
     of all  Z80 registers  and  bytes/words,  referred to by
     them.  Program counter (PC), stack (T), interrupt status
     (EI/DI)  and memory bank  (slot  and  mapper)  for  four
     16Kbyte  pages  are  also displayed. You may turn mapper
     setting off.

5. <esc> Y    Symbols mode.
     Debugger shows symbolic names:  it displays the instruc-
     tion lines,  referred to by symbols,  in the same way as
     <esc> L.

6. <esc> B    Break points mode.
     Debugger shows break points: it displays the instruction
     lines,  referred to by break points,  in the same way as
     <esc> L.

7. <esc> H    Check bytes mode.
     Debugger shows "check bytes": it displays the dump lines,
     referred to by "check bytes", in the same way as <esc> D.

8. <esc> I    Program loading mode.
     Debugger provides optional  "File"  window with filename
     field and work area boundaries.  When you enter filename
     of the desired program and press carriage return, debug-
     ger  loads program into work area (slots and mapper con-
     figuration  -  by the corresponding fields of the Regis-
     ters  window)  and  then  loads its symbol table ("file-
     name.SYM").  "Reloc:"  field allows you to relocate sym-
     bolic names to another program address.

9. <esc> O    Program saving mode.
     Debugger provides optional  "File"  window with filename
     field and work area boundaries.  When you enter filename
     of the desired program and press carriage return, debug-
     ger saves work area contents and symbolic names  ("file-
     name.SYM")  onto  disk (slots and mapper configuration -
     by the corresponding fields of the Registers window).

10.<esc> P    Hardcopy mode.
     Debugger hardcopies  current window information to prin-
     ter (you may break printing by <ctrl>+<stop>).

11.<esc> M    Move mode.
     Debugger provides optional  "Memory"  window with source
     and  destination  address ranges.  In order to move data
     you  just  enter  the source and destination ranges  and
     press carriage return.

12.<esc> F    Fill in mode.
     Debugger provides optional "Memory"  window with address
     range and target field.  You enter the target in charac-
     ters  or  hexadecimals,  selecting mode with mode field:
     'C' or 'X', then press carriage return  (cursor position
     terminates target), and debugger fills area in by target.

13.<esc> S    Search in memory.
     Debugger provides optional "Memory"  window with address
     range and target field.  You enter the target in charac-
     ters  or  hexadecimals,  selecting mode with mode field:
     'C' or 'X', then press carriage return  (cursor position
     terminates target),  and debugger searches target in de-
     sired area (you may break search by <ctrl>+<stop>).

14.<esc> E    Reset registers.
     Debugger  clears all the registers  by 0,  sets  program
     counter (PC) to 100h and interrupt status - to "enabled"
     (EI). All the pages of memory are reset to their initial
     memory banks.

15.<esc> Z    Reset break points' counters.
     Debugger sets counters to their maximum values.

16.<esc> C    Hexadecimal calculator.
     Debugger provides  optional "calculator" window with two
     argument fields (four-digit  hexadecimal numbers),  ope-
     ration and result fields. Operations available: +, -, *,
     /, %(mod).

17.<esc> T    Debugger PNT and PGT base setting.
     Base address field locates at the top left corner of the
     frame.  When  you type in its new value, debugger trans-
     fers  PNT and PGT and initialises both tables authomati-
     cally. These tables occupy 1000h bytes of VRAM from dis-
     played address.

18.<esc> Q    Quit.
     Debugger quits and exits to DOS command mode.

19.<esc> ?    Help.
     Debuger displays brief help.

20.<ctrl>+G   Run program.
     Debugger continues program from PC. It sets memory banks
     as defined in the "registers" window.
     If visualisation mode is "No", it also restores VDP regi-
     sters (if program had stored them into MSX work area, as
     BIOS does),and you obtain all the output of your program.
     But in case of "Exec" or "Trace" visualisation mode, the
     debugger preserves its screen  and rewrites the informa-
     tion as soon as the next instruction is executed in turn
     ("Exec" mode  forces debugger  to rewrite  screen  after
     each inctruction, while "Trace" mode treats CALLs as in-
     divisible instructions).  Note that  the debugger always
     considers CALL 0005 and all the RSTs to be indivisible.
     Debugger sets  all the break points  into initial memory
     banks (enabled when debugger had got started). When con-
     trol gets to any active break point,  either its counter
     decreases (if not zero), or program breaks and falls in-
     to debugger.  Program also falls into debugger, when any
     check byte occurs to be altered.
     Warning: execution speed considerably diminishes, if any
     check byte is set!
     You may also  break program  by pressing <stop> key  (if
     interrupts are enabled!).  When program executes RET in-
     struction with initial stack position  or RST 0 instruc-
     tion, program also exits to debugger.
     When program falls into debugger, the debugger displayes
     instruction, executed first, at the first line of "list"
     window, and the sequence of instructions, referred to by
     PC, at the next lines.
     Warning:  proper break point processing is possible only
     when page 0000h-3FFFh is set to initial memory bank.
     Break point processing is implemented by means of RST 0,
     that's why you may use the other RSTs unrestrictedly.
     During the execution of program profile counters for all
     symbolic names are authomatically incremented (when pro-
     gram interrupts or when single command is  being  traced
     debugger increments the counter of the nearest  symbolic
     name before current  PC  value).  Profile  counters  are
     displayed in the right column of "list" window.

21.<ctrl>+X   (<SELECT>) Trace instruction.
     Same as <ctrl>+G, but only one instruction  (referred to
     by PC) is being executed.  You may trace through ROM in-
     structions  as well,  but break points  in ROM  are  not
     functional.

22.<ctrl>+T   Trace over CALL.
     Same as <ctrl>+X,  but any CALL instrution is considered
     to be indivisible,  and the control returns  to debugger
     after the whole subroutine is executed.  When subroutine
     runs, all break points and "check bytes" are active.

23.<ctrl>+P   Locate PC to cursor.

24.<ctrl>+V   Select  visualisation  mode:  "No",  "Exec"  or
     "Trace".


     Video RAM locations:

0000h - standard PNT of DOS and program.
1000h - standard PGT.
2000h - debugger PNT.
2800h - debugger PGT.
3000h - help PNT.
