base (4)
int (2,0)
char (2,1)
pointer (2,0)

endf 0          { } 

comment 1      {; %s}

extern 1       {%s$ equ 0} 

enter   0      {push ix
                ld ix,0
                add ix,sp}

exit    0      {pop ix
                ret}

defs    1      {db %s} 

label   1      {
%s:}

pushpc  0      {push af}
popsc   0      {pop bc}
savepc  0      {push af}

pushpp  0      {push hl}
popsp  0       {pop bc}
savepp  0      {push hl}

call    1      {call %s}

callpp    0      {call indirect}

restore    1     {restore %s}

ldipc    1     {ld a,%s} 

ldnipp 1       {ldnipp %s} 

leaipp    1      {ld hl,%s}

ldvcpc   1      {ld a,(%s)}

varc    2      {%s: db %s} 

ldpptp  0      {push hl
                pop iy}

ldpppc  0      {ld a,(hl)}

ldpppi  0      {ld a,(hl)
                inc hl
                ld h,(hl)
                ld l,a}

ldpppp  0      {ld a,(hl)
                inc hl
                ld h,(hl)
                ld l,a}

ldpctp  0      {ld (iy),a}

ldtppc  0      {ld a,(iy)}

addscpc    0      {add a,b} 

andscpc    0      {and b} 

shrscpc    0   {shr8$ defl 0
                call shr8} 

shlscpc    0   {shl8$ defl 0
                call shl8} 

subscpc    0      {sub b} 

modscpc 0      {mod8$ defl 0
                call mod8}

divscpc 0      {div8$ defl 0
                call div8}

mulscpc 0      {
                ld h,a
                xor a
                add a,h
                db 010h,0fdh
               }

jp      1      {jp %s}

jpnzc    1      {and a
                jp nz,%s}

jpzc     1      {and a
                jp z,%s}

leafppp 1      {push ix
                pop hl
                ld de,%s 
                add hl,de}

jplc    1      {cp b
                jp c,%s}

jpgc    1      {cp b
                db 038h,02h
                jp nz,%s}

jpnec   1      {cp b
                jp nz,%s}

inctpc   0      {inc (iy)}

dectpc   0      {dec (iy)}

pushpi  0      {push hl}
popsi   0      {pop bc}
savepi  0      {push hl}

ldipi    1     {ld hl,%s} 

ldipp    1     {ld hl,%s} 

ldscpp 0       {ld (hl),b} 

ldsipp  0      {ld (hl),c
                inc hl
                ld (hl),b
                dec hl}

ldsppp  0      {ld (hl),c
                inc hl
                ld (hl),b
                dec hl}

ldvipi   1      {ld hl,(%s)}

ldvppp   1      {ld hl,(%s)}

vari    2      {%s: dw %s} 

varp    2      {%s: dw %s} 

ldpitp  0      {ld (iy),l
                ld (iy+1),h}

ldtppi  0      {ld l,(iy)
                ld h,(iy+1)}

ldtppp  0      {ld l,(iy)
                ld h,(iy+1)}

addsipi    0      {add hl,bc}

addipi  1      {ld bc,%s
                add hl,bc}

andsipi    0   {ld a,h
                and b
                ld b,a
                ld a,l
                and c
                ld l,a}

addsipp    0      {add hl,bc}

subsipi 0      {and a
                sbc hl,bc} 

ldfppi  1      {ldfppi %s}

shlsipi 0      {shl16$ defl 0 
                call shl16}

modsipi    0   {mod16$ defl 0
                call mod16}

divsipi 0      {div16$ defl 0
                call div16}

mulsipi 0      {mul16$ defl 0
                call mul16}

jpnzi    1      {ld a,l
                or h
                jp nz,%s}

jpzi     1      {ld a,l
                or h
                jp z,%s}

jpli    1      {ld a,l
                sub c
                ld a,h
                sbc a,b
                jp c,%s}

jpgi    1      {ld a,c
                sub l
                ld a,b
                sbc a,h
                jp c,%s}

jpnei   1      {jpnei %s}

inctpi 0       {inc (iy) 
                db 020h,03h
                inc (iy+1)}

inctpp 0       {inc (iy) 
                db 020h,03h
                inc (iy+1)}

dectpi   0     {ld a,(iy)
                sub 1
                ld (iy),a
                ld a,(iy+1)
                sbc a,0
                ld (iy+1),a}

castci  0      {ld l,a
                ld h,0}

castic  0      {ld a,l} 

castpi  0      {; dummy cast}

endcode 0 {

ifdef mod8$
mod8:           
                push hl
                ld l,a
                ld h,0
                ld c,8
                add hl,hl
                ld a,h
                db 038h, 6 
                cp b
                db 038h, 3 
                sub b
                ld h,a
                inc l
                dec c
                db 020h, 0f2h 
                ld a,h
                pop hl
                ret
endif

ifdef div8$
div8:                
                push hl
                ld l,a
                ld h,0
                ld c,8
                add hl,hl
                ld a,h
                db 038h, 6 
                cp b
                db 038h, 3 
                sub b
                ld h,a
                inc l
                dec c
                db 020h, 0f2h
                ld a,l
                pop hl
                ret
endif

ifdef div16$
div16:
                push de
                ld de,0
                ld a,16
div161:
                add hl,hl
                ex de,hl
                adc hl,hl
                jr c,div162
                push hl      
                sbc hl,bc
                pop hl
                jr c,div163
div162:    
                and a               
                sbc hl,bc
                inc e
div163:
                ex de,hl
                dec a
                jr nz,div161
                pop de
                ret
endif

ifdef mod16$
mod16:
                push de
                ld de,0
                ld a,16
mod161:
                add hl,hl
                ex de,hl
                adc hl,hl
                jr c,mod162
                push hl      
                sbc hl,bc
                pop hl
                jr c,mod163
mod162:    
                and a       
                sbc hl,bc
                inc e
mod163:
                ex de,hl
                dec a
                jr nz,mod161
                ld h,d
                ld l,e
                pop de
                ret
endif

ifdef mul16$
mul16:
                push de
                ld d,b
                ld e,c
                ld b,h
                ld c,l
                ld hl,0
                ld a,16
mul161:
                add hl,hl
                ex de,hl
                add hl,hl
                ex de,hl
                jr nc,mul162
                add hl,bc
mul162:
                dec a
                jr nz,mul161
                pop de
                ret
endif

ifdef shl16$
shl16:
                add hl,hl
                dec bc
                ld a,b
                or c
                jr nz,shl16
                ret
endif

ifdef shl8$
shl8:
                add a,a
;                dec b
;                jr nz,shl8
                djnz shl8
                ret
endif

ifdef shr8$
shr8:                
                srl a
;                dec b
;                jr nz,shr8
                djnz shr8
                ret
endif

                heap_start:
                end     start

}

startup 0 {

                if1
                  .printx . Code generated by RBC .
                  .printx . Copyright 1996,1997 by Ricardo Bittencourt .
                endif

start:
                call    _main
                jp      0
                
restore         macro x
                  if (x LE 8)
                    rept (x/2)
                      pop de
                    endm
                  else
                    ld hl,0
                    add hl,sp
                    ld de,x
                    add hl,de
                    ld sp,hl
                  endif
                endm

ldfppi          macro x
                  ld l,(ix+x)
                  ld h,(ix+x+1)
                endm

jpnei           macro x
                  ld a,l
                  xor c
                  jr nz,x
                  ld a,h
                  xor b
                  jr nz,x
                endm

ldnipp          macro x
                  ld (hl),LOW (x)
                  inc hl
                  ld (hl),HIGH (x)
                  dec hl
                endm

indirect:       jp (hl)

include stdio.z80

                heap: dw heap_start

}
