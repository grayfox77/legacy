*S 14,q-,g 0,b 0

; a = nﬂ sons
; b = si bit 128 alors non interrup ; 4 bits de poid f = stereo (x/16).
; call Sound_effect


;	X-ANIME BY ABYSS.

	defb	0feh
	defw	start
	defw	end
	defw	start

	org	0c000h

start:	ld	a,8		; Si "SPACE" alors end.
	call	141h
	ld	c,a
	and	1
	or	a
	ret	z

	ld	a,c		; Si "INS" alors bang!.
	and	4
	or	a
	jr	nz,str

	ld	a,1
	ld	(bang),a

str	halt

	ld	b,3
retour0:push	bc

	ld	hl,str_spr	; Display sprites (attributs)
	ld	de,07600h
	ld	bc,128
	call	05ch

	pop	bc
	djnz	retour0

	ld	a,0
	ld	(caps),a

	ld	a,5
	ld	bc,07000h
	call	pal



	ld	a,0		; Numero du personnage.
	ld	e ,128		; Coordonnee Y de 0 a  255.
	ld	hl,01024	; Coordonees X de 0 a 1024.
	call	action



	ld	a,5
	ld	bc,02703h
	call	pal

	ld	a,(caps)
	or	a
	jr	z,zero

	in	a,(0aah)
	and	%10111111
	jr	un

zero:	in	a,(0aah)
	or	040h

un:	out	(0aah),a

	ld	hl,str_spr	; Display sprites (attributs)
	ld	de,07600h
	ld	bc,128
	call	05ch

	jr	start

pal:	di
	out	(099h),a
	ld	a,080h+16
	out	(099h),a

	ld	a,b
	out	(09ah),a
	ld	a,c
	out	(09ah),a
	ei

	ret

action: ld	ix,z_life	; Test s'il y a un personnage dans la chaine.

	ld	e,(ix +00)	; Adresse a zero = non.
	ld	d,(ix +01)

	ld	a,e
	or	d
	ret	z		; Retour s'il c'est non.

	add	ix,de		; Saut a la prochaine adresse si oui.
	ld	(nxt_prs),de	; Sauve le saut du personnage d'avant.

loop_an:push	ix
	call	anime		; Anime le personnage en question.
back_an:pop	ix

	ld	e,(ix +13)	; Test s'il y en a un autre.
	ld	d,(ix +14)

	ld	(nxt_prs),de	; Sauve le saut du personnage d'avant.

	add	ix,de

	ld	a,e
	or	d
	jr	nz,loop_an	; nz alors ont continue...

	xor	a		; Bigbang a zero.
	ld	(bang),a
	ret			; Pas d'autre alors retour.

; Traitement du bigbang.

anime:	ld	(save_sp),sp	; Utilise par la routine "dead:" & "touched:".

	ld	a,(ix +3)	; Pas de condition alors pas de bigbang.
	or	  (ix +4)
	jr	z,nobang

	ld	a,(bang)	; Pas de bigbang.
	or	a
	jr	z,nobang

	ld	h,0
	ld	l,(ix)
	ld	de,datbang

	dec	l
	add	hl,hl
	add	hl,de

	ld	e,(hl)		; Adresse des conditions du bigbang.
	inc	hl
	ld	d,(hl)

	ld	a,e		; Adresse a 0 alor pas de bigbang.
	or	d

	call	nz,chg_sequence

nobang:

; Routine animation d'images.

	ld	l,(ix +5)	; IY Position dans la table des sprites.
	ld	h,(ix +6)	; IX Position du pers. dans la zone de vies.
	push	hl
	pop	iy

	ld	b,(ix +12)	; Duree d'apparition d'une image.
	djnz	no_chg

	ld	l,(ix +09)	; Sequence data address.
	ld	h,(ix +10)

	ld	e,(hl)		; Si b=0 alors lit l'adrs de la sequence image.
	inc	hl		; Adresse de l'image + son compteur.
	ld	d,(hl)
	inc	hl

	ld	a,e		; Si 0ffffh alors dead.
	cp	255
	jr	nz,no_255

	ld	a,d
	cp	255
	jp	z,dead

no_255: ld	a,e		; Si adr = 0 alors saut a une autre image.
	or	d
	jr	nz,jmp01

	ld	e,(hl)		; Recupere dans DE l'adresse du saut.
	inc	hl
	ld	d,(hl)

	ex	de,hl		; Adresse du saut dans HL.

	ld	e,(hl)		; Nouvelle adresse de l'image + compteur.
	inc	hl
	ld	d,(hl)
	inc	hl
				; Change sequence data address.
jmp01:	ld	(ix +09),l
	ld	(ix +10),h

	ld	a,(de)
	ld	b,a		; Nouvelle duree d'apparition d'une image.
	inc	de

	ld	l,(ix +5)	; IY Position dans la table des sprites.
	ld	h,(ix +6)

	push	hl
	pop	iy

	push	iy
	push	bc

	ld	b,(ix +2)

	ld	a,(de)
	inc	de
	or	a
	jr	nz,jmpspr

loopspr:ld	a,(de)		; Met dans la table des sprites pointee par IY.
	inc	de		; Les numeros d'images pointees DE.

	ld	(iy +2),a
	inc	iy
	inc	iy
	inc	iy
	inc	iy

	djnz	loopspr
	jr	end_im

jmpspr: ld	a,(de)		; Met dans la table des sprites pointee par IY.

loopsp2:ld	(iy+2),a	; Les numeros d'images pointees DE.
	add	a,4

	inc	iy
	inc	iy
	inc	iy
	inc	iy

       djnz    loopsp2

end_im: pop	bc
	pop	iy

no_chg: ld	(ix +12),b

; Routine mouvement de sprites.

	ld	l,(ix +07)	; move sequence address.
	ld	h,(ix +08)

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl

	ld	a,d
	inc	a
	jp	c,dead

	ld	b,(ix +11)	; Duree du mouvement.
	djnz	no_mov

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl

	ld	a,e
	or	d
	jr	nz,jmp02

	inc	hl
	inc	hl

	ld	e,(hl)
	inc	hl
	ld	d,(hl)

	ex	de,hl

jmp02:	ld	(ix +07),l	; change address mov.
	ld	(ix +08),h

	ld	e,(hl)
	inc	hl
	ld	d,(hl)

	ld	a,(de)
	ld	b,a

no_mov: ld	(ix +11),b

	ex	de,hl
	push	iy
	inc	hl

	ld	b,(ix +02)	 ; Nbr de sprite(s) dans B'.

	exx			; Extention de Y.
	push	iy
	pop	hl

	ld	de,str_spr
	or	a
	sbc	hl,de		; Spr_str - spr_str + ?.

	srl	h		; hl / 2
	rr	l

	ld	de,add_y	; Pointe sur la nouvelle table.
	add	hl,de
	exx

	ld	a,(hl)		; Mouvement 1 ou 2.

	cp	2		; Selection du type de mouvement.
	jr	z,move3

	inc	hl

	cp	1
	jr	z,move2


; Premiere routine de mouvements.


loop_mv:			; Coordonnee Y.
	ld	a,(scrl_sp +1)	; Deplacement du personnage + scrolling.
	add	a,(hl)		; HL adition pour mov du personnage.
	call	mov_y

slowY1: inc	hl	;v90
				; Coordonnee X.
	ld	a,(scrl_sp +0)	; Deplacement du personnage + scrolling.
	add	a,(hl)		; HL adition pour mov du personnage.
	add	a,(iy +1)
	ld	(iy +1),a	; IY coordonnee Y dans la table des sprites.

	inc	hl		; Prochaine donnee pour prochain sprite.
	inc	iy
	inc	iy
	inc	iy
	inc	iy

	djnz	loop_mv
	jr	end_mv


; Deuxieme routine de mouvements.


move2:	ld	d,(hl)		; Y.
	inc	hl
	ld	e,(hl)		; X.

loopmv2:ld	a,(scrl_sp +1)	; Coordonnee Y.
	add	a,d
	call	mov_y

	ld	a,(scrl_sp +0)	; Coordonnee X.
	add	a,e
	add	a,(iy +1)
	ld	(iy +1),a

	inc	iy
	inc	iy
	inc	iy
	inc	iy

	djnz	loopmv2
	jr	end_mv

; Troisieme routine de mouvements.

move3:	dec	hl		; Mouvements par datas.
	ld	a,(hl)		; Calcul l'adresse du mouvement Y,X.
	sub	(ix +11)	; Adresse + (temp * 2).
	inc	hl
	inc	hl

	ex	de,hl
	ld	l,a
	ld	h,0
	add	hl,hl
	add	hl,de

	ld	d,(hl)		; Y.
	inc	hl
	ld	e,(hl)		; X.

loopmv3:ld	a,(scrl_sp +1)	; Coordonnee Y.
	add	a,d
	call	mov_y

	ld	a,(scrl_sp +0)	; Coordonnee X.
	add	a,e
	add	a,(iy +1)
	ld	(iy +1),a

	inc	iy
	inc	iy
	inc	iy
	inc	iy

	djnz	loopmv3

end_mv: pop	iy

; Condition


	ld	e,(ix +03)	; Adresse des conditions.
	ld	d,(ix +04)

	ld	a,e
	or	d
	jr	z,end_cd

	ex	de,hl		; adresse a lire si la condition est vrai.
	ld	c,(hl)
	inc	hl
	ld	b,(hl)
	inc	hl
	ex	de,hl

	ld	(adrcond),bc

	ld	c,0		; Compteur.

loop_cd:ld	a,(de)		; 255 = end, sinon mode
	inc	de

	cp	255		; Fin des conditions.
	jr	z,end_cd

;	cp	1		; mode1.  n'est pas utilise pour le moment.
;	jr	z,xxxxh

	ld	a,(de)		; Numero du sprite a teste dans la tbl des spr.
	inc	de

	ex	de,hl		; Offset conditions.
	ld	e,(hl)		; Le sprite ne sera touche que dans D et E.
	inc	hl
	ld	d,(hl)
	inc	hl

	push	hl		; sauve "DE".

	ld	l,a		; Numero du sprite
	ld	h,0

	add	hl,hl		; Multiplie par quatre.
	add	hl,hl

	push	de
	ld	de,str_spr	; Table des sprites
	add	hl,de		; Adresse du sprite a tester.
	pop	de

	ld	b,(ix +2)

	push	iy		; IY position du personnage dans la table.
loopcd2:push	hl

	ld	a,(hl)		; Le sprite a tester n'est pas entre 212
	cp	212		; et 240.
	jr	c,ok_tch
	cp	240
	jr	c,not_tch

ok_tch: ld	a,(iy+0)	; Ypersonnage - Ysprite
	sub	(hl)
	jr	nc,no_neg

	neg
	cp	16
	jr	nc,not_tch

	jr	tch_Y

no_neg: cp	e		; 8
	jr	nc,not_tch


tch_Y:	inc	hl		;v90.

	ld	a,(iy+1)	; Xpersonnage -Xsprite.
	sub	(hl)
	jr	nc,no_neg2

	neg
	cp	16
	jr	nc,not_tch

	jr	tch_X

no_neg2:cp	d		; 8
	jr	nc,not_tch

tch_X:	call	touched

	ld	a,1
	ld	(caps),a

not_tch:inc	iy
	inc	iy
	inc	iy
	inc	iy

	pop	hl
	djnz	loopcd2

	pop	iy
	pop	de
	inc	c

	jr	loop_cd
end_cd: ret

; Resultats d'un contact entre un personnage avec un ou plusieur sprites

touched:push	de		; Un sprite a ete touche...

	ld	de,(adrcond)	; Adresse de la chaine des conditions.
	ld	l,c		; plus le numero du test.
	ld	h,0
	add	hl,hl
	add	hl,de

	ld	e,(hl)		; Adresse de la chaine des resultats.
	inc	hl
	ld	d,(hl)

	call	chg_sequence

	pop	de

	ld	a,(hl)		; 0= continue les conditions.
	or	a
	ret	z

	ld	sp,(save_sp)	; Retour a la routine "action:".
	ret

chg_sequence:

	ex	de,hl

	ld	e,(hl)		; nouvelle sequence image.
	inc	hl
	ld	d,(hl)
	inc	hl

	ld	a,d
	or	a
	jr	z,dead

	cp	255
	jr	z,no_sim

	ld	(ix +09),e
	ld	(ix +10),d

	push	hl
	ex	de,hl

	ld	e,(hl)		; Timer de la nouvelle sequence image.
	inc	hl
	ld	d,(hl)

	ld	a,(de)
	ld	(ix +12),a
	pop	hl

no_sim	ld	e,(hl)		; nouvelle sequence du deplacement.
	inc	hl
	ld	d,(hl)
	inc	hl

	ld	a,d
	cp	255
	jr	z,no_sde

	ld	(ix +07),e
	ld	(ix +08),d

	push	hl
	ex	de,hl

	ld	e,(hl)		; Timer de la nouvelle sequence du deplacement.
	inc	hl
	ld	d,(hl)

	ld	a,(de)
	ld	(ix +11),a
	pop	hl

no_sde: ld	e,(hl)		; Nouvelle adresse des conditions
	inc	hl
	ld	d,(hl)
	inc	hl

	ld	(ix +3),e
	ld	(ix +4),d

	ret


mov_y:	jp	p,no_sub	; Si p alors positif.
	neg

	exx

	ld	c,a
	ld	b,0

	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	dec	hl

	ex	de,hl
	or	a
	sbc	hl,bc
	ex	de,hl

	jr	nexty

no_sub: exx			; Calcul pour le deplacement du personnage
				; en horizontal sur 16 bits.
	ld	c,a
	ld	b,0

	ld	e,(hl)		; HL = extention du Y de la table des sprites
	inc	hl		; sur 16 bits.
	ld	d,(hl)
	dec	hl

	ex	de,hl
	add	hl,bc
	ex	de,hl


nexty:	ld	(hl),e
	inc	hl
	ld	(hl),d
	inc	hl

	ld	a,d		; Test si le personnage est hors de l'ecran.

	cp	255		; Si le personnage depasse ces limites.
	jr	nc,no_dead
	cp	2
	jr	nc,dead 	; Fin du test de la mort...

no_dead:or	a
	jr	nz,no_212	; Test le bas de l'ecran. (coordonnees hautes)

	ld	a,e
	cp	212
	jr	c,enable

no_212: ld	a,d		; Test le haut de l'ecran. (idem mais basses)
	cp	255
	jr	nz,disable

	ld	a,e
	cp	240
	jr	nc,enable

disable:ld	e,213		; Le personnage disparait hors de l'ecran.

enable :ld	(iy +0),e	; Y dans la table des sprites.

	exx
	ret

dead:	ld	sp,(save_sp)	; Retour a la routine "action:".

	ld	l,(ix +5)	; Positionne les spr du perso en Y= 212.
	ld	h,(ix +6)
	ld	b,(ix +2)	; Nombre de sprite(s) du personnage.
	ld	de,4

lp_dead:ld	(hl),212
	add	hl,de

	djnz	lp_dead

	ld	l,(ix +13)	; Taille du saut au prochain personnage.
	ld	h,(ix +14)
	ld	bc,(nxt_prs)	; Taille du saut du personnage d'avant.

	push	bc

	ld	a,h		; Si zero alors dernier personnage.
	or	l
	jr	nz,no_last

	ld	bc,0		; Le saut du personnage d'avant sera a 0.
	ld	hl,0

no_last:add	hl,bc		; Nouveau saut ou alors (0= dernier perso).
	ex	de,hl		; de = nouveau saut.

	pop	bc

	push	ix		; Pointe ix sur le personnage d'avant.
	pop	hl

	sbc	hl,bc

	push	hl
	pop	ix

	ld	bc,z_life	; Test si ix est au debut de la zone de vies.

	or	a		; ix = z_life
	sbc	hl,bc

	jr	nz,no_zlf

	ld	(ix +00),e	; Cette adrs est le debut de la zone de vies.
	ld	(ix +01),d
	ret			; Le personnage est mort retour dans "action:".

no_zlf: ld	(ix +13),e	; Saut nouveau dans le perso d'avant.
	ld	(ix +14),d
	ret			; Le personnage est mort retour dans "action:".

;	Zone des datas.


caps:	defb	0		; Utilise pour tester les conditions.
bang:	defb	0		; Si 1 alors bigbang.

scrl_sp:defw	00000h		; Deplacement du scrolling +63 -64 maxi.
adrcond:defw	00000h
nxt_prs:defw	00000h		; Saut du personnage sauvgarde.
save_sp:defw	00000h		; Utilise par la routine "dead:" & "touched:".

; Identite des personnages.
;
;
;dat_per:defw	 00000h 			 ; Inutilisee.
;	 defw	 pers01
;
;pers01: defw	 00402h,side01,move01,cond01
;

; liste des perssonages a detruires au moment du bigbang.

datbang:defw	 c3_00, c3_00, c3_00, c3_00	; Adresse a 0 = pas de b-bang.
	defw	00000h,00000h,00000h,00000h	; il y a autant d'adr que de
						; personnages.

; Datas des animations des personnages.

side01: defw	pic01,pic02,pic03,0,side01	; Picture sequence address.
side02: defw	pic04,pic05,pic06,0,side02
side03: defw	pic07,0,side03

side04: defw	pic04,pic05,pic06
	defw	pic01,pic02,pic03
	defw	-1				; -1 = 0ffffh = dead.

side05: defw	-1

pic01:	defb	064,1,01*4			; Timing, mode, picture.
pic02:	defb	064,1,02*4
pic03:	defb	064,1,03*4

pic04:	defb	032,1,04*4
pic05:	defb	032,1,05*4
pic06:	defb	032,1,06*4

pic07:	defb	001,1,10*4	; test pour le bigbang

; Data des deplacements

move01: defw	mv01,mv02,mv03,mv04,0,move01		; -1= (0ffffh)= dead.
move02: defw	mv09,0,move02
move03: defw	mv10,0,move03

mv01:	defb	064,1,+01,+00		; Time, mode, Y, X.	; Mode1.
mv02:	defb	064,1,-01,-00
mv03:	defb	064,1,+01,-01
mv04:	defb	064,1,-01,+01

mv09:	defb	003,2
	defb	+01,-01,+00,-01, +00,-01, +00,-1		; Mode2.

mv10:	defb	000,1,+00,+00		; test pour le bigbang

; Conditions des personnages.
					; X et Y = offset of conditions.
cond01: defw	chg01			; adrs, mod, nﬂspr, Y, X, end/mod
	defb	0, 8, 8, 16,255
chg01:	defw	c3_00
c1_00:	defw	side05,move03,00000h,1	; 0ffffh = aucun changements.
					; 1 ne pas continuer les tests.
cond02: defw	chg02			; s-image a 00000h alors dead.
	defb	0, 8, 8, 16,255
chg02:	defw	c3_00
c2_00:	defw	side05,move01,00000h,1

c3_00:	defw	00000h,move03,00000h,1	; test pour le bigbang.

; Table des attributs.

str_spr:defb	064	,032	,00*4,0  ; Nﬂdu spr *4 (V9958).
	defb	064	,016	,01*4,0
	defb	064+16	,032	,02*4,0
	defb	064+16	,016	,03*4,0

	defb	064	,240	,04*4,0
	defb	064	,224	,05*4,0
	defb	064+16	,240	,06*4,0
	defb	064+16	,224	,07*4,0

	defb	080	,128	,08*4,0
	defb	128+48	,0	,09*4,0
	defb	212	,0	,10*4,0
	defb	212	,0	,11*4,0

	defb	212	,0	,12*4,0
	defb	212	,0	,13*4,0
	defb	212	,0	,14*4,0
	defb	212	,0	,15*4,0

	defb	128	,032	,16*4,0  ; Nﬂdu spr *4 (V9958).
	defb	128	,016	,17*4,0
	defb	128+16	,032	,18*4,0
	defb	128+16	,016	,19*4,0

	defb	064	,240-64 ,20*4,0
	defb	064	,224-64 ,21*4,0
	defb	064+16	,240-64 ,22*4,0
	defb	064+16	,224-64 ,23*4,0


	defb	212	,0	,24*4,0
	defb	212	,0	,25*4,0
	defb	212	,0	,26*4,0
	defb	212	,0	,27*4,0
	defb	212	,0	,28*4,0
	defb	212	,0	,29*4,0
	defb	212	,0	,30*4,0
end_spr:defb	212	,0	,31*4,0


add_y:	defb	064	,0	; Extention pour la coodonnee Y.
	defb	064	,0
	defb	064+16	,0
	defb	064+16	,0

	defb	064	,0
	defb	064	,0
	defb	064+16	,0
	defb	064+16	,0

	defb	064	,0
	defb	128+48	,0
	defb	212	,0
	defb	212	,0

	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0

	defb	128	,0
	defb	128	,0
	defb	128+16	,0
	defb	128+16	,0

	defb	064	,0
	defb	064	,0
	defb	064+16	,0
	defb	064+16	,0


	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0
	defb	212	,0


; Zone de vie des personnages.
; La taille de cette zone varie en fonction du nombre de personnages.

z_life: defw	00002h		; adrs indicant le debut de la zone (0= rien)

	defb	1		; numero de personnage.
	defw	0402h		; nbr de sprite(s), nbr de vie(s).
	defw	cond01		; Zero pas de conditions.
	defw	str_spr +00	; Position du personnage dans la table des spr.
	defw	move01		; Adresse du deplacement actuel.
	defw	side04		; Adresse de l'image actuel.
	defw	00120h		; B = temp image, temp deplacement personnage.
	defw	0000fh		; Saut au prochain personnage.

	defb	2		; numero de personnage.
	defw	0402h		; nbr de sprite(s), nbr de vie(s).
	defw	cond02		; Zero pas de conditions.
	defw	str_spr +16	; Position du personnage dans la table des spr.
	defw	move02		; Adresse du deplacement actuel.
	defw	side02		; Adresse de l'image actuel.
	defw	00103h		; B = temp image, temp deplacement personnage.
	defw	0000fh		; Saut au prochain personnage.

	defb	1		; numero de personnage.
	defw	0402h		; nbr de sprite(s), nbr de vie(s).
	defw	cond01		; Zero pas de conditions.
	defw	str_spr +64	; Position du personnage dans la table des spr.
	defw	move01		; Adresse du deplacement actuel.
	defw	side02		; Adresse de l'image actuel.
	defw	00120h		; B = temp image, temp deplacement personnage.
	defw	0000fh		; Saut au prochain personnage.

	defb	2		; numero de personnage.
	defw	0402h		; nbr de sprite(s), nbr de vie(s).
	defw	cond02		; Zero pas de conditions.
	defw	str_spr +80	; Position du personnage dans la table des spr.
	defw	move02		; Adresse du deplacement actuel.
	defw	side02		; Adresse de l'image actuel.
	defw	00103h		; B = temp image, temp deplacement personnage.
	defw	00000h		; Saut au prochain personnage.

end:
