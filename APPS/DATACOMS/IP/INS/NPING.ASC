	;--- NestorPing 1.0
	;    For use with InterNestor Suite 1.0
	;    By Konami Man, 12-2002
	;    Use: NPING <host name>|<IP address>

	.label	20

;*****************************
;***                       ***
;***   MACROS, CONSTANTS   ***
;***                       ***
;*****************************

nesman:	macro	@f	;Indirect call to NestorMan functions
	ld	c,@f
	ld	de,#2202
	call	#FFCA
	endm

print:	macro	@d	;Prints a string
	ld	de,@d
	ld	c,_STROUT
	call	5
	endm

_CONOUT:	equ	#02
_DIRIO:	equ	#06	;Some DOS function calls
_STROUT:	equ	#09
_TERM:	equ	#62

ENASLT:	equ	#0024	;Slot swithcing BIOS routine

	;--- Level 2 module (usually PPP) calls

LV2_QUEUES:	equ	#800C	;Obtains queue pointers
LV2_IPS:	equ	#8018	;Obtains our IP address
LV2_CHK_CON:	equ	#800F	;Obtains connection status (ON/OFF)

	;--- Level 3 module (IP) calls

IP_QUEUES:	equ	#800C	;Obtains queue pointers
IP_DNS_Q:	equ	#802A	;Resolver query
IP_DNS_S:	equ	#802D	;Get response/status

; Conditional relative jumps

jri:	macro	@a	;A = x
	jr	z,@a
	endm

jrni:	macro	@a	;A <> x
	jr	nz,@a
	endm

jrmn:	macro	@a	;A < x
	jr	c,@a
	endm

jrmy:	macro	@a	;A > x
	jr	z,$+4
	jr	nc,@a
	endm

jrmni:	macro	@a	;A <= x
	jr	c,@a
	jr	z,@a
	endm

jrmyi:	macro	@a	;A >= x
	jr	nc,@a
	endm

; Conditional absolute jumps

jpi:	macro	@a	;A = x
	jp	z,@a
	endm

jpni:	macro	@a	;A <> x
	jp	nz,@a
	endm

jpmn:	macro	@a	;A < x
	jp	c,@a
	endm

jpmy:	macro	@a	;A > x
	jr	z,$+5
	jp	nc,@a
	endm

jpmni:	macro	@a	;A <= x
	jp	c,@a
	jp	z,@a
	endm

jpmyi:	macro	@a	;A >=x
	jp	nc,@a
	endm



;************************
;***                  ***
;***   MAIN PROGRAM   ***
;***                  ***
;************************

	org	#100

;---------------------------
;---  Initial checkings  ---
;---------------------------

	;--- Checks whether there are parameters or not.
	;    If not, shows help and finishes.

	print	PRESEN_S	;Presentation string

	ld	a,1	;Try to extract first parameter
	ld	de,BUFER
	call	EXTPAR
	jr	nc,THEREISPARS

TERMINFO:	print	INFO_S	;Shows info and finishes
	jp	TERM_NO_R

THEREISPARS:	;

	;--- Checks whether NestorMan 1.21 or higher is installed,
	;    otherwise shows an error message and finishes.

	xor	a	;Installed?
	nesman	1
	or	a
	jr	nz,OKNMAN1

	print	NONMAN_S	;Prints "not installed" and finishes
	print	NEEDNMAN_S	;if not installed
	jp	TERM_NO_R

OKNMAN1:	ld	hl,#0201	;Installed: now check version
	ex	de,hl
	call	COMP
	jr	c,OKNMAN2

	print	BADNMAN_S	;Prints "invalid version" and finishes
	print	NEEDNMAN_S	;if not version 1.21 or higher
	jp	TERM_NO_R
OKNMAN2:	;

	;--- Checks whether InterNestor is installed or not.
	;    If not, shows an error message and finishes.

	nesman	32	;It is installed?
	or	a
	jr	nz,OKINS

	print	NOINS_S	;Not installed: prints "INS not
	jp	TERM_NO_R	;installed" and finishes.

OKINS:	ld	a,(ix)	;Checks if INS is paused,
	or	a	;then an error is printed
	jr	nz,OKINS2	;and the program finishes

	print	PAUSED_S
	jp	TERM_NO_R

OKINS2:	ld	(INS_SLOT),a	;Saves modules slot
	push	de
	ld	a,b	;Converts segment number for level 2
	nesman	3	;module into physical segment
	ld	a,c	;number and stores it.
	ld	(INS_SEG2),a
	pop	de	;The same for level 3 module.
	ld	a,e
	nesman	3
	ld	a,c
	ld	(INS_SEG3),a

	;--- Obtains mapper support routines

	ld	de,#0402
	call	#FFCA
	ld	de,ALL_SEG
	ld	bc,#30
	ldir

	;--- Obtains host to ping from the command line

	ld	a,1	;Extracts first parameter to BUFER
	ld	de,HOST_NAME
	call	EXTPAR

	;--- Switches level 2 module (usually PPP) segment on page 2

	call	GET_P2	;First saves the original
	ld	(TPA_SEG2),a	;TPA page 2 segment number

	ld	a,(INS_SLOT)	;First, the slot
	ld	h,#80
	call	ENASLT
	ei
	ld	a,(INS_SEG2)	;And then, the segment
	call	PUT_P2

	;--- Obtains our IP address
	;    (actually we do not use this data in NestorPing 0.3,
	;     but it may be useful for expanding or improving
	;     the program)

	xor	a
	call	LV2_IPS	;Calls the routine IPS of
	ld	(IP_LOCAL),hl	;the level 2 module
	ld	(IP_LOCAL+2),de

	;--- Checks that we're actually online
	;    (level 2 module has a connection opened)

	call	LV2_CHK_CON	;Calls the routine CHK_CON
	jr	c,CONOK	;of the level 2 module

	print	NOCON_S	;Shows error "No connection open"
	jp	TERM_R	;and finishes
CONOK:	;

	;--- Switches level 3 module (IP) segment on page 2

	ld	a,(INS_SEG3)	;The slot is already switched, so
	call	PUT_P2	;we switch only the segment

	;--- Resolves host name

	ld	hl,HOST_NAME	;Makes the DNS query
	xor	a
	call	IP_DNS_Q
	jr	nc,QUERY_OK

	ld	de,QERR1_S	;If an error was returned,
	cp	1	;print it and exit
	jr	z,QUERY_ERR
	ld	de,QERR4_S	;Error can be only "No connection"
	cp	4	;(1) or "No DNS available" (4)
	jr	z,QUERY_ERR
	ld	de,QERRX_S
QUERY_ERR:	ld	c,_STROUT
	call	5
	jp	TERM_R

QUERY_OK:	cp	1	;If it was a direct IP address,
	jr	nz,WAIT_DNS	;set it at IP_REMOTE and continue
OK_IP:	ld	(IP_REMOTE),hl
	ld	(IP_REMOTE+2),de
	jr	OK_HOSTNAME

WAIT_DNS:	print	RESOLVING_S	;If not a direct IP address,
WAIT_DNS_LOOP:	xor	a	;print "Resolving host name"
	call	IP_DNS_S	;and wait for a reply or an error
	cp	1	;1: Query yet in progress, wait
	jr	z,WAIT_DNS_LOOP
	cp	2	;2: Query finished successfully
	call	z,PRINT_OK
	jr	z,OK_IP	;Other (3): Query aborted due to error

RESOLV_ERROR:	push	af	;An error was returned:
	print	ERROR_S	;Search its string on ERRCODE_T,
	pop	af	;print it and exit
	ld	b,a
	ld	de,ERRCODE_T
SEARCH_ERROR:	ld	a,(de)
	inc	de
	cp	b
	jr	z,ERROR_FOUND
NEXT_ERROR:	ld	a,(de)
	inc	de
	or	a
	jr	z,ERROR_NOTF
	cp	"$"
	jr	nz,NEXT_ERROR
	jr	SEARCH_ERROR

ERROR_NOTF:	ld	de,UNKERR_S
ERROR_FOUND:	ld	c,_STROUT	;Print error string
	call	5
	call	LF
	jp	TERM_R

PRINT_OK:	push	af,hl,de
	print	OK_S
	pop	de,hl,af
	ret

OK_HOSTNAME:	;

	;--- Obtains the descriptors of the input and output
	;    queues

	ld	a,255	;Output queue
	call	IP_QUEUES
	ld	(PROT_OUT_QUEUE),a
	ld	(PROT_OUT_QUEUE+1),hl
	ld	a,1	;Input queue for ICMP
	call	IP_QUEUES	;query messages
	ld	(ICMP_IN_QUEUE),a
	ld	(ICMP_IN_QUEUE+1),hl

	;*** Main program loop:
	;    The first echo message is sent automatically.
	;    To send additional messages, user must press ENTER.
	;    Pressing any other key causes the program to exit.
	;    When an echo reply arrives, a message is printed
	;    indicating the ICMP sequence number and the TTL.

	;--- Shows message "Press ENTER or any other key"
	;    and sends the first echo message

	print	PRESS_S
	call	SEND_ECHO
	jr	KEY_OK

	;--- Waits for either a key pressing or an arriving datagram

MAIN_LOOP:	ld	e,#FF	;DIRIO: Returns A=key pressed,
	ld	c,_DIRIO	;or 0 if no key was pressed
	call	5
	cp	13	;Enter pressed: sends echo
	call	z,SEND_ECHO
	jr	z,KEY_OK
	or	a	;Other key pressed: finishes
	jp	nz,TERM_R
KEY_OK:	;

	ld	a,(ICMP_IN_QUEUE)
	ld	ix,(ICMP_IN_QUEUE+1)
	ld	b,1	;Checks for an enqueued
	ld	h,3	;incoming datagram, if there is
	ld	iy,BUFER-1	;none, jumps to main loop
	nesman	25	;(note that the FIRST list item
	jr	c,MAIN_LOOP	;is extracted)

	;--- Datagram arrived: if it is an echo reply,
	;    prints message, otherwise the datagram is ignored
	;    (For simplicity, ignores ICMP checksum)

	ld	a,(BUFER-1)
	ld	c,a
	ld	b,0
	ld	hl,BUFER
	add	hl,bc	;HL points now to data part

	ld	a,(hl)	;Checks if it is echo reply
	or	a	;(ICMP code 0), if not,
	jr	nz,MAIN_LOOP	;jumps to main loop
	push	hl
	pop	ix

	ld	d,(ix+6)	;Converts the ICMP sequence number
	ld	e,(ix+7)	;to an ASCII string
	ld	hl,SEQR_S
	ld	b,1
	ld	a,%1000
	call	NUMTOASC

	ld	a,(BUFER+8)	;Converts the TTL to an ASCII string
	ld	e,a
	ld	d,0
	ld	hl,TTL_S
	ld	b,1
	xor	a
	call	NUMTOASC

	print	RCV_S	;Prints "Received echo with SEQ=x"
	print	ANDTTL_S	;Prints "and TTL=x"
	jp	MAIN_LOOP

	;--- Subroutine for sending an echo message

SEND_ECHO:	push	af
	call	_SEND_ECHO
	pop	af
	ret

	; Prepares datagram

_SEND_ECHO:	ld	hl,IP_REMOTE	;Sets destination address
	ld	de,DESTIN_AD
	ld	bc,4
	ldir

	ld	a,(SEQ+1)	;Sets sequence number
	ld	(ICMP_SEQ),a	;(little-endian to big-endian
	ld	a,(SEQ)	;conversion is needed)
	ld	(ICMP_SEQ+1),a

	ld	hl,0
	ld	(ICMP_CHKSUM),hl	;Calculates ICMP checksum
	ld	ix,ICMP_START
	ld	bc,(ICMP_END-ICMP_START)/2	;Message size in words
	call	CALC_CHKSUM
	dec	de
	ld	a,e
	cpl
	ld	(ICMP_CHKSUM),a
	ld	a,d
	cpl
	ld	(ICMP_CHKSUM+1),a

	; Puts datagram in the output queue

	ld	a,(PROT_OUT_QUEUE)	;Note that the list item is
	ld	ix,(PROT_OUT_QUEUE+1)	;inserted at the END of the list
	ld	b,3
	ld	hl,ECHO_END-ECHO_START
	ld	iy,ECHO_START
	nesman	24

	; Shows message "Echo sent with SEQ=x"

	ld	de,(SEQ)	;Converts sequence number
	ld	hl,SEQS_S	;to an ASCII string
	ld	b,1
	xor	a
	call	NUMTOASC
	print	SENT_S	;Prints string

	ld	hl,(SEQ)	;Increases sequence number
	inc	hl	;for the next datagram, and returns
	ld	(SEQ),hl

	ret


;******************************
;***                        ***
;***   AUXILIARY ROUTINES   ***
;***                        ***
;******************************

;--- NAME: COMP
;      Compares HL and DE (16 bits in twos complement)
;    INPUT:    HL, DE = numbers to compare
;    OUTPUT:    C, NZ if HL > DE
;               C,  Z if HL = DE
;              NC, NZ if HL < DE

COMP:	call	_COMP
	ccf
	ret

_COMP:	ld	a,h
	sub	d
	ret	nz
	ld	a,l
	sub	e
	ret


;--- Prints LF

LF:	ld	e,10
	ld	c,_CONOUT
	jp	5


;--- NAME: EXTPAR
;      Extracts a parameter from the command line
;    INPUT:   A  = Parameter to extract (the first one is 1)
;             DE = Buffer to put the extracted parameter
;    OUTPUT:  A  = Total number of parameters in the command line
;             CY = 1 -> The specified parameter does not exist
;                       B undefined, buffer unmodified
;             CY = 0 -> B = Parameter length, not including the tailing 0
;                       Parameter extracted to DE, finished with a 0 byte
;                       DE preserved

EXTPAR:	or	a	;Terminates with error if A = 0
	scf
	ret	z

	ld	b,a
	ld	a,(#80)	;Terminates with error if
	or	a	;there are no parameters
	scf
	ret	z
	ld	a,b

	push	hl,de,ix
	ld	ix,0	;IXl: Number of parameter
	ld	ixh,a	;IXh: Parameter to be extracted
	ld	hl,#81

	;* Scans the command line and counts parameters

PASASPC:	ld	a,(hl)	;Skips spaces until a parameter
	or	a	;is found
	jr	z,ENDPNUM
	cp	" "
	inc	hl
	jri	PASASPC

	inc	ix	;Increases number of parameters
PASAPAR:	ld	a,(hl)	;Walks through the parameter
	or	a
	jr	z,ENDPNUM
	cp	" "
	inc	hl
	jri	PASASPC
	jr	PASAPAR

	;* Here we know already how many parameters are available

ENDPNUM:	ld	a,ixh	;Error if the parameter to extract
	cp	ixl	;is greater than the total number of
	jrmy	EXTPERR	;parameters available

	ld	hl,#81
	ld	b,1	;B = current parameter
PASAP2:	ld	a,(hl)	;Skips spaces until the next
	cp	" "	;parameter is found
	inc	hl
	jri	PASAP2

	ld	a,ixh	;If it is the parameter we are
	cp	b	;searching for, we extract it,
	jri	PUTINDE0	;else...

	inc	B
PASAP3:	ld	a,(hl)	;...we skip it and return to PASAP2
	cp	" "
	inc	hl
	jrni	PASAP3
	jr	PASAP2

	;* Parameter is located, now copy it to the user buffer

PUTINDE0:	ld	b,0
	dec	hl
PUTINDE:	inc	b
	ld	a,(hl)
	cp	" "
	jri	ENDPUT
	or	a
	jr	z,ENDPUT
	ld	(de),a	;Paramete is copied to (DE)
	inc	de
	inc	hl
	jr	PUTINDE

ENDPUT:	xor	a
	ld	(de),a
	dec	b

	ld	a,ixl
	or	a
	jr	FINEXTP
EXTPERR:	scf
FINEXTP:	pop	ix,de,hl
	ret


;--- Termination routines
;    TERM_R restores TPA in page 2 before terminating,
;    TERM_NO_R just terminates

TERM_R:	ld	a,(#F343)
	ld	h,#80
	call	ENASLT
	ld	a,(TPA_SEG2)
	call	PUT_P2

TERM_NO_R:	ld	bc,#0062
	jp	5


;--- Checksum calculation routine
;    Taken from CPC/IP

; Compute checksum
;
; On entry:
;	IX -> block to checksum
;	BC = number of halfwords to checksum
;
; On exit:
;	DE = checksum + 1
;	Z set if DE = 0 (i.e. checksum good)
;	A, BC and other flags corrupt

CALC_CHKSUM:	ld	de,0

	push	hl
	ex	de,hl
	push	ix
	or	a
	push	af

CALC_CHKLOOP:
	pop	af	; 3N
	ld	e,(ix + 0)	; 5N
	ld	d,(ix + 1)	; 5N
	adc	hl,de	; 4N
	push	af	; 3N
	inc	ix	; 3N
	inc	ix	; 3N
	dec	bc	; 2N
	ld	a,b	; 1N
	or	c	; 1N
	jr	nz,CALC_CHKLOOP	; 3/2N -> 33N per halfword

	pop	af
	ld	de,1
	adc	hl,de
	ex	de,hl

	pop	ix
	pop	hl

	ret


;--- DOS mapper support routines

ALL_SEG:	ds	3
FRE_SEG:	ds	3
RD_SEG:	ds	3
WR_SEG:	ds	3
CAL_SEG:	ds	3
CALLS:	ds	3
PUT_PH:	ds	3
GET_PH:	ds	3
PUT_P0:	ds	3
GET_P0:	ds	3
PUT_P1:	ds	3
GET_P1:	ds	3
PUT_P2:	ds	3
GET_P2:	ds	3
PUT_P3:	ds	3
GET_P3:	ds	3


;--- NAME: NUMTOASC
;      Converts a 16 bit number into an ASCII string
;    INPUT:      DE = Number to convert
;                HL = Buffer to put the generated ASCII string
;                B  = Total number of characters of the string
;                     not including any termination character
;                C  = Padding character
;                     The generated string is right justified,
;                     and the remaining space at the left is padded
;                     with the character indicated in C.
;                     If the generated string length is greater than
;                     the value specified in B, this value is ignored
;                     and the string length is the one needed for
;                     all the digits of the number.
;                     To compute length, termination character "$" or 00
;                     is not counted.
;                 A = &B ZPRFFTTT
;                     TTT = Format of the generated string number:
;                            0: decimal
;                            1: hexadecimal
;                            2: hexadecimal, starting with "&H"
;                            3: hexadecimal, starting with "#"
;                            4: hexadecimal, finished with "H"
;                            5: binary
;                            6: binary, starting with "&B"
;                            7: binary, finishing with "B"
;                     R   = Range of the input number:
;                            0: 0..65535 (unsigned integer)
;                            1: -32768..32767 (twos complement integer)
;                               If the output format is binary,
;                               the number is assumed to be a 8 bit integer
;                               in the range 0.255 (unsigned).
;                               That is, bit R and register D are ignored.
;                     FF  = How the string must finish:
;                            0: No special finish
;                            1: Add a "$" character at the end
;                            2: Add a 00 character at the end
;                            3: Set to 1 the bit 7 of the last character
;                     P   = "+" sign:
;                            0: Do not add a "+" sign to positive numbers
;                            1: Add a "+" sign to positive numbers
;                     Z   = Left zeros:
;                            0: Remove left zeros
;                            1: Do not remove left zeros
;    OUTPUT:    String generated in (HL)
;               B = Length of the string, not including the padding
;               C = Length of the string, including the padding
;                   Tailing "$" or 00 are not counted for the length
;               All other registers are preserved

NUMTOASC:	push	af,ix,de,hl
	ld	ix,WorkNTOA
	push	af,af
	and	%00000111
	ld	(ix+0),a	;Type
	pop	af
	and	%00011000
	rrca
	rrca
	rrca
	ld	(ix+1),a	;Finishing
	pop	af
	and	%11100000
	rlca
	rlca
	rlca
	ld	(ix+6),a	;Flags: Z(zero), P(+ sign), R(range)
	ld	(ix+2),b	;Number of final characters
	ld	(ix+3),c	;Padding character
	xor	a
	ld	(ix+4),a	;Total length
	ld	(ix+5),a	;Number length
	ld	a,10
	ld	(ix+7),a	;Divisor = 10
	ld	(ix+13),l	;User buffer
	ld	(ix+14),h
	ld	hl,BufNTOA
	ld	(ix+10),l	;Internal buffer
	ld	(ix+11),h

ChkTipo:	ld	a,(ix+0)	;Set divisor to 2 or 16,
	or	a	;or leave it to 10
	jr	z,ChkBoH
	cp	5
	jp	nc,EsBin
EsHexa:	ld	a,16
	jr	GTipo
EsBin:	ld	a,2
	ld	d,0
	res	0,(ix+6)	;If binary, range is 0-255
GTipo:	ld	(ix+7),a

ChkBoH:	ld	a,(ix+0)	;Checks if a final "H" or "B"
	cp	7	;is desired
	jp	z,PonB
	cp	4
	jr	nz,ChkTip2
PonH:	ld	a,"H"
	jr	PonHoB
PonB:	ld	a,"B"
PonHoB:	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)

ChkTip2:	ld	a,d	;If the number is 0, never add sign
	or	e
	jr	z,NoSgn
	bit	0,(ix+6)	;Checks range
	jr	z,SgnPos
ChkSgn:	bit	7,d
	jr	z,SgnPos
SgnNeg:	push	hl	;Negates number
	ld	hl,0	;Sign=0:no sign; 1:+; 2:-
	xor	a
	sbc	hl,de
	ex	de,hl
	pop	hl
	ld	a,2
	jr	FinSgn
SgnPos:	bit	1,(ix+6)
	jr	z,NoSgn
	ld	a,1
	jr	FinSgn
NoSgn:	xor	a
FinSgn:	ld	(ix+12),a

ChkDoH:	ld	b,4
	xor	a
	cp	(ix+0)
	jp	z,EsDec
	ld	a,4
	cp	(ix+0)
	jp	nc,EsHexa2
EsBin2:	ld	b,8
	jr	EsHexa2
EsDec:	ld	b,5

EsHexa2:	push	de
Divide:	push	bc,hl	;DE/(IX+7)=DE, remaining A
	ld	a,d
	ld	c,e
	ld	d,0
	ld	e,(ix+7)
	ld	hl,0
	ld	b,16
BucDiv:	rl	c
	rla
	adc	hl,hl
	sbc	hl,de
	jr	nc,$+3
	add	hl,de
	ccf
	djnz	BucDiv
	rl	c
	rla
	ld	d,a
	ld	e,c
	ld	a,l
	pop	hl,bc

ChkRest9:	cp	10	;Converts the remaining
	jp	nc,EsMay9	;to a character
EsMen9:	add	a,"0"
	jr	PonEnBuf
EsMay9:	sub	10
	add	a,"A"

PonEnBuf:	ld	(hl),a	;Puts character in the buffer
	inc	hl
	inc	(ix+4)
	inc	(ix+5)
	djnz	Divide
	pop	de

ChkECros:	bit	2,(ix+6)	;Cchecks if zeros must be removed
	jr	nz,ChkAmp
	dec	hl
	ld	b,(ix+5)
	dec	b	;B=num. of digits to check
Chk1Cro:	ld	a,(hl)
	cp	"0"
	jr	nz,FinECeros
	dec	hl
	dec	(ix+4)
	dec	(ix+5)
	djnz	Chk1Cro
FinECeros:	inc	hl

ChkAmp:	ld	a,(ix+0)	;Puts "#", "&H" or "&B" if necessary
	cp	2
	jr	z,PonAmpH
	cp	3
	jr	z,PonAlm
	cp	6
	jr	nz,PonSgn
PonAmpB:	ld	a,"B"
	jr	PonAmpHB
PonAlm:	ld	a,"#"
	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)
	jr	PonSgn
PonAmpH:	ld	a,"H"
PonAmpHB:	ld	(hl),a
	inc	hl
	ld	a,"&"
	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+4)
	inc	(ix+5)
	inc	(ix+5)

PonSgn:	ld	a,(ix+12)	;Puts sign
	or	a
	jr	z,ChkLon
SgnTipo:	cp	1
	jr	nz,PonNeg
PonPos:	ld	a,"+"
	jr	PonPoN
	jr	ChkLon
PonNeg:	ld	a,"-"
PonPoN	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)

ChkLon:	ld	a,(ix+2)	;Puts padding if necessary
	cp	(ix+4)
	jp	c,Invert
	jr	z,Invert
PonCars:	sub	(ix+4)
	ld	b,a
	ld	a,(ix+3)
Pon1Car:	ld	(hl),a
	inc	hl
	inc	(ix+4)
	djnz	Pon1Car

Invert:	ld	l,(ix+10)
	ld	h,(ix+11)
	xor	a	;Inverts the string
	push	hl
	ld	(ix+8),a
	ld	a,(ix+4)
	dec	a
	ld	e,a
	ld	d,0
	add	hl,de
	ex	de,hl
	pop	hl	;HL=initial buffer, DE=final buffer
	ld	a,(ix+4)
	srl	a
	ld	b,a
BucInv:	push	bc
	ld	a,(de)
	ld	b,(hl)
	ex	de,hl
	ld	(de),a
	ld	(hl),b
	ex	de,hl
	inc	hl
	dec	de
	pop	bc
	ld	a,b	;*** This part was missing on the
	or	a	;*** original routine
	jr	z,ToBufUs	;***
	djnz	BucInv
ToBufUs:	ld	l,(ix+10)
	ld	h,(ix+11)
	ld	e,(ix+13)
	ld	d,(ix+14)
	ld	c,(ix+4)
	ld	b,0
	ldir
	ex	de,hl

ChkFin1:	ld	a,(ix+1)	;Checks if "$" or 00 finishing is desired
	and	%00000111
	or	a
	jr	z,Fin
	cp	1
	jr	z,PonDolar
	cp	2
	jr	z,PonChr0

PonBit7:	dec	hl
	ld	a,(hl)
	or	%10000000
	ld	(hl),a
	jr	Fin

PonChr0:	xor	a
	jr	PonDo0
PonDolar:	ld	a,"$"
PonDo0:	ld	(hl),a
	inc	(ix+4)

Fin:	ld	b,(ix+5)
	ld	c,(ix+4)
	pop	hl,de,ix,af
	ret

WorkNTOA:	defs	16
BufNTOA:	ds	10


;***************************
;***                     ***
;***   DATA, VARIABLES   ***
;***                     ***
;***************************

;--- Variables

INS_SLOT:	db	0	;InterNestor Suite slot
INS_SEG2:	db	0	;Level 2 module physical segment
INS_SEG3:	db	0	;Level 3 module physical segment
ICMP_IN_QUEUE:	ds	3	;Input queue pointer
PROT_OUT_QUEUE:	ds	3	;Output queue pointer
IP_LOCAL:	ds	4	;Local IP address (obtained but not used)
IP_REMOTE:	ds	4	;Destination IP address
SEQ:	dw	0	;ICMP current sequence number
TPA_SEG2:	db	0	;TPa segment for page 2

;--- Text strings

PRESEN_S:	db	13,10,"NestorPing 1.0",13,10
	db	"By Konami Man, 12-2002",13,10,10,"$"
INFO_S:	db	"Use: NPING <host name>|<IP address>",13,10,"$"
NONMAN_S:	db	"ERROR: NestorMan not installed",13,10,"$"
BADNMAN_S:	db	"ERROR: Invalid NestorMan version!",13,10,"$"
NEEDNMAN_S:	db	"NestorMan version 1.21 or higher is needed.",13,10,"$"
NOINS_S:	db	"ERROR: InterNestor suite is not installed",13,10,"$"
NOCON_S:	db	"ERROR: No PPP opened connection currently",13,10,"$"
PAUSED_S:	db	"ERROR: InterNestor Suite is paused - do INSINS R first",13,10,"$"
PRESS_S:	db	"*** Press ENTER to send additional echo requests",13,10
	db	"*** Press any other key to exit",13,10,10,"$"
SENT_S:	db	"- Sent echo request with sequence number "
SEQS_S:	db	"     ",13,10,"$"
RCV_S:	db	"! Received echo reply with sequence number "
SEQR_S:	db	"     $"
ANDTTL_S:	db	" and TTL="
TTL_S:	db	"     ",13,10,"$"
QERR1_S:	equ	NOCON_S
QERR4_S:	db	"ERROR: No DNS addresses available - can't resolve host name",13,10,"$"
QERRX_S:	db	"Unknown ERROR when querying DNS",13,10,"$"
ERROR_S:	db	"ERROR",13,10,"*** $"
RESOLVING_S:	db	"Resolving host name... $"
OK_S:	db	"OK!",13,10,10,"$"

ERRCODE_T:	db	0,"DNS error 0 (ooops, this is an INS failure!)$"
	db	1,"Query format error$"
	db	2,"Server failure$"
	db	3,"Name error$"
	db	4,"Query type not implemented$"
	db	5,"Query refused$"
	db	6,"DNS error 6$"
	db	7,"DNS error 7$"
	db	8,"DNS error 8$"
	db	9,"DNS error 9$"
	db	10,"DNS error 10$"
	db	11,"DNS error 11$"
	db	12,"DNS error 12$"
	db	13,"DNS error 13$"
	db	14,"DNS error 14$"
	db	15,"DNS error 15$"
	db	16,"Can't get a reply from DNS$"
	db	17,"Operation timeout expired$"
	db	18,"Query aborted$"
	db	19,"Connection lost$"
	db	20,"DNS did not give neither a reply nor a pointer to another DNS$"
	db	21,"Answer is truncated$"
	db	0
UNKERR_S:	db	"Unknown error code$"

;--- Datagram to be sent (ICMP echo request).
;    Note that the size of the ICMP message (data between ICMP_START
;    and ICMP_END) must be an even number (for checksum calculation).

ECHO_START:	;

	;* IP pseudo-header

DESTIN_AD:	db	0,0,0,0	;Destination address
	db	1	;Protocol=ICMP
	db	4,255	;TTL=255
	db	0	;End of pseudo-header mark

	;* ICMP message

ICMP_START:	db	8	;Type=echo request
	db	0	;Code=0
ICMP_CHKSUM:	db	0,0	;ICMP checksum
ICMP_ID:	db	0,0	;ICMP identifier (always 0)
ICMP_SEQ:	db	0,0	;ICMP sequence number
		db	"Echo request from InterNestor Suite!"
ICMP_END:	;
ECHO_END:	db	0

;--- Buffer for parameter and datagram extraction

	db	0
BUFER:	;
HOST_NAME:	equ	BUFER+256
