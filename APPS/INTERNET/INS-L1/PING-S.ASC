	;--- Ping para InterNestor Lite 1.02
	;    Por Konami Man, 12-2004
	;
	;    Uso: PING <dir. ip>
	;    Solo envia automaticamente un paquete, pueden enviarse
	;    mas pulsando cualquier tecla.


;******************************
;***                        ***
;***   MACROS, CONSTANTES   ***
;***                        ***
;******************************

BUFER:	equ	#3000	;Bufer para obtener parametros

	;--- Macro para imprimir una cadena

print:	macro	@d
	ld	de,@d
	ld	c,_STROUT
	call	5
	endm

	;--- Macro para llamar a una funcion de InterNestor Lite.
	;
	;    Bajo DOS 1, tras una llamada a cualquier funcion del DOS
	;    el sistema restaura el segmento de TPA en la pagina 1,
	;    cosa que no ocurre bajo DOS 2.
	;
	;    Usando esta macro nos aseguramos de que las llamadas
	;    a INL siempre se efectuan correctamente y de que siempre
	;    tenemos TPA en la pagina 1.

inl:	macro	@d
	push	af	;Conecta segmento de INL en pag. 1
	ld	a,(INL_SEG1)
	call	PUT_P1
	pop	af

	call	@d	;Llama a la funcion de INL

	push	af	;Restaura TPA en pag. 1
	ld	a,2
	call	PUT_P1
	pop	af
	endm

	;--- Funciones del DOS

_TERM0:	equ	#00
_DIRIO:	equ	#06
_STROUT:	equ	#09

	;--- Llamadas a InterNestor Lite

IP_STRING:	equ	#4036	;Convierte una IP en una cadena
SEND_ECHO:	equ	#4051	;Envia un paquete de eco
RCV_ECHO:	equ	#4054	;Recibe una respuesta de eco
DNS_Q:	equ	#405D	;Efectua peticion DNS
DNS_S:	equ	#4060	;Obtiene respuesta DNS
WAIT_INT:	equ	#4081	;Espera a la siguiente interrupcion del reloj


;******************************
;***                        ***
;***   PROGRAMA PRINCIPAL   ***
;***                        ***
;******************************

	org	#100

;----------------------------------
;---  Comprobaciones iniciales  ---
;----------------------------------

	;--- Comprueba si hay parametros. Si no, muestra
	;    ayuda y termina

	print	PRESEN_S

	ld	a,1	;Intenta extraer primer parametro
	ld	de,BUFER
	call	EXTPAR
	jr	nc,HAYPARS

TERMINFO:	print	INFO_S
	jp	TERMOK2

HAYPARS:	;

	;--- Comprueba que InterNestor Lite este instalado, si no
	;    devuelve un error y termina

	xor	a
	ld	de,#2203
	call	#FFCA
	or	a
	jr	nz,OKINS

	print	NOINS_S
	jp	TERMOK2
OKINS:	;

	ld	a,b
	ld	(INL_SEG1),a
	;ld      a,c                    ;--- En este programa no necesitamos
	;ld      (INL_SEG2),a           ;--- esta informacion, nos basta
	;ld      (INL_P3DIR),hl         ;--- el numero del segmento de codigo

	;--- Obtiene GET_P1 y PUT_P1 a partir
	;    de la zona de trabajo de INL en pagina 3
	;    (tienen offset 15)

	ld	bc,15
	add	hl,bc
	ld	de,PUT_P1
	ld	bc,6
	ldir

	;--- Conecta el segmento de InterNestor Lite en pagina 1
	;    (No es necesario porque usamos la macro "inl")

	;ld	a,(INL_SEG1)
	;call	PUT_P1

	;--- Obtiene el nombre del host desde la linea de parametros
	;    y lo resuelve, guardando el resultado en IP_REMOTE

	ld	a,1
	ld	de,BUFER
	call	EXTPAR

	print	RESOLVING_S

	ld	hl,BUFER
	xor	a
	inl	DNS_Q	;Efectua peticion DNS

	ld	b,a
	ld	ix,DNSQERRS_T
	jr	c,DNSQR_ERR	;DNS_Q ha devuelto error?

	;* Espera a que la consulta termine

DNSQ_WAIT:	inl	WAIT_INT
	ld	a,1
	inl	DNS_S	;Obtiene estado actual de la consulta

	;* Error?

	ld	b,a
	cp	3
	ld	ix,DNSRERRS_T
	jr	z,DNSQR_ERR

	;* La consulta continua? Vuelve al bucle de espera

	cp	2
	jr	nz,DNSQ_WAIT	;Aun no ha terminado la consulta?

	;* Consulta finalizada? Muestra resultado y sigue

	ld	(IP_REMOTE),hl	;Guarda resultado
	ld	(IP_REMOTE+2),de	;devuelto en L.H.E.D

	ld	ix,RESOLVIP_S	;Muestra resultado
	ld	a,"$"
	inl	IP_STRING

	print	RESOLVOK_S
	print	TWO_NL_S
	jp	RESOLV_END	;Sigue

	;- Rutina de error comun para DNS_Q y DNS_R
	;  Entrada: IX=Tabla de errores, B=Codigo de error

DNSQR_ERR:	push	ix,bc

	;* Imprime "ERROR <codigo>: "

	ld	ix,RESOLVERRC_S
	call	BYTE2ASC
	ld	(ix),":"
	ld	(ix+1)," "
	ld	(ix+2),"$"
	print	RESOLVERR_S

	;* Obtiene la cadena de error, la imprime, y termina

	pop	bc,de
	call	GET_STRING
	ld	c,_STROUT
	call	5

	jp	TERMOK
RESOLV_END:	;

	;--- Limpia los paquetes de respuesta antiguos, si los hay

CLEANOLD:	inl	RCV_ECHO
	jr	nc,CLEANOLD

	;--- Envia el primer paquete de eco

	print	PRESS_S
	call	SEND_PAQ
	jr	KEYOK

	;--- Espera a que se pulse una tecla, o a que llegue
	;    un paquete

KEY:	inl	WAIT_INT
	ld	e,#FF
	ld	c,_DIRIO
	call	5
	or	a
	jr	z,KEYOK	;No se ha pulsado nada
	cp	13
	jp	nz,TERMOK	;Otra tecla: termina
	call	SEND_PAQ	;Enter: envia un paquete
KEYOK:	;

	;Obtiene un paquete de respuesta, si no hay repite el bucle

	inl	RCV_ECHO
	jr	c,KEY

	;--- Paquete recibido: muestra sus datos

	push	af,iy
	pop	de	;Compone numero secuencia
	ld	hl,SEQR_S
	ld	b,1
	ld	a,%1000
	call	NUMTOASC

	pop	af
	ld	e,a	;Compone TTL
	ld	d,0
	ld	hl,TTL_S
	ld	b,1
	xor	a
	call	NUMTOASC

	print	RCV_S	;Imprime informacion
	print	ANDTTL_S
	jp	KEY	;Vuelve al bucle principal

	;--- Subrutina de envio de un paquete

SEND_PAQ:	;push    af
	;call    _SEND_PAQ
	;pop     af
	;ret

	;* Prepara paquete

_SEND_PAQ:	ld	hl,(IP_REMOTE)
	ld	de,(IP_REMOTE+2)
	ld	ix,0
	ld	iy,(SEQ)	;Numero de secuencia = anterior+1
	inc	iy
	ld	(SEQ),iy
	ld	bc,-1	;Tamanyo datos por defecto
	ld	a,255	;TTL = 255

	inl	SEND_ECHO
	jr	nc,SEND_PAQ2

	pop	af,af,af	;Si hay error, solo puede ser
	print	NOCON_S	;que se ha perdido la conexion a la red:
	jp	TERMOK	;En ese caso termina

SEND_PAQ2:	;

	;* Muestra mensaje de envio con el numero de secuencia usado

	ld	de,(SEQ)
	ld	hl,SEQS_S
	ld	b,1
	xor	a
	call	NUMTOASC
	print	SENT_S

	ret


;******************************
;***                        ***
;***   RUTINAS AUXILIARES   ***
;***                        ***
;******************************

;--- NOMBRE: COMP
;      Comparacion de HL con DE (16 bits sin signo)
;    ENTRADA:   HL, DE = numeros a comparar
;    SALIDA:     C, NZ si HL > DE
;                C,  Z si HL = DE
;               NC, NZ si HL < DE
;    REGISTROS: -

COMP:	call	_COMP16
	ccf
	ret

_COMP16:	ld	a,h
	sub	d
	ret	nz
	ld	a,l
	sub	e
	ret



;--- NOMBRE: EXTPAR
;      Extraccion de un parametro de la linea de comando
;    ENTRADA:   A  = Parametro a extraer (el primero es el 1)
;               DE = Buffer para dejar el parametro
;    SALIDA:    A  = Numero de parametros
;               CY = 1 -> No existe ese parametro
;                         B indefinido, buffer inalterado
;               CY = 0 -> B = Longitud del parametro (no incluye el 0)
;                         Parametro a partir de DE, acabado en 0
;    REGISTROS: -
;    LLAMADAS:  -
;    VARIABLES: Macros JR

EXTPAR:	or	a	;Volvemos con error si A = 0
	scf
	ret	z

	ld	b,a
	ld	a,(#80)	;Volvemos con error si no hay parametros  
	or	a
	scf
	ret	z
	ld	a,b

	push	af,hl
	ld	a,(#80)
	ld	c,a	;Ponemos un 0 al final de la linea
	ld	b,0	;de comandos (requerido en DOS 1)
	ld	hl,#81
	add	hl,bc
	ld	(hl),0
	pop	hl,af

	push	hl,de,ix
	ld	ix,0	;IXl: Numero de parametros    
	ld	ixh,a	;IXh: Parametro a extraer    
	ld	hl,#81

PASASPC:	ld	a,(hl)	;Vamos pasando espacios    
	or	a
	jr	z,ENDPNUM
	cp	" "
	inc	hl
	jr	z,PASASPC

	inc	ix
PASAPAR:	ld	a,(hl)	;Vamos pasando el parametro    
	or	a
	jr	z,ENDPNUM
	cp	" "
	inc	hl
	jr	z,PASASPC
	jr	PASAPAR

ENDPNUM:	ld	a,ixh	;Error si se el parametro a extraer    
	dec	a
	cp	ixl	;es mayor que el numero de parametros    
	jr	nc,EXTPERR	;existentes

	ld	hl,#81
	ld	b,1	;B = parametro actual    
PASAP2:	ld	a,(hl)	;Pasamos espacios hasta dar    
	cp	" "	;con el siguiente parametro    
	inc	hl
	jr	z,PASAP2

	ld	a,ixh	;Si es el que buscamos lo extraemos.    
	cp	B	;Si no ...    
	jr	z,PUTINDE0

	inc	B
PASAP3:	ld	a,(hl)	;... lo pasamos y volvemos a PAPAP2    
	cp	" "
	inc	hl
	jr	nz,PASAP3
	jr	PASAP2

PUTINDE0:	ld	b,0
	dec	hl
PUTINDE:	inc	b
	ld	a,(hl)
	cp	" "
	jr	z,ENDPUT
	or	a
	jr	z,ENDPUT
	ld	(de),a	;Ponemos el parametro a partir de (DE)    
	inc	de
	inc	hl
	jr	PUTINDE

ENDPUT:	xor	a
	ld	(de),a
	dec	b

	ld	a,ixl
	or	a
	jr	FINEXTP
EXTPERR:	scf
FINEXTP:	pop	ix,de,hl
	ret

;--- Terminacion del programa

TERMOK:	ld	a,2
	call	PUT_P1

	;* Salta aqui si aun no ha obtenido PUT_P1

TERMOK2:	ld	c,_TERM0
	jp	5


;--- Rutinas de gestion de segmentos para la pagina 1.
;    Si se obtienen desde la zona de trabajo de INL en pagina 3,
;    no hay que preocuparse de si estamos en DOS 1 o en DOS 2.

PUT_P1:	ds	3
GET_P1:	ds	3


;--- NOMBRE: NUMTOASC
;      Conversion de un entero de 16 bits a una cadena de caracteres
;    ENTRADA:    DE = Numero a convertir
;                HL = Buffer para depositar la cadena
;                B  = Numero total de caracteres de la cadena
;                     sin incluir signos de terminacion
;                C  = Caracter de relleno
;                     El numero se justifica a la derecha, y los
;                     espacios sobrantes se rellenan con el caracter (C).
;                     Si el numero resultante ocupa mas caracteres que
;                     los indicados en B, este registro es ignorado
;                     y la cadena ocupa los caracteres necesarios.
;                     No se cuenta el caracter de terminacion, "$" o 00,
;                     a efectos de longitud.
;                 A = &B ZPRFFTTT
;                     TTT = Formato del numero resultante
;                            0: decimal
;                            1: hexdecimal
;                            2: hexadecimal, comenzando con "&H"
;                            3: hexadecimal, comenzando con "#"
;                            4: hexadecimal, acabado en "H"
;                            5: binario
;                            6: binario, comenzando con "&B"
;                            7: binario, acabado en "B"
;                     R   = Rango del numero
;                            0: 0..65535 (entero sin signo)
;                            1: -32768..32767 (entero en complemento a dos)
;                               Si el formato de salida es binario,
;                               el numero se interpreta como entero de 8 bits
;                               y el rango es 0..255. Es decir, el bit R
;                               y el registro D son ignorados.
;                     FF  = Tipo de finalizacion de la cadena
;                            0: Sin finalizacion especial
;                            1: Adicion de un caracter "$"
;                            2: Adicion de un caracter 00
;                            3: Puesta a 1 del 7o bit del ultimo caracter
;                     P   = Signo "+"
;                            0: No agnadir un signo "+" a los numeros positivos
;                            1: Agnadir un signo "+" a los numeros positivos
;                     Z   = Ceros sobrantes
;                            0: Quitar ceros a la izquierda
;                            1: No quitar ceros a la izquierda
;    SALIDA:    Cadena a partir de (HL)
;               B = Numero de caracteres de la cadena que forman
;                   el numero, incluyendo el signo y el indicador
;                   de tipo si son generados
;               C = Numero de caracteres totales de la cadena
;                   sin contar el "$" o el 00 si son generados
;    REGISTROS: -
;    LLAMADAS:  -
;    VARIABLES: -

NUMTOASC:	push	af,ix,de,hl
	ld	ix,WorkNTOA
	push	af,af
	and	%00000111
	ld	(ix+0),a	;Tipo 
	pop	af
	and	%00011000
	rrca
	rrca
	rrca
	ld	(ix+1),a	;Fin 
	pop	af
	and	%11100000
	rlca
	rlca
	rlca
	ld	(ix+6),a	;Banderas: Z(cero), P(signo +), R(rango) 
	ld	(ix+2),b	;No. caracteres finales 
	ld	(ix+3),c	;Caracter de relleno 
	xor	a
	ld	(ix+4),a	;Longitud total 
	ld	(ix+5),a	;Longitud del numero 
	ld	a,10
	ld	(ix+7),a	;Divisor a 10 
	ld	(ix+13),l	;Buffer pasado por el usuario 
	ld	(ix+14),h
	ld	hl,BufNTOA
	ld	(ix+10),l	;Buffer de la rutina 
	ld	(ix+11),h

ChkTipo:	ld	a,(ix+0)	;Divisor a 2 o a 16, o dejar a 10 
	or	a
	jr	z,ChkBoH
	cp	5
	jp	nc,EsBin
EsHexa:	ld	a,16
	jr	GTipo
EsBin:	ld	a,2
	ld	d,0
	res	0,(ix+6)	;Si es binario esta entre 0 y 255 
GTipo:	ld	(ix+7),a

ChkBoH:	ld	a,(ix+0)	;Comprueba si hay que poner "H" o "B" 
	cp	7	;al final 
	jp	z,PonB
	cp	4
	jr	nz,ChkTip2
PonH:	ld	a,"H"
	jr	PonHoB
PonB:	ld	a,"B"
PonHoB:	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)

ChkTip2:	ld	a,d	;Si el numero es 0 nunca se pone signo 
	or	e
	jr	z,NoSgn
	bit	0,(ix+6)	;Comprueba rango   
	jr	z,SgnPos
ChkSgn:	bit	7,d
	jr	z,SgnPos
SgnNeg:	push	hl	;Niega el numero 
	ld	hl,0	;Signo=0:sin signo; 1:+; 2:-   
	xor	a
	sbc	hl,de
	ex	de,hl
	pop	hl
	ld	a,2
	jr	FinSgn
SgnPos:	bit	1,(ix+6)
	jr	z,NoSgn
	ld	a,1
	jr	FinSgn
NoSgn:	xor	a
FinSgn:	ld	(ix+12),a

ChkDoH:	ld	b,4
	xor	a
	cp	(ix+0)
	jp	z,EsDec
	ld	a,4
	cp	(ix+0)
	jp	nc,EsHexa2
EsBin2:	ld	b,8
	jr	EsHexa2
EsDec:	ld	b,5

EsHexa2:	push	de
Divide:	push	bc,hl	;DE/(IX+7)=DE, resto A 
	ld	a,d
	ld	c,e
	ld	d,0
	ld	e,(ix+7)
	ld	hl,0
	ld	b,16
BucDiv:	rl	c
	rla
	adc	hl,hl
	sbc	hl,de
	jr	nc,$+3
	add	hl,de
	ccf
	djnz	BucDiv
	rl	c
	rla
	ld	d,a
	ld	e,c
	ld	a,l
	pop	hl,bc

ChkRest9:	cp	10	;Convierte el resto en caracter 
	jp	nc,EsMay9
EsMen9:	add	a,"0"
	jr	PonEnBuf
EsMay9:	sub	10
	add	a,"A"

PonEnBuf:	ld	(hl),a	;Pone caracter en buffer 
	inc	hl
	inc	(ix+4)
	inc	(ix+5)
	djnz	Divide
	pop	de

ChkECros:	bit	2,(ix+6)	;Comprueba si hay que eliminar ceros 
	jr	nz,ChkAmp
	dec	hl
	ld	b,(ix+5)
	dec	b	;B=no. de digitos a comprobar 
Chk1Cro:	ld	a,(hl)
	cp	"0"
	jr	nz,FinECeros
	dec	hl
	dec	(ix+4)
	dec	(ix+5)
	djnz	Chk1Cro
FinECeros:	inc	hl

ChkAmp:	ld	a,(ix+0)	;Coloca "#", "&H" o "&B" si es necesario 
	cp	2
	jr	z,PonAmpH
	cp	3
	jr	z,PonAlm
	cp	6
	jr	nz,PonSgn
PonAmpB:	ld	a,"B"
	jr	PonAmpHB
PonAlm:	ld	a,"#"
	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)
	jr	PonSgn
PonAmpH:	ld	a,"H"
PonAmpHB:	ld	(hl),a
	inc	hl
	ld	a,"&"
	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+4)
	inc	(ix+5)
	inc	(ix+5)

PonSgn:	ld	a,(ix+12)	;Coloca el signo 
	or	a
	jr	z,ChkLon
SgnTipo:	cp	1
	jr	nz,PonNeg
PonPos:	ld	a,"+"
	jr	PonPoN
	jr	ChkLon
PonNeg:	ld	a,"-"
PonPoN	ld	(hl),a
	inc	hl
	inc	(ix+4)
	inc	(ix+5)

ChkLon:	ld	a,(ix+2)	;Pone caracteres de relleno si necesario 
	cp	(ix+4)
	jp	c,Invert
	jr	z,Invert
PonCars:	sub	(ix+4)
	ld	b,a
	ld	a,(ix+3)
Pon1Car:	ld	(hl),a
	inc	hl
	inc	(ix+4)
	djnz	Pon1Car

Invert:	ld	l,(ix+10)
	ld	h,(ix+11)
	xor	a	;Invierte la cadena 
	push	hl
	ld	(ix+8),a
	ld	a,(ix+4)
	dec	a
	ld	e,a
	ld	d,0
	add	hl,de
	ex	de,hl
	pop	hl	;HL=buffer inicial, DE=buffer final 
	ld	a,(ix+4)
	srl	a
	ld	b,a
BucInv:	push	bc
	ld	a,(de)
	ld	b,(hl)
	ex	de,hl
	ld	(de),a
	ld	(hl),b
	ex	de,hl
	inc	hl
	dec	de
	pop	bc
	ld	a,b	;***
	or	a	;*** Faltaba esto!
	jr	z,ToBufUs	;***
	djnz	BucInv
ToBufUs:	ld	l,(ix+10)
	ld	h,(ix+11)
	ld	e,(ix+13)
	ld	d,(ix+14)
	ld	c,(ix+4)
	ld	b,0
	ldir
	ex	de,hl

ChkFin1:	ld	a,(ix+1)	;Comprueba si ha de acabar en "$" o en 0  
	and	%00000111
	or	a
	jr	z,Fin
	cp	1
	jr	z,PonDolar
	cp	2
	jr	z,PonChr0

PonBit7:	dec	hl
	ld	a,(hl)
	or	%10000000
	ld	(hl),a
	jr	Fin

PonChr0:	xor	a
	jr	PonDo0
PonDolar:	ld	a,"$"
PonDo0:	ld	(hl),a
	inc	(ix+4)

Fin:	ld	b,(ix+5)
	ld	c,(ix+4)
	pop	hl,de,ix,af
	ret

WorkNTOA:	defs	16
BufNTOA:	ds	10


;--- BYTE2ASC: Conversion del numero A en una cadena sin terminacion.
;    Deposita la cadena en (IX), y modifica IX para que apunte tras la cadena
;    Modifica: C

BYTE2ASC:	cp	10
	jr	c,B2A_1D
	cp	100
	jr	c,B2A_2D
	cp	200
	jr	c,B2A_1XX
	jr	B2A_2XX

	;--- Un digito

B2A_1D:	add	"0"
	ld	(ix),a
	inc	ix
	ret

	;--- Dos digitos

B2A_2D:	ld	c,"0"
B2A_2D2:	inc	c
	sub	10
	cp	10
	jr	nc,B2A_2D2

	ld	(ix),c
	inc	ix
	jr	B2A_1D

	;--- Entre 100 y 199

B2A_1XX:	ld	(ix),"1"
	sub	100
B2A_XXX:	inc	ix
	cp	10
	jr	nc,B2A_2D	;Si es 1XY con X>0
	ld	(ix),"0"	;Si es 10Y
	inc	ix
	jr	B2A_1D

	;--- Entre 200 y 255

B2A_2XX:	ld	(ix),"2"
	sub	200
	jr	B2A_XXX


;--- GET_STRING: Devuelve una cadena asociada a un numero, o "Unknown".
;    Entrada: DE = Puntero a la tabla de cadenas y numeros, con el formato:
;                  db num,"Cadena$"
;                  db num2,"Cadena2$"
;                  ...
;                  db 0
;             B = Numero asociado
;    Salida:  DE = Cadena

GET_STRING:	ld	a,(de)
	inc	de
	or	a	;No encontramos el codigo: mostramos "Unknown"
	jr	nz,LOOP_REA2
	ld	de,UNK_S
	ret

LOOP_REA2:	cp	b	;Coincide?
	ret	z

LOOP_REA3:	ld	a,(de)	;No: pasa al siguiente
	inc	de
	cp	"$"
	jr	nz,LOOP_REA3
	jr	GET_STRING

UNK_S:	db	"Unknown$"


;****************************
;***                      ***
;***   DATOS, VARIABLES   ***
;***                      ***
;****************************

INL_SEG1:	db	0
;INL_SEG2:       db      0      ;--- No necesarios
;INL_P3DIR:      dw      0      ;--- en este programa
IP_REMOTE:	ds	4	;Direccion IP del host
SEQ:	dw	0	;Ultimo numero de secuencia ICMP usado

;--- Cadenas

	;* Presentacion

PRESEN_S:	db	27,"x5"	;Desactiva el cursor
	db	13,10,"Ping for InterNestor Lite 1.02",13,10
	db	"By Konami Man, 12-2004",13,10,10,"$"
INFO_S:	db	"Use: PING <host name>",13,10,"$"

	;* Errores

NOINS_S:	db	"ERROR: InterNestor Lite is not installed",13,10,"$"
INVIP_S:	db	"ERROR: Invalid IP address. Must be xxx.xxx.xxx.xxx, with 0<=xxx<=255",13,10,"$"
NOCON_S:	db	"ERROR: No network connection",13,10,"$"

	;* Informacion

PRESS_S:	db	"*** Press ENTER to send additional echo requests",13,10
	db	"*** Press any other key to exit",13,10,10,"$"
SENT_S:	db	"- Sent echo request with sequence number "
SEQS_S:	db	"     ",13,10,"$"
RCV_S:	db	"! Received echo reply with sequence number "
SEQR_S:	db	"     $"
ANDTTL_S:	db	" and TTL="
TTL_S:	db	"     ",13,10,"$"

	;* Resolucion DNS

RESOLVING_S:	db	"Resolving host name... $"
RESOLVERR_S:	db	13,10,"ERROR "
RESOLVERRC_S:	ds	6	;Deja espacio para "<codigo>: $"
RESOLVOK_S:	db	"OK: "
RESOLVIP_S:	ds	16	;Espacio para "xxx.xxx.xxx.xxx$"
TWO_NL_S:	db	13,10,10,"$"

	;* Errores para DNS_Q

DNSQERRS_T:	db	1,"Not connected to Internet$"
	db	4,"No DNS servers available$"
	db	0

	;* Errores para DNS_R

DNSRERRS_T:	db	1,"Query format error$"
	db	2,"Server failure$"
	db	3,"Name error (this host name does not exist)$"
	db	4,"Query type not implemented by the server$"
	db	5,"Query refused by the server$"
	db	16,"Server(s) not responding to queries$"
	db	17,"Total operation timeout expired$"
	db	19,"Internet connection lost$"
	db	20,"Dead-end reply (not containing answers nor redirections)$"
	db	21,"Truncated reply$"
	db	0
