#Sample/template configuration file for PPPC.COM
#By Konami Man, 12-2001

#The general format of this file lines is:
#constant_name constant_value
#Lines starting with "#" or ";" are considered remarks and thus ignored.
#You can also add remarks at the end of normal lines.

#Below all the constants with their default values are listed.
#Remove the initial ";" and change the value for the constants
#you want to modify.

#There are three types of constant values:
#- Byte: value must be in the range 0-255
#- Word: value must be in the range 0-65535
#- Flag: value must be in the range 0-65535,
#  but any value other than 0 (flag OFF) is interpreted as 255 (flag ON)
#  When default value is ON, it is indicated as 1
#- IP: must be an IP address, xx.xx.xx.xx

#USER and PASSWORD are special constants, they must be strings of up to 
#255 characters.

#The constant description is the same included in the InterNestor Suite
#programmer's manual.

#Remember that except where otherwise stated, all timer values are 
#expressed in units of 1/50 seconds.

#--- Constants list starts here ---

;USER your_user_name
#Put here your user name for authentication.
#Usually, you only will need to set up USER and PASSWORD for connecting.
#You can also specify user name and password when opening the connection
#with "PPPC V user password" or "PPPC O user password".

;PASSWORD your_password
#Put here your password for authentication.
#Usually, you only will need to set up USER and PASSWORD for connecting.
#You can also specify user name and password when opening the connection
#with "PPPC V user password" or "PPPC O user password".

;MRU 1504
#Type: Word
#Maximum Receive Unit to be negotiated (the maximum packet size we want to 
#receive), stored with an excess of 4 for easier processing of received 
#HDLC frames. It may be automatically modified if the peer considers it is 
#too small and proposes us a bigger value via a Configure Nak packet, but 
#never over the absolute maximum packet size supported by INS, which is 
#2048 bytes. This constant should never be set up with a value under 
#576+4.

#Note that in the case of receiving fragmented IP datagrams, MRU value is 
#the maximum allowed size for the final reassembled datagram, and not only 
#for the #received fragments.

;ESC_I_TAB 0.0.0.0
#Type: 32 bit number, but must be specified as an IP address
#(for example 192.0.0.1 for &HC0000001)
#This is the table to be negotiated with the "Async-Map" option on LCP 
#configuration packets (the control characters we want to be received 
#escaped). Each bit corresponds to one control character, being the MSB of 
#byte 0 for character 0 and the LSB of byte 3 for character 31.

;AUTH_POLICY 3
#Type: Byte
#This constant indicates to the PPP how to act when an authentication 
#request is received from the peer. It may have one of the following 
#values:

#0: Refuse to authenticate (the peer will then probably close the 
#   connection)
#192: Accept to authenticate via PAP only
#194: Accept to authenticate via CHAP only
#3: Accept to authenticate via PAP or CHAP

;MAGIC_O_NEG 1
#Type: Flag
#Flag to indicate if a local magic number will be negotiated (1) or not 
#(0).

;ADDCMP_O_NEG 1
#Type: Flag
#Flag to indicate if the address and control field compression on outgoing 
#frames will be accepted for negotiation (1) or not (0).

;PROTCMP_O_NEG 1
#Type: Flag
#Flag to indicate if protocol field compression on outgoing frames will be 
#accepted for negotiation (1) or not (0).

;ADDCMP_I_NEG 1
#Type: Flag
#Flag to indicate if the address and control field compression on incoming 
#frames will be negotiated (1) or not (0).

;PROTCMP_I_NEG 1
#Type: Flag
#Flag to indicate if the protocol control field compression on incoming 
#frames will be negotiated (1) or not (0).

;MIN_MTU 576
#Type: Word
#Minimum acceptable value for the MRU negotiated by the peer. If it tries 
#to negotiate a smaller value, MIN_MTU will be proposed via a Configure Nak 
#packet.

;LOOPBACK_MAX 3
#Type: Byte
#Number of packets to be received with a magic number identical to ours, in 
#order to decide that we are in a loop-back condition and thus close the 
#connection.

;MAX_BADBYTES 100
#Type: Word
#Maximum nuber of bytes corresponding to invalid frames that may be 
#collected in one interrupt.

;RST_TIMER 170
#Type: Word
#Restart Timer initial value for the LCP automaton.

;TOTAL_TIMER 3000
#Type: Word
#Initial value for the total timer. This timer is started when a connection 
#open request is made, and is stopped when the connection reaches the 
#opened status (when PPP_NETSTAT returns 3). If it expires, the connection 
#is automatically closed.

;MAX_TERMINATE 2
#Type: Byte
#Initial value of Max-Terminate counter for LCP automaton.

;MAX_CONFIGURE 10
#Type: Byte
#Initial value of Max-Configure counter for LCP automaton.

;MAX_FAILURE 5
#Type: Byte
#Initial value of Max-Failure counter for LCP automaton.

;PAPREQ_TIMER 50
#Type: Byte
#Interval for sending PAP authentication messages until a reply (success or 
#failure) is received. When the variable PAPREQ_TIMER reaches this value, a 
#PAP authentication message is sent and the variable reset.

;ECHO_TIMER 250
#Type: Word
#Interval for sending LCP echo requests to the peer (if 0, echoes are never 
#sent). If ECHO_CLOSE_V echoes are sent without receiving a reply, the 
#connection is automatically closed. When the variable ECHO_TIMER reaches 
#this value, a LCP echo request is sent and the variable is reset.

;NEG_DNS_PRIM 1
#Type: Flag
#Flag to indicate if the IP address of primary DNS stored in DNS_PRIM will 
#be negotiated (1) or not (0, this means static configuration).

;NEG_DNS_SEC 1
#Type: Flag
#Flag to indicate if the IP address of secondary DNS stored in DNS_PRIM 
#will be negotiated (1) or not (0, this means static configuration).

;AUTO_CLOSE_AUTH 0
#Type: Flag
#Flag to indicate if the connection must be automatically closed when 
#authentication fails (1) or not (0).

;AUTO_CLOSE_TERM 1
#Type: Flag
#Flag to indicate if the connection must be automatically closed when a 
#Terminate Request packet is received (#FF) or not (0).

;IP_LOCAL 0.0.0.0
#Type: IP
#Local IP address to be negotiated via IPCP. Usually the default value 
#0.0.0.0 will be used, meaning "I don't have any IP address, so give me 
#one"; then, once an IP address is obtained, it is placed here.

;IP_REMOTE 0.0.0.0
#Type: IP
#IP address of the remote peer, obtained via IPCP negotiation.

;DNS_PRIM 0.0.0.0
#Type: IP
#Primary DNS IP address to be negotiated via IPCP. Usually the default 
#value 0.0.0.0 will be used, meaning "I don't know the IP address of any 
#DNS, so tell me one"; then, once an IP address is obtained, it is placed 
#here.

;DNS_SEC 0.0.0.0
#Type: IP
#Secondary DNS IP address to be negotiated via IPCP. Usually the default 
#value 0.0.0.0 will be used, meaning "I don't know the IP address of any 
#DNS, so tell me one"; then, once an IP address is obtained, it is placed 
#here.

;PASSIVE_OPEN 0
#Type: Flag
#This is a flag indicating if LCP must perform passive open (1) or not 
#(0). The "passive open" is an exclusive feature of NestorPPP and it is not 
#documented in RFC 1661, but it sees to work quite well: it consists on 
#waiting for an incoming Configure Request packet to arrive before sending 
#the own counterpart packets, instead of sending these packets as soon as 
#the automaton has received an "Up" and an "Open" event as stated in the 
#RFC. When using passive open, you can open the PPP connection even when 
#the modem dial-up has not been completed yet (try to do the same with an 
#active open and see the result).

;ECHO_CLOSE 3
#Type: Byte
#Number of unreplied LCP echo requests to send before automatically close 
#the connection. LCP echo request are sent at intervals indicated by 
#ECHO_CNT_V.

;MASK_METHOD 0
#Type: Byte
#Indicates how to obtain the subnet mask: static configuration/no subnet 
#use at all (0) or use of ICMP "Mask request/reply" mesages (1).

;SUBNET_MASK 0.0.0.0
#Type: IP
#Subnet mask. If MASK_METHOD is 0, the value set up by the user is kept. 
#If MASK_METHOD is 1, this constant is filled out when an ICMP "Mask 
#reply" message is received.

#Note that the mask is stored WITHOUT including the network mask portion. 
#For example if the local IP address is a class A address, and the subnet 
#mask is 255.240.0.0, then the value stored here will be 0.240.0.0. 
#However, in the case of static configuration the user may place here the 
#complete mask (net+subnet), and it will be automatically corrected when 
#the connection is opened and the local IP address learned (and therefore 
#the network mask calculated).

;ZERO_IP_VALID 0
#Type: Flag
#Flag to indicate if the addresses 0.0.0.0 or 0,<host> will be considered 
#as valid addresses when being the IP source address of an incoming IP 
#datagram (1) or not (0). An address is considered to be 0,<host> if it is 
#0.x.x.x.

;MASK_REP_AUTH 0
#Type: Flag
#Flag to indicate if this computer is authorized to send ICMP "Mask reply" 
#messages in response to incoming "Mask request" messages (1) or not (0).

;MASK_REQ_NUM 10
#Type: Byte
#Number of "Mask request" messages to send after a connection is open, if 
#MASK_METHOD=1. After sending this number of messages without receiving a 
#reply, NestorIP will give out in obtaining the subnet mask and will use 
#only the network mask.

;MASK_REQ_INT 150
#Type: Word
#Interval for sending "Mask request" messages after a connection is open, 
#if MASK_METHOD=1. The messages will be sent until a reply is received, or 
#until MASK_REQ_NUM messages are sent.

;FRAG_TIMEOUT 3000
#Type: Word
#Fragmented datagrams reassembly timeout. If a time of FRAG_TIMEOUT is 
#elapsed #after the receipt of the first fragment of a datagram and the 
#datagram is not complete yet, the incomplete datagram is discarded and an 
#ICMP "Reassembly timeout" message is sent to the originator of the 
#fragmented datagram.

;TTL_DEFAULT 64
#Type: Byte
#Time To Live value to be used on all the outgoing IP datagrams unless a 
#different value is indicated in the pseudo-header (see section 5.3.5).

;IGNORE_ECHO 0
#Type: Flag
#Flag to indicate if the received ICMP "Echo request" messages must be 
#replied (0) or ignored (1).

;DNS_TOUT 250
#Type: Word
#Default retransmission timeout value for DNS queryes.
#After a DNS query datagram is sent, this counter starts. If it expires,
#the datagram is sent again, up to DNS_RETRY times (or the value specified
#in the particular DNS query).

;DNS_TTOUT 3000
#Type: Word
#Default global timeout value for DNS queryes.
#This counter starts when a DNS query is made. If it expires,
#the entire process is aborted.

;DNS_RETRY 3
#Type: Byte
#Default value for the maximum number of times a DNS query will be sent.
#If no reply is received after the last datagram is sent, the process
#is aborted (or the secondary DNS is queryed, if it was the primary DNS
#who was the target of the query)
