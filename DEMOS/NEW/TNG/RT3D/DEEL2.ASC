vdp8	equ	#ffe7+0
vdp11	equ	#ffe7+3
vdp0	equ	#f3df
vdp1	equ	#f3df+1
vdp2	equ	#f3df+2
vdp5	equ	#f3df+5
vdp6	equ	#f3df+6

H_INT1	equ	#0268
H_INT2	equ	#026D

ATKTIM	equ	#0297	; Auto key timer  
ATKPOS	equ	#0299	; Auto key positie  
ATKSRT	equ	#029B	; Auto key start  
ATKTAB	equ	#029D	; Auto Key tabel  
Fade_Status	equ	#0266
Fade_Palet	equ	#0245
Set_Fade	equ	#0124
MUSSTA	equ	#02B0

PLAYMU	equ	#012D	; Play music 
STOPMU	equ	#0130	; Stop music  
FADEMU	equ	#0133	; Fade music  
MUSINT	equ	#0136	; Music interupt  


Get_File	equ	#011E
Set_Screen	equ	#0121
Start_Music	equ	#012D
Stop_Music	equ	#0130
Quit_Program	equ	#013F

WRVDP	MACRO	@WAARDE,@POORT
	LD	A,@WAARDE
	OUT	(#99),A
	LD	A,128+@POORT
	OUT	(#99),A
	ENDM

chkvdp2	macro
chkvdp2@sym
	in	a,(#99)
	rrca
	jp	c,chkvdp2@sym
	endm






START	EQU	#8000
	db	254
	dw	START,einde,START
	org	START
; data gegevens
MK_hoek_a	equ	#4003
MK_hoek_b	equ	#4004
MK_hoek_g	equ	#4005
MK_zoomfactor	equ	#4006
MK_lower_detail	equ	#4007
MK_do_sort		equ 	#4008

MK_Center_X	equ	#4009
MK_Center_Y	equ	#400A
MK_DESTINPAGE	equ	#400B
MK_PAGEDB:	equ	#400C
MK_PAGES:	equ	#400D
MK_eruit	equ	#4010
; in de 3d kernel wordt gepatched
MK_patch1	equ	#4011
MK_patch2	equ	#4013
; in de 3d kernel wordt gecalled
MK_berekenzoom	equ	#4015
MK_copyfiguur	equ	#4018
MK_gettexture	equ	#401B
MK_CalcMatrix	equ	#401E
;
; Wordt door kernel gecalled als soort van initscreen

	CALL	INITLIST
	ld	a,70
	ld	(MK_Center_Y),a

	LD	A,8
	SCF
	CALL	Set_Screen
	di
	LD	A,(#F3E0)
	OR	%01000000
	OUT	(#99),A
	LD	(#F3E0),A
	LD	A,1+128
	OUT	(#99),A	; Screen ON
	wrvdp	2,15
	ei

	; op 192 lijnen zetten 
	ld	a,(#ffe7+1)
	and	#7f
	di
	out	(#99),a
	ld	(#ffe7+1),a
	ld	a,128+9
	out	(#99),a
	; zichtbaar scherm wissen 
	ld	hl,init_scr1
	ld	bc,#9b+256*11
	wrvdp	36,17
	wrvdp	2,15
	chkvdp2
	otir
	; letters op scherm 
	ld	bc,32*256+#9b
	ld	hl,scr_text
	ld	d,0
scr_ini_lus	ld	a,(hl)
	cp	32
	jp	nc,scr_ini_lus2
	add	a,a
	add	a,a
	add	a,a
	ex	af,af'
	push	bc
	push	hl
	di
	wrvdp	32,17
	ld	hl,copyyletter
	chkvdp2
	ex	af,af'
	out	(c),a
	ld	b,3
	otir
	out	(c),d
	ld	b,10
	otir
	ei
	pop	hl
	pop	bc
scr_ini_lus2	inc	hl
	ld	a,8
	add	a,d
	ld	d,a
	djnz	scr_ini_lus
	; kopieer naar page 1 
	ld	hl,init_scr2
	ld	bc,#9b+256*13
	di
	wrvdp	34,17
	chkvdp2
	otir
	;grootte sprites
	; +192 lijnen
	ld	a,(vdp1)
	and	252
	ld	(vdp1),a
	out	(#99),a
	ld	a,128+1
	out	(#99),a

	ei
	; wouter faden

	call	copyfiguur
;#
;# patch juiste routines
;#
;#
	ld	hl,(MK_patch2)
	ld	de,wisnovisib
	ld	(hl),e
	inc	hl
	ld	(hl),d
	ld	hl,(MK_patch1)
	ld	de,Cursorctrl
	ld	(hl),e
	inc	hl
	ld	(hl),d
;# init van interrupt
	ld	hl,forcopy
	ld	de,forcopybegin
	ld	bc,list-forcopybegin
	;ldir

	ld	hl,H_INT2
	ld	de,oldinterrupt
	ld	bc,5
	ldir
	di
	ld	de,H_INT2
	ld	hl,newinterrupt
	ld	bc,5
	;ldir
	wrvdp	spiegellijn,19
	ld	a,(vdp0)
	;or      16
	out	(#99),a
	ld	a,128
	out	(#99),a

	ei
	ret

;# start kernel zelf
	ret		; start 3d kernel
newinterrupt	jp	forcopybegin
	ds	10

copyfiguur
; binnen a is het gewenste figuur
; wijzigt alles
	ld	hl,figuurfile
	call	Get_File
	di
	wrvdp	2,15
	ld	a,2
	ld	(#ffee),a	; reg 15
	ei
	ld	hl,#a000
	ld	de,texturefile
	ld	bc,11
	ldir
	call	MK_copyfiguur
	ld	hl,texturefile
	ld	bc,1
	ld	de,0
	call	MK_gettexture
	di
	wrvdp	2,15
	ld	a,2
	ld	(#ffee),a	; reg 15
	ei
	ret

figuurfile	db	"NEWFIGURDAT"
texturefile	db	"FIGURE00TEX"

;; deze code wordt gecalled in SWAPPAGE routine
	; wissen niet zichtbare page
wisnovisib	di
	wrvdp	36,17
	ld	hl,wispage
	ei
	ld	bc,#9b+256*3
	chkvdp2
	di
	otir
	ld	a,(MK_DESTINPAGE)
	out	(#9b),a
	ld	b,7
	otir
	ei
	ret
wispage	db	0,0,0
	db	0,1, 180,0, 0,0,%11000000


;
; Routine voor het uitlezen van het toetsenbord
; plus de nodige aanpassingen hiervoor op het scherm
; plaatst
;
; tevens wijzigen hoeken aan de hand van de nieuwe versnellingen
;
YCOORLETTER	EQU	200
NEWKEY	EQU	#FBE5
OLDKEY	db	255
Cursorctrl
	; eerst checken of re een nieuw figuur moet verschijnen
	ld	a,(OLDKEY)
	or	1
	inc	a
	ld	a,(NEWKEY)
	ld	(OLDKEY),a
	jp	nz,keyb3d

	ld	a,(NEWKEY)
	or	1
	inc	a
	jp	z,keyb3d
	ld	a,(NEWKEY)
	push	af
	;call    oud_figuur_weg
	pop	af
	ld	b,7
	rra
cursorcijfer	rra
	jr	nc,cursorcijf2
	djnz	cursorcijfer
cursorcijf2	ld	a,b
	dec	a
	;call    nieuw_figuur


keyb3d	ld	a,(NEWKEY+8)
	inc	a
	jp	z,keyb29	; start hoekwijziging+spritestattoets
	ld	a,(hoekv_g)	; derde hoekversnelling 
	ld	d,a
	ld	hl,(hoekv_a)	; eerste en tweede hoekversnel 

	; hl,d in bc,e voor latere wijzigingscontrole 
	ld	e,d
	ld	b,h
	ld	c,l

	ld	a,(NEWKEY+8)
	rla
	jp	c,keyb1
	dec	l
keyb1	rla
	jp	c,keyb2
	dec	h
keyb2	rla
	jp	c,keyb3
	inc	h
keyb3	rla
	jp	c,keyb4
	inc	l
keyb4	rla
	jp	c,keyb5
	inc	d
keyb5	rla
	jp	c,keyb6
	dec	d
keyb6	rla
	jp	c,keyb91
	; sprites op of af
	ld	a,(spritewissel)
	or	a
	jp	nz,keyb9
	ld	a,(sprites_on)
	xor	1
	ld	(sprites_on),a
	ld	a,(vdp8)
	jp	z,keyb7
	and	253
	jp	keyb8
keyb7	or	2
keyb8	di
	out	(#99),a
	ld	(vdp8),a
	ld	a,128+8
	out	(#99),a
	ld	(spritewissel),a
	jp	keyb9
spritewissel	db	0

keyb91	xor	a
	ld	(spritewissel),a
	; terug opslaan gewijzigde waarden
keyb9	ld	(hoekv_a),hl
	ld	a,d
	ld	(hoekv_g),a
	ld	a,h
	cp	b
	jp	z,keyb10	; niet gewijzigd 
	exx
scr_cor1:	equ	144
	ld	d,scr_cor1	;X-coordinaat waar getal komt
	call	keybdraw
	exx
keyb10
	ld	a,l
	cp	c
	jp	z,keyb20
	exx
scr_cor2:	equ	56
	ld	d,scr_cor2	;X-coordinaat waar getal komt
	call	keybdraw
	exx
keyb20
	ld	a,d
	cp	e
	jp	z,keyb30
scr_cor3:	equ	232
	ld	d,scr_cor3	;X-coordinaat waar getal komt
	ld	hl,keyb30
	push	hl	;om de return juist te krijgen 

keybdraw	ld	e,a
	rra
	rra
	rra
	rra
	ld	c,#9b
	call	keybdraw1
	ld	a,8
	add	a,d
	ld	d,a
	ld	a,e
	call	keybdraw1
	; nog kopieren naar andere pagina 
	di
	wrvdp	32,17
	ld	hl,copyypage
	ld	b,3
	ei
	chkvdp2
	ld	a,-8
	di
	add	a,d
	out	(c),a
	otir
	out	(c),a
	ld	b,10
	otir
	ei
	ret

keybdraw1	and	15
	add	a,a
	add	a,a
	add	a,a
	di
	ex	af,af'
	wrvdp	32,17
	ld	hl,copyyletter
	ei
	chkvdp2
	di
	ex	af,af'
	out	(c),a
	ld	b,3
	otir
	out	(c),d
	ld	b,10
	otir
	ei
	ret
copyyletter	db	0,YCOORLETTER,0
	db	0,184,0,8,0,8,0,0,0,%11010000
copyypage	db	0,184,0
	db	0,184,1
	db	16,0,8,0,0,0,%11010000

keyb29	xor	a
	ld	(spritewissel),a
keyb30	; nog init hoeken?
	ld	a,(NEWKEY+1)
	and	1
	jp	nz,keyb40
	ld	hl,0
	xor	a
	ld	(MK_hoek_a),hl
	ld	(MK_hoek_g),a
	ld	(hoekv_a),hl
	ld	(hoekv_g),a
	ld	d,scr_cor1	;X-coordinaat waar getal komt
	call	keybdraw
	xor	a
	ld	d,scr_cor2
	call	keybdraw
	xor	a
	ld	d,scr_cor3
	call	keybdraw

keyb40
	; zoom factor wijzigen
	ld	a,(NEWKEY+1)
	and	2
	jr	nz,keyb41
	ld	a,32
	jr	keyb49
keyb41	ld	a,(NEWKEY+7)
	and	128
	jr	nz,keyb44
	ld	a,(MK_zoomfactor)
	sub	a,6
	jr	nc,keyb49
	ld	a,5
	jr	keyb49
keyb44	ld	a,(NEWKEY+7)
	and	32
	jr	nz,keyb50
	ld	a,(MK_zoomfactor)
	add	a,6
	cp	52
	jr	c,keyb49
	ld	a,52

keyb49	ld	(MK_zoomfactor),a
	call	MK_berekenzoom

keyb50	ld	a,(NEWKEY+6)
	and	1
	jr	nz,keyb55
	ld	a,(MK_lower_detail)
	dec	a
	jp	nc,keyb59
	xor	a
	jp	keyb59

keyb55	ld	a,(NEWKEY+6)
	and	2
	jr	nz,keyb60
	ld	a,(MK_lower_detail)
	inc	a
	cp	8
	jp	nz,keyb59
	ld	a,7

keyb59
	ld	(MK_lower_detail),a

keyb60
	; bereken nieuwe hoeken
	ld	hl,(hoekv_a)
	ld	a,(MK_hoek_a)
	add	a,l
	ld	(MK_hoek_a),a
	ld	a,(MK_hoek_b)
	add	a,h
	ld	(MK_hoek_b),a
	ld	a,(hoekv_g)
	ld	l,a
	ld	a,(MK_hoek_g)
	add	a,l
	ld	(MK_hoek_g),a

	ld	a,(NEWKEY+7)
	and	4
	jp	z,cursorstartend
	ld	a,(NEWKEY+8)
	rra
	jp	c,cursorend
cursorstartend
	ld	a,50
	ld	(MK_eruit),a
	di
	ld	de,H_INT2
	ld	hl,oldinterrupt
	ld	bc,5
	ldir
	ld	a,(vdp0)
	and	255-16
	ld	(vdp0),a
	out	(#99),a
	ld	a,128
	out	(#99),a
	ei

	LD	HL,Fade_Palet
	LD	DE,Fade_Palet+1
	LD	BC,32-1
	LD	(HL),B
	LDIR		; 
	LD	HL,Fade_Palet
	LD	A,5	;
	CALL	Set_Fade
	ld	a,10
	call	FADEMU

Cursorend
	ret


;nieuw_figuur        call    copyfiguur
;                    call    indexbereken
;                    call    normbereken
;                    xor     a
;nieuw_fig1
;                    add     a,2
;                    push    af
;                    call    berekenzoom
;                    call    swappage
;                    call    blijfdraaien
;                    call    normbereken
;                    call    Teken_Scherm
;                    ei
;                    halt
;                    pop     af
;                    ld      c,a
;                    ld      a,(zoomfactor)
;                    dec     a
;                    cp      c
;                    ld      a,c
;                    jr      nc,nieuw_fig1
;                    ld      a,(zoomfactor)
;                    call    berekenzoom
;                    ret
;
;oud_figuur_weg      ld      a,(zoomfactor)
;oud_weg             push    af
;                    call    berekenzoom
;                    call    swappage
;                    call    blijfdraaien
;                    call    normbereken
;                    call    Teken_Scherm
;                    ei
;                    halt
;                    pop     af
;                    sub     2
;                    jr      nc,oud_weg
;                    ret
;

blijfdraaien
	; bereken nieuwe hoeken
	ld	hl,(hoekv_a)
	ld	a,(MK_hoek_a)
	add	a,l
	ld	(MK_hoek_a),a
	ld	a,(MK_hoek_b)
	add	a,h
	ld	(MK_hoek_b),a
	ld	a,(hoekv_g)
	ld	l,a
	ld	a,(MK_hoek_g)
	add	a,l
	ld	(MK_hoek_g),a
	;Calc_Matrix
;                    jp      indexbereken
	ret


sprites_on	db	0	; op nul is af
vlak1_x	db	0
vlak2_x	db	0
vlak3_x	db	0

hoekv_a	db	2
hoekv_b	db	1
hoekv_g	db	0

init_scr1	db	0,0, 0,0, 0,1, 195,0, 0,0,%1100 0000
init_scr2	db	0,0, 0,0, 0,1, 0,0, 195,0, 0,0,%1110 0000
scr_text	db	"s",16,17,18,19,20,23,0,0,"sss"
	db	16,17,18,19,21,23,0,0,"sss"
	db	16,17,18,19,22,23,0,0,"s"

spiegellijn	equ	110

INITLIST:	LD	DE,#FFFF
	LD	HL,#07D0
	LD	BC,#0000
INITLISTLOOP:	PUSH	HL
	PUSH	BC
	POP	HL
	ADD	HL,DE
	PUSH	HL
	POP	BC
	POP	HL
	ADD	HL,BC
	PUSH	DE
	LD	A,H
	RLCA
	RLCA
	RLCA
	RLCA
	AND	#F0
	LD	D,A
	LD	A,L
	RLCA
	RLCA
	RLCA
	RLCA
	AND	#0F
	OR	D
	XOR	#80
	LD	DE,(WHERELISTGETS)
	LD	(DE),A
	INC	DE
	LD	(WHERELISTGETS),DE
	LD	A,D
	POP	DE
	CP	1+(list/256)
	RET	Z
	LD	A,H
	CP	#80
	LD	DE,#0001
	JR	NC,INITLISTLOOP
	LD	DE,#FFFF
	JR	INITLISTLOOP

WHERELISTGETS:	dw	list

;#                     dit     gaat gecopieerd worden

forcopy	equ	$
forcopybegin	equ	#3200
	org	forcopybegin

initroutine	di
	ld	a,(vdp0)
	out	(#99),a
	ld	a,128
	out	(#99),a

	wrvdp	2,15	;02 in reg 15
	LD	B,spiegellijn+1
	LD	A,(WHEREWEARE)
	INC	A
	LD	(WHEREWEARE),A
	LD	A,(WHEREWEAREBYTE)
	ADD	A,#03
	LD	(WHEREWEAREBYTE),A
	LD	L,A
	LD	H,list/256
	LD	E,#00
wait2:	IN	A,(#99)
	AND	#20
	JR	Z,wait2	; wacht op horizontal scanning
	wrvdp	e,23
	INC	B
	LD	A,#16
	ADD	A,L
	LD	L,A
	LD	A,(HL)
	RLCA
	RLCA
	RLCA
	AND	#07
	LD	E,A
	LD	A,B
	ADD	A,#1B
	RLCA
	CPL
	ADD	A,E
	LD	E,A
	LD	A,B
	CP	185
	JR	NZ,wait2
	wrvdp	0,23
	wrvdp	(#ffee),15
	ld	a,(vdp0)
	or	16
	out	(#99),a
	ld	a,128
	out	(#99),a
	;jp      oldinterrupt
oldinterrupt	ds	8



DB14B:	dw	#03e8
WHEREWEAREBYTE:	db	0
WHEREWEARE:	dw	list
	ds	(($/256)+1)*256-$
list
forcopyend	equ	$

einde	equ	forcopy + forcopyend - forcopybegin
